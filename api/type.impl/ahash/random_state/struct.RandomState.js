(function() {
    var type_impls = Object.fromEntries([["rune",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BuildHasher-for-RandomState\" class=\"impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#378\">Source</a><a href=\"#impl-BuildHasher-for-RandomState\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> for <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.build_hasher\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#413\">Source</a><a href=\"#method.build_hasher\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html#tymethod.build_hasher\" class=\"fn\">build_hasher</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ahash/fallback_hash/struct.AHasher.html\" title=\"struct ahash::fallback_hash::AHasher\">AHasher</a></h4></section></summary><div class=\"docblock\"><p>Constructs a new <a href=\"ahash/fallback_hash/struct.AHasher.html\" title=\"struct ahash::fallback_hash::AHasher\">AHasher</a> with keys based on this <a href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a> object.\nThis means that two different <a href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a>s will will generate\n<a href=\"ahash/fallback_hash/struct.AHasher.html\" title=\"struct ahash::fallback_hash::AHasher\">AHasher</a>s that will return different hashcodes, but <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>s created from the same <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>\nwill generate the same hashes for the same input data.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>        <span class=\"kw\">use </span>ahash::{AHasher, RandomState};\n        <span class=\"kw\">use </span>std::hash::{Hasher, BuildHasher};\n\n        <span class=\"kw\">let </span>build_hasher = RandomState::new();\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hasher_1 = build_hasher.build_hasher();\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hasher_2 = build_hasher.build_hasher();\n\n        hasher_1.write_u32(<span class=\"number\">1234</span>);\n        hasher_2.write_u32(<span class=\"number\">1234</span>);\n\n        <span class=\"macro\">assert_eq!</span>(hasher_1.finish(), hasher_2.finish());\n\n        <span class=\"kw\">let </span>other_build_hasher = RandomState::new();\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>different_hasher = other_build_hasher.build_hasher();\n        different_hasher.write_u32(<span class=\"number\">1234</span>);\n        <span class=\"macro\">assert_ne!</span>(different_hasher.finish(), hasher_1.finish());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#458\">Source</a><a href=\"#method.hash_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html#method.hash_one\" class=\"fn\">hash_one</a>&lt;T&gt;(&amp;self, x: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h4></section></summary><div class=\"docblock\"><p>Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:\nFor example:</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>    <span class=\"kw\">use </span>std::hash::BuildHasher;\n    <span class=\"kw\">use </span>ahash::RandomState;\n\n    <span class=\"kw\">let </span>hash_builder = RandomState::new();\n    <span class=\"kw\">let </span>hash = hash_builder.hash_one(<span class=\"string\">\"Some Data\"</span>);</code></pre></div>\n<p>This is similar to:</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>    <span class=\"kw\">use </span>std::hash::{BuildHasher, Hash, Hasher};\n    <span class=\"kw\">use </span>ahash::RandomState;\n\n    <span class=\"kw\">let </span>hash_builder = RandomState::new();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hasher = hash_builder.build_hasher();\n    <span class=\"string\">\"Some Data\"</span>.hash(<span class=\"kw-2\">&amp;mut </span>hasher);\n    <span class=\"kw\">let </span>hash = hasher.finish();</code></pre></div>\n<p>(Note that these two ways to get a hash may not produce the same value for the same data)</p>\n<p>This is intended as a convenience for code which <em>consumes</em> hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\"><code>Hash</code></a> implementation behaves as expected.</p>\n<p>This must not be used in any code which <em>creates</em> hashes, such as in an\nimplementation of <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\"><code>Hash</code></a>.  The way to create a combined hash of\nmultiple values is to call <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" title=\"method core::hash::Hash::hash\"><code>Hash::hash</code></a> multiple times using the same\n<a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>, not to call this method repeatedly and combine the results.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Hasher\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#379\">Source</a><a href=\"#associatedtype.Hasher\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html#associatedtype.Hasher\" class=\"associatedtype\">Hasher</a> = <a class=\"struct\" href=\"ahash/fallback_hash/struct.AHasher.html\" title=\"struct ahash::fallback_hash::AHasher\">AHasher</a></h4></section></summary><div class='docblock'>Type of the hasher that will be created.</div></details></div></details>","BuildHasher","rune::alloc::hash_map::RandomState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-RandomState\" class=\"impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#214\">Source</a><a href=\"#impl-Clone-for-RandomState\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#214\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#211\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","rune::alloc::hash_map::RandomState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RandomState\" class=\"impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#222\">Source</a><a href=\"#impl-Debug-for-RandomState\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#223\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","rune::alloc::hash_map::RandomState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RandomState\" class=\"impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#228\">Source</a><a href=\"#impl-RandomState\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#234\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ahash/random_state/struct.RandomState.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h4></section></summary><div class=\"docblock\"><p>Create a new <code>RandomState</code> <code>BuildHasher</code> using random keys.</p>\n<p>Each instance will have a unique set of keys derived from <a href=\"ahash/random_state/trait.RandomSource.html\" title=\"trait ahash::random_state::RandomSource\">RandomSource</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generate_with\" class=\"method\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#250\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ahash/random_state/struct.RandomState.html#tymethod.generate_with\" class=\"fn\">generate_with</a>(k0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, k1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, k2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, k3: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h4></section></summary><div class=\"docblock\"><p>Create a new <code>RandomState</code> <code>BuildHasher</code> based on the provided seeds, but in such a way\nthat each time it is called the resulting state will be different and of high quality.\nThis allows fixed constant or poor quality seeds to be provided without the problem of different\n<code>BuildHasher</code>s being identical or weak.</p>\n<p>This is done via permuting the provided values with the value of a static counter and memory address.\n(This makes this method somewhat more expensive than <code>with_seeds</code> below which does not do this).</p>\n<p>The provided values (k0-k3) do not need to be of high quality but they should not all be the same value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_seed\" class=\"method\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#289\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ahash/random_state/struct.RandomState.html#tymethod.with_seed\" class=\"fn\">with_seed</a>(key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h4></section></summary><div class=\"docblock\"><p>Build a <code>RandomState</code> from a single key. The provided key does not need to be of high quality,\nbut all <code>RandomState</code>s created from the same key will produce identical hashers.\n(In contrast to <code>generate_with</code> above)</p>\n<p>This allows for explicitly setting the seed to be used.</p>\n<p>Note: This method does not require the provided seed to be strong.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_seeds\" class=\"method\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#303\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"ahash/random_state/struct.RandomState.html#tymethod.with_seeds\" class=\"fn\">with_seeds</a>(k0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, k1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, k2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, k3: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h4></section></summary><div class=\"docblock\"><p>Allows for explicitly setting the seeds to used.\nAll <code>RandomState</code>s created with the same set of keys key will produce identical hashers.\n(In contrast to <code>generate_with</code> above)</p>\n<p>Note: If DOS resistance is desired one of these should be a decent quality random number.\nIf 4 high quality random number are not cheaply available this method is robust against 0s being passed for\none or more of the parameters or the same value being passed for more than one parameter.\nIt is recommended to pass numbers in order from highest to lowest quality (if there is any difference).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_one\" class=\"method\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#352-354\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ahash/random_state/struct.RandomState.html#tymethod.hash_one\" class=\"fn\">hash_one</a>&lt;T&gt;(&amp;self, x: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:\nFor example:</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>    <span class=\"kw\">use </span>std::hash::BuildHasher;\n    <span class=\"kw\">use </span>ahash::RandomState;\n\n    <span class=\"kw\">let </span>hash_builder = RandomState::new();\n    <span class=\"kw\">let </span>hash = hash_builder.hash_one(<span class=\"string\">\"Some Data\"</span>);</code></pre></div>\n<p>This is similar to:</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>    <span class=\"kw\">use </span>std::hash::{BuildHasher, Hash, Hasher};\n    <span class=\"kw\">use </span>ahash::RandomState;\n\n    <span class=\"kw\">let </span>hash_builder = RandomState::new();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hasher = hash_builder.build_hasher();\n    <span class=\"string\">\"Some Data\"</span>.hash(<span class=\"kw-2\">&amp;mut </span>hasher);\n    <span class=\"kw\">let </span>hash = hasher.finish();</code></pre></div>\n<p>(Note that these two ways to get a hash may not produce the same value for the same data)</p>\n<p>This is intended as a convenience for code which <em>consumes</em> hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\"><code>Hash</code></a> implementation behaves as expected.</p>\n<p>This must not be used in any code which <em>creates</em> hashes, such as in an\nimplementation of <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\"><code>Hash</code></a>.  The way to create a combined hash of\nmultiple values is to call <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" title=\"method core::hash::Hash::hash\"><code>Hash::hash</code></a> multiple times using the same\n<a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>, not to call this method repeatedly and combine the results.</p>\n</div></details></div></details>",0,"rune::alloc::hash_map::RandomState"]]],["rune_alloc",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BuildHasher-for-RandomState\" class=\"impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#378\">Source</a><a href=\"#impl-BuildHasher-for-RandomState\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> for <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.build_hasher\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#413\">Source</a><a href=\"#method.build_hasher\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html#tymethod.build_hasher\" class=\"fn\">build_hasher</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ahash/fallback_hash/struct.AHasher.html\" title=\"struct ahash::fallback_hash::AHasher\">AHasher</a></h4></section></summary><div class=\"docblock\"><p>Constructs a new <a href=\"ahash/fallback_hash/struct.AHasher.html\" title=\"struct ahash::fallback_hash::AHasher\">AHasher</a> with keys based on this <a href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a> object.\nThis means that two different <a href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a>s will will generate\n<a href=\"ahash/fallback_hash/struct.AHasher.html\" title=\"struct ahash::fallback_hash::AHasher\">AHasher</a>s that will return different hashcodes, but <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>s created from the same <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>\nwill generate the same hashes for the same input data.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>        <span class=\"kw\">use </span>ahash::{AHasher, RandomState};\n        <span class=\"kw\">use </span>std::hash::{Hasher, BuildHasher};\n\n        <span class=\"kw\">let </span>build_hasher = RandomState::new();\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hasher_1 = build_hasher.build_hasher();\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hasher_2 = build_hasher.build_hasher();\n\n        hasher_1.write_u32(<span class=\"number\">1234</span>);\n        hasher_2.write_u32(<span class=\"number\">1234</span>);\n\n        <span class=\"macro\">assert_eq!</span>(hasher_1.finish(), hasher_2.finish());\n\n        <span class=\"kw\">let </span>other_build_hasher = RandomState::new();\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>different_hasher = other_build_hasher.build_hasher();\n        different_hasher.write_u32(<span class=\"number\">1234</span>);\n        <span class=\"macro\">assert_ne!</span>(different_hasher.finish(), hasher_1.finish());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#458\">Source</a><a href=\"#method.hash_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html#method.hash_one\" class=\"fn\">hash_one</a>&lt;T&gt;(&amp;self, x: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h4></section></summary><div class=\"docblock\"><p>Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:\nFor example:</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>    <span class=\"kw\">use </span>std::hash::BuildHasher;\n    <span class=\"kw\">use </span>ahash::RandomState;\n\n    <span class=\"kw\">let </span>hash_builder = RandomState::new();\n    <span class=\"kw\">let </span>hash = hash_builder.hash_one(<span class=\"string\">\"Some Data\"</span>);</code></pre></div>\n<p>This is similar to:</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>    <span class=\"kw\">use </span>std::hash::{BuildHasher, Hash, Hasher};\n    <span class=\"kw\">use </span>ahash::RandomState;\n\n    <span class=\"kw\">let </span>hash_builder = RandomState::new();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hasher = hash_builder.build_hasher();\n    <span class=\"string\">\"Some Data\"</span>.hash(<span class=\"kw-2\">&amp;mut </span>hasher);\n    <span class=\"kw\">let </span>hash = hasher.finish();</code></pre></div>\n<p>(Note that these two ways to get a hash may not produce the same value for the same data)</p>\n<p>This is intended as a convenience for code which <em>consumes</em> hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\"><code>Hash</code></a> implementation behaves as expected.</p>\n<p>This must not be used in any code which <em>creates</em> hashes, such as in an\nimplementation of <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\"><code>Hash</code></a>.  The way to create a combined hash of\nmultiple values is to call <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" title=\"method core::hash::Hash::hash\"><code>Hash::hash</code></a> multiple times using the same\n<a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>, not to call this method repeatedly and combine the results.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Hasher\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#379\">Source</a><a href=\"#associatedtype.Hasher\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html#associatedtype.Hasher\" class=\"associatedtype\">Hasher</a> = <a class=\"struct\" href=\"ahash/fallback_hash/struct.AHasher.html\" title=\"struct ahash::fallback_hash::AHasher\">AHasher</a></h4></section></summary><div class='docblock'>Type of the hasher that will be created.</div></details></div></details>","BuildHasher","rune_alloc::hashbrown::map::RandomState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-RandomState\" class=\"impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#214\">Source</a><a href=\"#impl-Clone-for-RandomState\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#214\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#211\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","rune_alloc::hashbrown::map::RandomState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RandomState\" class=\"impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#222\">Source</a><a href=\"#impl-Debug-for-RandomState\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#223\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","rune_alloc::hashbrown::map::RandomState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RandomState\" class=\"impl\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#228\">Source</a><a href=\"#impl-RandomState\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#234\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ahash/random_state/struct.RandomState.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h4></section></summary><div class=\"docblock\"><p>Create a new <code>RandomState</code> <code>BuildHasher</code> using random keys.</p>\n<p>Each instance will have a unique set of keys derived from <a href=\"ahash/random_state/trait.RandomSource.html\" title=\"trait ahash::random_state::RandomSource\">RandomSource</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generate_with\" class=\"method\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#250\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ahash/random_state/struct.RandomState.html#tymethod.generate_with\" class=\"fn\">generate_with</a>(k0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, k1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, k2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, k3: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h4></section></summary><div class=\"docblock\"><p>Create a new <code>RandomState</code> <code>BuildHasher</code> based on the provided seeds, but in such a way\nthat each time it is called the resulting state will be different and of high quality.\nThis allows fixed constant or poor quality seeds to be provided without the problem of different\n<code>BuildHasher</code>s being identical or weak.</p>\n<p>This is done via permuting the provided values with the value of a static counter and memory address.\n(This makes this method somewhat more expensive than <code>with_seeds</code> below which does not do this).</p>\n<p>The provided values (k0-k3) do not need to be of high quality but they should not all be the same value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_seed\" class=\"method\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#289\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ahash/random_state/struct.RandomState.html#tymethod.with_seed\" class=\"fn\">with_seed</a>(key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h4></section></summary><div class=\"docblock\"><p>Build a <code>RandomState</code> from a single key. The provided key does not need to be of high quality,\nbut all <code>RandomState</code>s created from the same key will produce identical hashers.\n(In contrast to <code>generate_with</code> above)</p>\n<p>This allows for explicitly setting the seed to be used.</p>\n<p>Note: This method does not require the provided seed to be strong.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_seeds\" class=\"method\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#303\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"ahash/random_state/struct.RandomState.html#tymethod.with_seeds\" class=\"fn\">with_seeds</a>(k0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, k1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, k2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, k3: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a></h4></section></summary><div class=\"docblock\"><p>Allows for explicitly setting the seeds to used.\nAll <code>RandomState</code>s created with the same set of keys key will produce identical hashers.\n(In contrast to <code>generate_with</code> above)</p>\n<p>Note: If DOS resistance is desired one of these should be a decent quality random number.\nIf 4 high quality random number are not cheaply available this method is robust against 0s being passed for\none or more of the parameters or the same value being passed for more than one parameter.\nIt is recommended to pass numbers in order from highest to lowest quality (if there is any difference).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_one\" class=\"method\"><a class=\"src rightside\" href=\"src/ahash/random_state.rs.html#352-354\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ahash/random_state/struct.RandomState.html#tymethod.hash_one\" class=\"fn\">hash_one</a>&lt;T&gt;(&amp;self, x: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:\nFor example:</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>    <span class=\"kw\">use </span>std::hash::BuildHasher;\n    <span class=\"kw\">use </span>ahash::RandomState;\n\n    <span class=\"kw\">let </span>hash_builder = RandomState::new();\n    <span class=\"kw\">let </span>hash = hash_builder.hash_one(<span class=\"string\">\"Some Data\"</span>);</code></pre></div>\n<p>This is similar to:</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>    <span class=\"kw\">use </span>std::hash::{BuildHasher, Hash, Hasher};\n    <span class=\"kw\">use </span>ahash::RandomState;\n\n    <span class=\"kw\">let </span>hash_builder = RandomState::new();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hasher = hash_builder.build_hasher();\n    <span class=\"string\">\"Some Data\"</span>.hash(<span class=\"kw-2\">&amp;mut </span>hasher);\n    <span class=\"kw\">let </span>hash = hasher.finish();</code></pre></div>\n<p>(Note that these two ways to get a hash may not produce the same value for the same data)</p>\n<p>This is intended as a convenience for code which <em>consumes</em> hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\"><code>Hash</code></a> implementation behaves as expected.</p>\n<p>This must not be used in any code which <em>creates</em> hashes, such as in an\nimplementation of <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\"><code>Hash</code></a>.  The way to create a combined hash of\nmultiple values is to call <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" title=\"method core::hash::Hash::hash\"><code>Hash::hash</code></a> multiple times using the same\n<a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>, not to call this method repeatedly and combine the results.</p>\n</div></details></div></details>",0,"rune_alloc::hashbrown::map::RandomState"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[20248,20275]}