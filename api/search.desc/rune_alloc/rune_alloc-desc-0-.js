searchState.loadedDescShard("rune_alloc", 0, "The Rune Language, an embeddable dynamic programming …\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nA pointer type that uniquely owns a heap allocation of …\nContains the error value\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nContains the success value\nA <code>Result</code> aliased specialized towards an allocation <code>Error</code>.\nA UTF-8–encoded, growable string.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nA double-ended queue implemented with a growable ring …\nTerminates the process in an abnormal fashion.\nAllocated types.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nA module for working with borrowed data.\nThe <code>Box&lt;T&gt;</code> type for heap allocation.\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nReturns the number of elements the map can hold without …\nReturns the number of elements the set can hold without …\nClears the map, removing all elements.\nClears the set, removing all elements.\nClears the map, removing all key-value pairs. Keeps the …\nClears the set, removing all values.\nThe <code>TryClone</code> trait for types that cannot be ‘implicitly …\nReturns <code>true</code> if the set contains an element equal to the …\nReturns <code>true</code> if the set contains a value.\nReturns <code>true</code> if the map contains a value for the specified …\nReturns <code>true</code> if the map contains a value for the specified …\nCreates an empty <code>BTreeMap</code>.\nCreates an empty <code>BTreeSet</code>.\nCreates an empty <code>HashMap&lt;K, V, S, A&gt;</code>, with the <code>Default</code> …\nCreates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …\nCreates an empty <code>Vec&lt;T&gt;</code>.\nCreates an empty deque.\nConstruct a default string.\nVisits the elements representing the difference, i.e., the …\nVisits the values representing the difference, i.e., the …\nClears the map, returning all key-value pairs as an …\nClears the set, returning all elements in an iterator.\nGets the given key’s corresponding entry in the map for …\nGets the given key’s corresponding entry in the map for …\nGets the given value’s corresponding entry in the set …\nGets the given key’s corresponding entry by reference in …\nError types used by rune alloc.\nCreates an iterator that visits all elements (key-value …\nCreates an iterator that visits all elements in ascending …\nDrains elements which are true under the given predicate, …\nDrains elements which are true under the given predicate, …\nReturns a reference to the first element in the set, if …\nReturns the first entry in the map for in-place …\nReturns the first key-value pair in the map. The key in …\nBuilt-in formatting utilities.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the given <code>String</code> to a vector <code>Vec</code> that holds …\nReturns the argument unchanged.\nTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nConvert a boxed slice into a vector by transferring …\nTurn a <code>Vec&lt;T&gt;</code> into a <code>VecDeque&lt;T&gt;</code>.\nReturns the argument unchanged.\nConverts the given boxed <code>str</code> slice to a <code>String</code>. It is …\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the element in the set, if any, …\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value in the set, if any, that …\nReturns the key-value pair corresponding to the supplied …\nReturns the key-value pair corresponding to the supplied …\nReturns the key-value pair corresponding to the supplied …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns a mutable reference to the value corresponding to …\nReturns a mutable reference to the value corresponding to …\nLike <code>BTreeMap::get_mut</code> but allows for custom value …\nInserts the given <code>value</code> into the set if it is not present, …\nInserts an owned copy of the given <code>value</code> into the set if …\nInserts a value computed from <code>f</code> into the set if the given …\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the set’s <code>BuildHasher</code>.\nReturns a reference to the value corresponding to the …\nReturns a reference to the value corresponding to the …\nVisits the elements representing the intersection, i.e., …\nVisits the values representing the intersection, i.e., the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets an iterator for moving out the <code>BTreeSet</code>’s contents.\nCreates a consuming iterator, that is, one that moves each …\nCreates an iterator over the entries of a <code>HashMap</code> in …\nCreates an iterator over the entries of a <code>HashMap</code> in …\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator, that is, one that moves each …\nConsumes the deque into a front-to-back iterator yielding …\nCreates a consuming iterator visiting all the keys, in …\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values, in …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nReturns <code>true</code> if the set is a superset of another, i.e., …\nComposable external iteration.\nGets an iterator over the entries of the map, sorted by …\nGets an iterator that visits the elements in the <code>BTreeSet</code> …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order. The …\nGets a mutable iterator over the entries of the map, …\nAn iterator visiting all key-value pairs in arbitrary …\nPerform a raw iteration over the btree.\nGets an iterator over the keys of the map, in sorted order.\nAn iterator visiting all keys in arbitrary order. The …\nReturns a reference to the last element in the set, if any.\nReturns the last entry in the map for in-place …\nReturns the last key-value pair in the map. The key in …\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nMemory limits for Rune.\nReturns a <code>Cursor</code> pointing at the first element that is …\nReturns a <code>CursorMut</code> pointing at the first element that is …\nMakes a new, empty <code>BTreeMap</code>.\nMakes a new, empty <code>BTreeSet</code>.\nCreates an empty <code>HashMap</code>.\nCreates an empty <code>HashSet</code>.\nMakes a new empty BTreeMap with a reasonable choice for B.\nMakes a new <code>BTreeSet</code> with a reasonable choice of B.\nCreates an empty <code>HashMap</code> using the given allocator.\nCreates an empty <code>HashSet</code>.\nCross-platform path manipulation.\nRemoves and returns the first element in the map. The key …\nRemoves the first element from the set and returns it, if …\nRemoves and returns the last element in the map. The key …\nRemoves the last element from the set and returns it, if …\nPrelude for common traits used in combination with this …\nConstructs a double-ended iterator over a sub-range of …\nConstructs a double-ended iterator over a sub-range of …\nConstructs a mutable double-ended iterator over a …\nCreates a raw immutable entry builder for the HashMap.\nCreates a raw entry builder for the HashMap.\nReturns a reference to the <code>RawTable</code> used underneath <code>HashMap</code>…\nReturns a reference to the <code>RawTable</code> used underneath <code>HashSet</code>…\nReturns a mutable reference to the <code>RawTable</code> used …\nReturns a mutable reference to the <code>RawTable</code> used underneath\nRemoves a key from the map, returning the value at the key …\nIf the set contains an element equal to the value, removes …\nRemoves a key from the map, returning the value at the key …\nRemoves a value from the set. Returns whether the value was\nRemoves a key from the map, returning the stored key and …\nRemoves a key from the map, returning the stored key and …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate. …\nRetains only the elements specified by the predicate.\nUtilities for the <code>str</code> primitive type.\nA UTF-8–encoded, growable string.\nVisits the elements representing the symmetric difference, …\nVisits the values representing the symmetric difference, …\nRemoves and returns the element in the set, if any, that …\nRemoves and returns the value in the set, if any, that is …\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nInserts all new key-values from the iterator to existing …\nInserts all new key-values from the iterator to existing …\nInserts all new key-values from the iterator to existing …\nExtend a string using a character iterator.\nExtend a string using a character iterator.\nCreates a <code>String</code> using interpolation of runtime …\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>.\nConverts a std <code>String</code> into a <code>Box&lt;str&gt;</code>.\nConverts a <code>&amp;[u8]</code> into a <code>Box&lt;[u8]&gt;</code>.\nConverts a <code>&amp;[u8]</code> into a <code>Box&lt;[u8]&gt;</code>.\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nExamples\nExamples\nConverts a <code>[T; N]</code> into a <code>Vec&lt;T&gt;</code>.\nConverts a std <code>Vec&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nConverts a <code>&amp;[T]</code> into a <code>Vec&lt;T&gt;</code>.\nConverts a <code>[T; N]</code> into a <code>VecDeque&lt;T&gt;</code>.\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConverts a <code>Cow&lt;str&gt;</code> into a <code>String</code>.\nConverts a <code>&amp;str</code> into a <code>String</code>.\nTry to convert a std <code>String</code> into a <code>String</code>.\nTry to convert a std <code>Box&lt;str&gt;</code> into a <code>String</code>.\nConstruct a string from an iterator of characters.\nConstruct a string from an iterator of characters.\nInserts a key-value pair into the map.\nAdds a value to the set.\nInserts a key-value pair into the map.\nAdds a value to the set.\nTries to insert a key-value pair into the map, and returns …\nTries to insert a key-value pair into the map, and returns …\nInsert a key-value pair into the map without checking if …\nInsert a value the set without checking if the value …\nAdds a value to the set, replacing the existing element, …\nAdds a value to the set, replacing the existing value, if …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the set with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nShrinks the capacity of the set as much as possible. It …\nSplits the collection into two at the given key. Returns …\nSplits the collection into two at the value. Returns a new …\nCreates an empty <code>HashMap</code> with the specified capacity.\nCreates an empty <code>HashSet</code> with the specified capacity.\nCreates an empty <code>HashMap</code> with the specified capacity, …\nCreates an empty <code>HashSet</code> with the specified capacity, using\nCreates an empty <code>HashMap</code> with the specified capacity, …\nCreates an empty <code>HashSet</code> with the specified capacity, using\nCreates an empty <code>HashMap</code> with the specified capacity using …\nCreates an empty <code>HashSet</code> with the specified capacity.\nVisits the elements representing the union, i.e., all the …\nVisits the values representing the union, i.e., all the …\nReturns a <code>Cursor</code> pointing at the last element that is …\nReturns a <code>CursorMut</code> pointing at the last element that is …\nGets an iterator over the values of the map, in order by …\nAn iterator visiting all values in arbitrary order. The …\nGets a mutable iterator over the values of the map, in …\nAn iterator visiting all values mutably in arbitrary order.\nA contiguous growable array type with heap-allocated …\nA double-ended queue (deque) implemented with a growable …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nError raised while allocating.\nAn implementation of <code>Allocator</code> can allocate, grow, shrink, …\nThe default global allocator for Rune.\nAttempts to allocate a block of memory.\nBehaves like <code>allocate</code>, but also ensures that the returned …\nBehaves like <code>allocate</code>, but also ensures that the returned …\nDeallocates the memory referenced by <code>ptr</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to extend the memory block.\nAttempts to extend the memory block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBehaves like <code>grow</code>, but also ensures that the new contents …\nBehaves like <code>grow</code>, but also ensures that the new contents …\nBorrowed data.\nA clone-on-write smart pointer.\nOwned data.\nThe resulting type after obtaining ownership.\nA generalization of <code>TryClone</code> to borrowed data.\nConstruct a <code>Cow</code> from a reference.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the data is borrowed, i.e. if <code>to_mut</code> would …\nReturns true if the data is owned, i.e. if <code>to_mut</code> would be …\nExtracts the owned data.\nAcquires a mutable reference to the owned form of the data.\nCreates owned data from borrowed data, usually by cloning.\nA pointer type that uniquely owns a heap allocation of …\nConverts to <code>Box&lt;T, A&gt;</code>.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nConstructs a box from a raw pointer in the given allocator.\nConvert from a std <code>Box</code>.\nConsumes the <code>Box</code>, returning the wrapped value.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nAllocates memory on the heap and then places <code>x</code> into it.\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nAn ordered map based on a B-Tree.\nA cursor over a <code>BTreeMap</code>.\nA cursor over a <code>BTreeMap</code> with editing operations.\nA view into a single entry in a map, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeMap.\nAn owning iterator over the entries of a <code>BTreeMap</code>.\nAn owning iterator over the keys of a <code>BTreeMap</code>.\nAn owning iterator over the values of a <code>BTreeMap</code>.\nAn iterator over the entries of a <code>BTreeMap</code>.\nA mutable iterator over the entries of a <code>BTreeMap</code>.\nA raw iterator over a map where the caller is responsible …\nAn iterator over the keys of a <code>BTreeMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nAn iterator over a sub-range of entries in a <code>BTreeMap</code>.\nA mutable iterator over a sub-range of entries in a …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeMap</code>. It is part of …\nAn iterator over the values of a <code>BTreeMap</code>.\nA mutable iterator over the values of a <code>BTreeMap</code>.\nProvides in-place mutable access to an occupied entry …\nCreates an empty <code>btree_map::Iter</code>.\nCreates an empty <code>btree_map::IterMut</code>.\nCreates an empty <code>btree_map::IntoIter</code>.\nCreates an empty <code>btree_map::Keys</code>.\nCreates an empty <code>btree_map::Values</code>.\nCreates an empty <code>btree_map::IntoKeys</code>.\nCreates an empty <code>btree_map::IntoValues</code>.\nCreates an empty <code>Range</code>.\nThe entry in the map that was already occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry with the <code>OccupiedEntry</code>’s key,\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the key.\nConverts the entry into a mutable reference to its value.\nReturns a reference to this entry’s key.\nGets a reference to the key that would be used when …\nGets a reference to the key in the entry.\nReturns a reference to the key of the element that the …\nReturns a reference to the key of the element that the …\nReturns a reference to the key and value of the element …\nReturns a reference to the key and value of the element …\nReturns a reference to the key and mutable reference to …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nTakes the value of the entry out of the map, and returns …\nTake ownership of the key and value from the map.\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nReturns a reference to the value of the element that the …\nReturns a reference to the value of the element that the …\nThe value which was not inserted, because the entry was …\nReturns a mutable reference to the value of the element …\nAn ordered set based on a B-Tree.\nA lazy iterator producing elements in the difference of …\nAn iterator produced by calling <code>extract_if</code> on BTreeSet.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>BTreeSet</code>.\nAn iterator over the items of a <code>BTreeSet</code>.\nAn iterator over a sub-range of items in a <code>BTreeSet</code>.\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>BTreeSet</code>…\nCreates an empty <code>btree_set::Iter</code>.\nCreates an empty <code>btree_set::IntoIter</code>.\nCreates an empty <code>btree_set::Range</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFallible <code>TryClone</code> trait.\nDerive to implement the <code>TryClone</code> trait.\nMarker trait for types which are <code>Copy</code>.\nTry to clone the current value, raising an allocation …\nPerforms copy-assignment from <code>source</code>.\nCustom error being returned.\nAn error type returned when a custom error is available …\nThe error type for methods which allocate or reserve.\nTry reserve error being returned.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFallible write formatting implementation.\nThe <code>format</code> function takes an <code>Arguments</code> struct and returns …\nWrites a <code>char</code> into this writer, returning whether the …\nWrites a string slice into this writer, returning whether …\nDefault hasher for <code>HashMap</code>.\nA draining iterator over the entries of a <code>HashMap</code> in …\nA view into a single entry in a map, which may either be …\nA view into a single entry in a map, which may either be …\nA draining iterator over entries of a <code>HashMap</code> which don’…\nA hash map implemented with quadratic probing and SIMD …\nDefault hasher.\nAn owning iterator over the entries of a <code>HashMap</code> in …\nAn owning iterator over the keys of a <code>HashMap</code> in arbitrary …\nAn owning iterator over the values of a <code>HashMap</code> in …\nAn iterator over the entries of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashMap</code> in …\nAn iterator over the keys of a <code>HashMap</code> in arbitrary order. …\nAn occupied entry.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nDefault source of random state.\nA builder for computing where in a <code>HashMap</code> a key-value …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the values of a <code>HashMap</code> in …\nProvides in-place mutable access to an occupied entry …\nProvides in-place mutable access to an occupied entry …\nProvides in-place mutable access to an occupied entry …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nThe entry in the map that was already occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>RawEntryMut</code> from the given hash and matching …\nAccess an immutable entry by hash and matching function.\nCreates a <code>RawEntryMut</code> from the given key.\nAccess an immutable entry by key.\nCreates a <code>RawEntryMut</code> from the given key and its hash.\nAccess an immutable entry by a key and its hash.\nGets a reference to the value in the entry.\nGets a reference to the value in the entry.\nGets a reference to the value in the entry.\nGets a reference to the key and value in the entry.\nGets a mutable reference to the key and value in the entry.\nGets a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry, and returns the entry’s old …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the entry into a mutable reference to the key in …\nTake ownership of the key.\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntryRef into a mutable reference to …\nGets a reference to the key in the entry.\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nGets a mutable reference to the key in the entry.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nEnsures a value is in the entry by inserting, if empty, …\nTakes the value out of the entry, and returns it.\nTakes the value out of the entry, and returns it. Keeps …\nTakes the value out of the entry, and returns it. Keeps …\nTake the ownership of the key and value from the map.\nTake the ownership of the key and value from the map. …\nTake the ownership of the key and value from the map. …\nReplaces the entry, returning the old key and value. The …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nReplaces the key in the hash map with the key used to …\nSets the value of the entry, and returns a …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns an OccupiedEntry.\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns an …\nSets the value of the entry with the VacantEntryRef’s …\nSets the value of the entry with the VacantEntry’s key, …\nSet the value of an entry with a custom hasher function.\nTake ownership of the key.\nReplaces the entry, returning the old key and value. The …\nReplaces the key in the hash map with the key used to …\nThe value which was not inserted, because the entry was …\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of a <code>HashSet</code>.\nA view into a single entry in a set, which may either be …\nA draining iterator over entries of a <code>HashSet</code> which don’…\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>HashSet</code>.\nAn iterator over the items of a <code>HashSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashSet</code>. It is part of …\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>HashSet</code>…\nA vacant entry.\nA view into a vacant entry in a <code>HashSet</code>. It is part of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to this entry’s value.\nGets a reference to the value in the entry.\nGets a reference to the value that would be used when …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the value.\nEnsures a value is in the entry by inserting if it was …\nTakes the value out of the entry, and returns it. Keeps …\nReplaces the entry, returning the old value. The new value …\nSets the value of the entry, and returns an OccupiedEntry.\nSets the value of the entry with the VacantEntry’s value.\nIterator extension trait.\nAn iterator that clones the elements of an underlying …\nExtend a collection with the contents of an iterator.\nConversion from an <code>Iterator</code> within the <code>Global</code> allocator.\nConversion from an <code>Iterator</code> within a custom allocator <code>A</code>.\nHelper trait for joining iterators.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an iterator which <code>try_clone</code>s all of its elements.\nCreates an iterator which <code>try_clone</code>s all of its elements.\nTransforms an iterator into a collection using fallible …\nTransforms an iterator into a collection using fallible …\nTransforms an iterator into a collection using fallible …\nTransforms an iterator into a collection using fallible …\nExtends a collection with the contents of an iterator.\nCreates a value from an iterator within an allocator.\nCreates a value from an iterator within an allocator.\nTry to join the given value.\nTry to join the given value.\nTry to join the given value in the given allocator.\nTry to join the given value.\nTry to join the given value.\nSomething being budgeted.\nCall the wrapped function, replacing the current budget …\nReturns the argument unchanged.\nGet remaining memory that may be allocated.\nCalls <code>U::from(self)</code>.\nWrap the given value with a memory limit. Using a value of …\nAn iterator over <code>Path</code> and its ancestors.\nA single component of a path.\nAn iterator over the <code>Component</code>s of a <code>Path</code>.\nA reference to the current directory, i.e., <code>.</code>.\nDevice namespace prefix, e.g., <code>\\\\.\\COM42</code>.\nPrefix <code>C:</code> for the given disk drive.\nHelper struct for safely printing paths with <code>format!</code> and <code>{}</code>…\nAn iterator over the <code>Component</code>s of a <code>Path</code>, as <code>OsStr</code> slices.\nThe primary separator of path components for the current …\nThe primary separator of path components for the current …\nA normal component, e.g., <code>a</code> and <code>b</code> in <code>a/b</code>.\nAn error returned from <code>Path::normalize_lexically</code> if a <code>..</code> …\nA reference to the parent directory, i.e., <code>..</code>.\nA slice of a path (akin to <code>str</code>).\nAn owned, mutable path (akin to <code>String</code>).\nWindows path prefixes, e.g., <code>C:</code> or <code>\\\\server\\share</code>.\nA Windows path prefix, e.g., <code>C:</code> or <code>\\\\server\\share</code>.\nA structure wrapping a Windows path prefix as well as its …\nThe root directory component, appears after any prefix and …\nAn error returned from <code>Path::strip_prefix</code> if the prefix …\nPrefix using Windows’ <em><strong>U</strong>niform <strong>N</strong>aming <strong>C</strong>onvention</em>, e.g. …\nVerbatim prefix, e.g., <code>\\\\?\\cat_pics</code>.\nVerbatim disk prefix, e.g., <code>\\\\?\\C:</code>.\nVerbatim prefix using Windows’ <em><strong>U</strong>niform <strong>N</strong>aming <strong>C</strong>onvention</em>,\nMakes the path absolute without accessing the filesystem.\nAppend <code>self.extension</code> with <code>extension</code>.\nProduces an iterator over <code>Path</code> and its ancestors.\nYields a mutable reference to the underlying <code>OsStr</code> slice.\nYields a mutable reference to the underlying <code>OsString</code> …\nYields the underlying <code>OsStr</code> slice.\nReturns the raw <code>OsStr</code> slice for this prefix.\nExtracts the underlying <code>OsStr</code> slice.\nCoerces to a <code>Path</code> slice.\nExtracts a slice corresponding to the portion of the path …\nExtracts a slice corresponding to the portion of the path …\nReturns the canonical, absolute form of the path with all …\nInvokes <code>capacity</code> on the underlying instance of <code>OsString</code>.\nInvokes <code>clear</code> on the underlying instance of <code>OsString</code>.\nClones the contents of <code>source</code> into <code>self</code>.\nProduces an iterator over the <code>Component</code>s of the path.\nReturns an object that implements <code>Display</code> for safely …\nDetermines whether <code>child</code> is a suffix of <code>self</code>.\nReturns <code>true</code> if the path points at an existing entity.\nExtends <code>self</code> with <code>Path</code> elements from <code>iter</code>.\nExtracts the extension (without the leading dot) of …\nReturns the final component of the <code>Path</code>, if there is one.\nExtracts the prefix of <code>self.file_name</code>.\nExtracts the stem (non-extension) portion of <code>self.file_name</code>…\nConverts a Box&lt;Path&gt; into a <code>PathBuf</code>.\nConverts a borrowed <code>OsStr</code> to a <code>PathBuf</code>.\nReturns the argument unchanged.\nConverts an <code>OsString</code> into a <code>PathBuf</code>.\nConverts a <code>String</code> into a <code>PathBuf</code>\nConverts a clone-on-write pointer to an owned path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>PathBuf</code> from the <code>Path</code> elements of an …\nReturns <code>true</code> if the <code>Path</code> has a root.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>PathBuf</code> into a boxed <code>Path</code>.\nConsumes the <code>PathBuf</code>, yielding its internal <code>OsString</code> …\nConverts a <code>Box&lt;Path&gt;</code> into a <code>PathBuf</code> without copying or …\nReturns <code>true</code> if the <code>Path</code> is absolute, i.e., if it is …\nReturns <code>true</code> if the path exists on disk and is pointing at …\nReturns <code>true</code> if the path exists on disk and is pointing at …\nReturns <code>true</code> if the <code>Path</code> is relative, i.e., not absolute.\nDetermines whether the character is one of the permitted …\nReturns <code>true</code> if the path exists on disk and is pointing at …\nDetermines if the prefix is verbatim, i.e., begins with …\nProduces an iterator over the path’s components viewed …\nCreates an owned <code>PathBuf</code> with <code>path</code> adjoined to <code>self</code>.\nReturns the parsed prefix data.\nConsumes and leaks the <code>PathBuf</code>, returning a mutable …\nQueries the file system to get information about a file, …\nAllocates an empty <code>PathBuf</code>.\nDirectly wraps a string slice as a <code>Path</code> slice.\nNormalize a path, including <code>..</code> without traversing the …\nReturns the <code>Path</code> without its final component, if there is …\nTruncates <code>self</code> to <code>self.parent</code>.\nExtends <code>self</code> with <code>path</code>.\nReturns an iterator over the entries within a directory.\nReads a symbolic link, returning the file that the link …\nInvokes <code>reserve</code> on the underlying instance of <code>OsString</code>.\nInvokes <code>reserve_exact</code> on the underlying instance of …\nUpdates <code>self.extension</code> to <code>Some(extension)</code> or to <code>None</code> if …\nUpdates <code>self.file_name</code> to <code>file_name</code>.\nInvokes <code>shrink_to</code> on the underlying instance of <code>OsString</code>.\nInvokes <code>shrink_to_fit</code> on the underlying instance of …\nDetermines whether <code>base</code> is a prefix of <code>self</code>.\nReturns a path that, when joined onto <code>base</code>, yields <code>self</code>.\nQueries the metadata about a file without following …\nConverts a <code>Path</code> to an owned <code>PathBuf</code>.\nYields a <code>&amp;str</code> slice if the <code>Path</code> is valid unicode.\nConverts a <code>Path</code> to a <code>Cow&lt;str&gt;</code>.\nReturns <code>Ok(true)</code> if the path points at an existing entity.\nInvokes <code>try_reserve</code> on the underlying instance of <code>OsString</code>.\nInvokes <code>try_reserve_exact</code> on the underlying instance of …\nCreates an owned <code>PathBuf</code> like <code>self</code> but with the extension …\nCreates a new <code>PathBuf</code> with a given capacity used to create …\nCreates an owned <code>PathBuf</code> like <code>self</code> but with the given …\nCreates an owned <code>PathBuf</code> like <code>self</code> but with the given file …\nExtensions to <code>Option&lt;T&gt;</code>.\nDerive to implement the <code>TryClone</code> trait.\nDerive to implement the <code>TryClone</code> trait.\nMaps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the contents …\nCreates a <code>String</code> using interpolation of runtime …\nConverts a boxed slice of bytes to a boxed string slice …\nConverts a <code>Box&lt;str&gt;</code> into a <code>String</code> without copying or …\nReplaces all matches of a pattern with another string.\nA draining iterator for <code>String</code>.\nA possible error value when converting a <code>String</code> from a …\nA UTF-8–encoded, growable string.\nA trait for converting a value to a <code>String</code>.\nReturns a reference to the underlying allocator.\nReturns a byte slice of this <code>String</code>’s contents.\nReturns a slice of <code>u8</code>s bytes that were attempted to …\nConverts a <code>String</code> into a mutable string slice.\nReturns a mutable reference to the contents of this <code>String</code>.\nExtracts a string slice containing the entire <code>String</code>.\nReturns the remaining (sub)string of this iterator as a …\nReturns this <code>String</code>’s capacity, in bytes.\nTruncates this <code>String</code>, removing all contents.\nRemoves the specified range from the string in bulk, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>String</code> from a length, capacity, and pointer.\nConverts a vector of bytes to a <code>String</code>.\nConverts a vector of bytes to a <code>String</code> without checking …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a <code>String</code> into a byte vector.\nReturns the bytes that were attempted to convert to a …\nConvert a <code>String</code> into a std <code>String</code>.\nReturns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>\nConsumes and leaks the <code>String</code>, returning a mutable …\nReturns the length of this <code>String</code>, in bytes, not <code>char</code>s or …\nCreates a new empty <code>String</code>.\nCreates a new empty <code>String</code>.\nRemoves the last character from the string buffer and …\nRemoves a <code>char</code> from this <code>String</code> at a byte position and …\nRetains only the characters specified by the predicate.\nShortens this <code>String</code> to the specified length.\nInserts a character into this <code>String</code> at a byte position.\nInserts a string slice into this <code>String</code> at a byte position.\nConverts this <code>String</code> into a Box&lt;str&gt;.\nAppends the given <code>char</code> to the end of this <code>String</code>.\nAppends a given string slice onto the end of this <code>String</code>.\nRemoves the specified range in the string, and replaces it …\nTries to reserve capacity for at least <code>additional</code> bytes …\nTries to reserve the minimum capacity for at least …\nShrinks the capacity of this <code>String</code> with a lower bound.\nShrinks the capacity of this <code>String</code> to match its length.\nSplits the string into two at the given byte index.\nConverts the given value to a <code>String</code>.\nCreates a new empty <code>String</code> with at least the specified …\nCreates a new empty <code>String</code> with at least the specified …\nFetch a <code>Utf8Error</code> to get more details about the conversion …\nA thread-safe reference-counting pointer. ‘Arc’ stands …\n<code>Weak</code> is a version of <code>Arc</code> that holds a non-owning reference …\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nMakes a clone of the <code>Arc</code> pointer.\nMakes a clone of the <code>Weak</code> pointer that points to the same …\nComparison for two <code>Arc</code>s.\nCreates a new <code>Weak</code> pointer to this allocation.\nDrops the <code>Arc</code>.\nDrops the <code>Weak</code> pointer.\nEquality for two <code>Arc</code>s.\nReturns the argument unchanged.\nConverts an atomically reference-counted string slice into …\nReturns the argument unchanged.\nConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.\n‘Greater than or equal to’ comparison for two <code>Arc</code>s.\nReturns a mutable reference into the given <code>Arc</code>, if there …\nReturns a mutable reference into the given <code>Arc</code>, without …\nGreater-than comparison for two <code>Arc</code>s.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Arc</code>, returning the wrapped pointer and …\nDetermine whether this is the unique reference to the …\n‘Less than or equal to’ comparison for two <code>Arc</code>s.\nLess-than comparison for two <code>Arc</code>s.\nInequality for two <code>Arc</code>s.\nConstructs a new <code>Arc&lt;T&gt;</code>.\nPartial comparison for two <code>Arc</code>s.\nReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation …\nGets the number of strong (<code>Arc</code>) pointers pointing to this …\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nAllocates a reference-counted slice and fills it by …\nAllocates a reference-counted slice and moves <code>v</code>’s items …\nConstructs a new <code>Arc&lt;T&gt;</code>.\nConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.\nAttempts to upgrade the <code>Weak</code> pointer to an <code>Arc</code>, delaying …\nGets an approximation of the number of <code>Weak</code> pointers …\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nAn iterator that moves out of a vector.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns an unsafe mutable pointer to the vector’s …\nReturns the remaining items of this iterator as a mutable …\nExtracts a mutable slice of the entire vector.\nReturns a raw pointer to the vector’s buffer, or a …\nReturns the remaining items of this iterator as a slice.\nReturns the remaining items of this iterator as a slice.\nExtracts a slice containing the entire vector.\nReturns the total number of elements the vector can hold …\nClears the vector, removing all values.\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates an empty <code>vec::IntoIter</code>.\nRemoves the specified range from the vector in bulk, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a capacity, a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components.\nConvert a <code>Vec&lt;T&gt;</code> into a std <code>Vec&lt;T&gt;</code>.\nReturns <code>true</code> if the vector contains no elements.\nKeep unyielded elements in the source <code>Vec</code>.\nConsumes and leaks the <code>Vec</code>, returning a mutable reference …\nReturns the number of elements in the vector, also …\nConstructs a new, empty <code>Vec&lt;T&gt;</code>.\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.\nRemoves the last element from a vector and returns it, or …\nAppends an element if there is sufficient spare capacity, …\nConstruct a raw iterator over the current vector\nConstruct a raw mutable iterator over the current vector\nRemoves and returns the element at position <code>index</code> within …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nForces the length of the vector to <code>new_len</code>.\nReturns the remaining spare capacity of the vector as a …\nReturns vector content as a slice of <code>T</code>, along with the …\nRemoves an element from the vector and returns it.\nShortens the vector, keeping the first <code>len</code> elements and …\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nClones and appends all elements in a slice to the <code>Vec</code>.\nCopies elements from <code>src</code> range to the end of the vector.\nInserts an element at position <code>index</code> within the vector, …\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nAppends an element to the back of a collection.\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nShrinks the capacity of the vector with a lower bound.\nShrinks the capacity of the vector as much as possible.\nSplits the collection into two at the given index.\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nA draining iterator over the elements of a <code>VecDeque</code>.\nAn owning iterator over the elements of a <code>VecDeque</code>.\nAn iterator over the elements of a <code>VecDeque</code>.\nA mutable iterator over the elements of a <code>VecDeque</code>.\nAn iterator over the elements of a <code>VecDeque</code>.\nA double-ended queue implemented with a growable ring …\nReturns a reference to the underlying allocator.\nReturns a pair of slices which contain, in order, the …\nReturns a pair of slices which contain, in order, the …\nProvides a reference to the back element, or <code>None</code> if the …\nProvides a mutable reference to the back element, or <code>None</code> …\nBinary searches this <code>VecDeque</code> for a given element. If the …\nBinary searches this <code>VecDeque</code> with a comparator function.\nBinary searches this <code>VecDeque</code> with a key extraction …\nReturns the number of elements the deque can hold without …\nClears the deque, removing all values.\nReturns <code>true</code> if the deque contains an element equal to the …\nRemoves the specified range from the deque in bulk, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProvides a reference to the front element, or <code>None</code> if the …\nProvides a mutable reference to the front element, or <code>None</code> …\nProvides a reference to the element at the given index.\nProvides a mutable reference to the element at the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the deque is empty.\nReturns a front-to-back iterator.\nReturns a front-to-back iterator that returns mutable …\nReturns the number of elements in the deque.\nRearranges the internal storage of this deque so it is one …\nCreates an empty deque.\nCreates an empty deque.\nReturns the index of the partition point according to the …\nRemoves the last element from the deque and returns it, or …\nRemoves the first element and returns it, or <code>None</code> if the …\nCreates an iterator that covers the specified range in the …\nCreates an iterator that covers the specified mutable …\nReturns a raw front-to-back iterator.\nRemoves and returns the element at <code>index</code> from the deque. …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRotates the double-ended queue <code>mid</code> places to the left.\nRotates the double-ended queue <code>k</code> places to the right.\nSwaps elements at indices <code>i</code> and <code>j</code>.\nRemoves an element from anywhere in the deque and returns …\nRemoves an element from anywhere in the deque and returns …\nShortens the deque, keeping the first <code>len</code> elements and …\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nInserts an element at <code>index</code> within the deque, shifting all …\nAppends an element to the back of the deque.\nPrepends an element to the deque.\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nModifies the deque in-place so that <code>len()</code> is equal to …\nModifies the deque in-place so that <code>len()</code> is equal to …\nShrinks the capacity of the deque with a lower bound.\nShrinks the capacity of the deque as much as possible.\nSplits the deque into two at the given index.\nCreates an empty deque with space for at least <code>capacity</code> …\nCreates an empty deque with space for at least <code>capacity</code> …")