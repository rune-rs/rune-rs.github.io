searchState.loadedDescShard("musli_core", 0, "  \nAn allocator that can be used in combination with a …\nA buffer allocated from a context.\nA growable buffer.\nThe type of an allocated buffer.\nAn allocated buffer containing a valid string.\nProvides ergonomic access to the serialization context.\nContext associated with the decoder.\nContext associated with the encoder.\nTrait governing how types are decoded.\nDerive which automatically implements the <code>Decode</code> trait.\nDecoder returned by <code>Decoder::decode_buffer</code>.\nDecoder returned by <code>Decoder::decode_map</code>.\nDecoder returned by <code>Decoder::decode_map_entries</code>.\nDecoder used by <code>Decoder::decode_map_hint</code>.\nDecoder used by <code>Decoder::decode_pack</code>.\nDecoder returned by <code>Decoder::decode_sequence</code>.\nDecoder returned by <code>Decoder::decode_sequence_hint</code>.\nDecoder returned by <code>Decoder::decode_option</code>.\nDecoder used by <code>Decoder::decode_variant</code>.\nTrait governing the implementation of a decoder.\nTrait governing how types are encoded.\nDerive which automatically implements the <code>Encode</code> trait.\nThe type of a map encoder.\nStreaming encoder for map pairs.\nSpecialized encoder for a struct variant.\nA simple pack that packs a sequence of elements.\nThe type of a sequence encoder.\nSpecialized encoder for a tuple variant.\nEncoder returned when encoding an optional value which is …\nEncoder for a struct variant.\nTrait governing how the encoder works.\nError produced by context.\nError associated with decoding.\nError associated with encoding.\nA mark during processing.\nMode of the context.\nMode associated with decoding.\nMode associated with encoding.\nThe type returned by the encoder. For Encode …\n<code>Decoder</code> with a different context returned by …\nConstructed <code>Encoder</code> with a different context.\nAdvance the context by <code>n</code> bytes of input.\nAdvance the context by <code>n</code> bytes of input.\nAllocate a buffer.\nAllocate an empty, uninitialized buffer.\nMissing variant field required to decode.\nMissing variant field required to decode.\nGet the buffer as its initialized slice.\nTypes related to buffers.\nClear the state of the context, allowing it to be re-used.\nCollect and allocate a string from a <code>Display</code> …\nReport a custom error, which is not encapsulated by the …\nReturn the context associated with the decoder.\nAccess the context associated with the encoder.\nTraits for generically dealing with a decoding framework.\nDecode the given input.\nDecode the current decoder into the value <code>T</code>.\nDecode the given input using the associated mode.\nDecode the given input using the associated mode.\nDecode the given input as bytes using the associated mode.\nDecode the given input as bytes using the associated mode.\nDecode an unsized value by reference through the specified …\nDecode the given unsized value using the associated mode.\nDecode the given unsized value using the associated mode.\nDecode an unsized value as bytes by reference through the …\nDecode the given unsized value as bytes using the …\nDecode the given unsized value as bytes using the …\nThis is an attribute macro that must be used when …\nTraits for generically dealing with an encoding framework.\nEncode the given output.\nEncode the value <code>T</code> into the current encoder.\nThis is an attribute macro that must be used when …\nIndicate that we’ve entered an enum with the given <code>name</code>.\nIndicate that we’ve entered an enum with the given <code>name</code>.\nTrace a that a map key has been entered.\nTrace a that a map key has been entered.\nTrace that we’ve entered the given named field.\nTrace that we’ve entered the given named field.\nTrace a sequence field.\nTrace a sequence field.\nIndicate that we’ve entered a struct with the given <code>name</code>.\nIndicate that we’ve entered a struct with the given <code>name</code>.\nTrace that we’ve entered the given unnamed field.\nTrace that we’ve entered the given unnamed field.\nTrace that we’ve entered the given variant in an enum.\nTrace that we’ve entered the given variant in an enum.\nExpected another field to decode.\nExpected another field to decode.\nThe value for the given tag could not be collected.\nThe value for the given tag could not be collected.\nFormat the human-readable message that should occur if the …\nAn expectation error. Every other implementation defers to …\nCore encoding hints.\nEncountered an unsupported field tag.\nEncountered an unsupported field tag.\nEncountered an unsupported field tag.\nEncountered an unsupported field tag.\nEncountered an unsupported variant field.\nEncountered an unsupported variant field.\nReport that an invalid variant tag was encountered.\nReport that an invalid variant tag was encountered.\nTest if the buffer is empty.\nTrace that we’ve left the last enum that was entered.\nTrace that we’ve left the last enum that was entered.\nTrace that we’ve left the last field that was entered.\nTrace that we’ve left the last field that was entered.\nTrace that we’ve left the last map field that was …\nTrace that we’ve left the last map field that was …\nTrace that we’ve left the last sequence index that was …\nTrace that we’ve left the last sequence index that was …\nTrace that we’ve left the last struct that was entered.\nTrace that we’ve left the last struct that was entered.\nTrace that we’ve left the last variant that was entered.\nTrace that we’ve left the last variant that was entered.\nGet the length of the buffer in bytes.\nGenerate a map function which maps an error using the …\nGenerate a map function which maps an error using the …\nGenerate a map function which maps an error using the …\nGenerate a map function which maps an error using the …\nReturn a mark which acts as a checkpoint at the current …\nReturn a mark which acts as a checkpoint at the current …\nReport an error based on a mark.\nReport an error based on a mark.\nReport an error based on a mark.\nReport an error based on a mark.\nReport a message as an error.\nMissing adjacent tag when decoding.\nMissing adjacent tag when decoding.\nMissing variant field required to decode.\nMissing variant field required to decode.\nIndicate that a variant tag could not be determined.\nIndicate that a variant tag could not be determined.\nType that describe a mode of encoding.\nTrait fills for <code>#[no_std]</code> environments.\nWrite a single byte.\nTrying to decode an uninhabitable type.\nTrying to decode an uninhabitable type.\nThis is an attribute macro that must be used when …\nWrite the given number of bytes.\nWrite a buffer of the same type onto the current buffer.\nTry to write a format string into the buffer.\nA buffer allocated from a context.\nAn error raised when we fail to write.\nGet the buffer as its initialized slice.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTest if the buffer is empty.\nGet the length of the buffer in bytes.\nWrite a single byte.\nWrite the given number of bytes.\nWrite a buffer of the same type onto the current buffer.\nTry to write a format string into the buffer.\nTrait that allows a type to be repeatedly coerced into a …\nBytes decoder to use.\nContext associated with the decoder.\nContext associated with the decoder.\nContext associated with the decoder.\nContext associated with the decoder.\nContext associated with the decoder.\nContext associated with the decoder.\nContext associated with the decoder.\nTrait governing how types are decoded.\nDerive which automatically implements the <code>Decode</code> trait.\nDecoder returned by <code>Decoder::decode_buffer</code>.\nTrait governing how types are decoded as bytes.\nThe decoder to use for a key.\nThe decoder to use for a tuple field index.\nThe decoder to use for a tuple field value.\nThe decoder to use for a tuple field index.\nDecoder returned by <code>Decoder::decode_map</code>.\nDecoder returned by <code>Decoder::decode_map_entries</code>.\nDecoder used by <code>Decoder::decode_map_hint</code>.\nThe decoder for individual items.\nDecode to an owned value.\nDecoder used by <code>Decoder::decode_pack</code>.\nTrait governing how a type is decoded as a packed value.\nDecoder returned by <code>MapDecoder::decode_remaining_entries</code>.\nDecoder returned by <code>Decoder::decode_sequence</code>.\nDecoder returned by <code>Decoder::decode_sequence_hint</code>.\nDecoder returned by <code>Decoder::decode_option</code>.\nThe decoder to use for the variant tag.\nTrait governing how types are decoded specifically for …\nA trait implemented for types which can only be decoded by …\nA trait implemented for types which can be visited by …\nThe decoder to use for a tuple field value.\nThe decoder to use for the variant value.\nDecoder used by <code>Decoder::decode_variant</code>.\nTrait governing the implementation of a decoder.\nThe decoder we reborrow as.\nTrait governing how to decode a sequence of map pairs.\nTrait governing how to decode a map entry.\nError associated with decoding.\nTrait governing how to decode a sequence of pairs.\nMode associated with decoding.\nThe value produced.\nThe value produced by the visitor.\nTrait governing how to decode a sequence.\nA length hint.\nIndicates if skipping was performed.\nIndicates that skipping was successfully performed.\nString decoder to use.\nA visitor for data where we might need to borrow without …\nIndicates that skipping was not supported.\nTrait governing how to decode a variant.\nVisitor capable of decoding any type into a value …\n<code>Decoder</code> with a different context returned by …\nConstruct a size hint of unknown size.\nBorrow self as a new decoder.\nReturn the context associated with the decoder.\nDecode the given input.\nDecode the current decoder into the value <code>T</code>.\nDecode dynamically through a <code>Visitor</code>.\nDecode dynamically through a <code>Visitor</code>.\nDecode dynamically through a <code>Visitor</code>.\nDecode a fixed-length array.\nDecode a fixed-length array.\nDecode a fixed-length array.\nDecode a boolean.\nDecode a boolean.\nDecode a boolean.\nBuffer the current decoder into a buffer that can be used …\nBuffer the current decoder into a buffer that can be used …\nBuffer the current decoder into a buffer that can be used …\nDecode the given input as bytes.\nDecode a sequence of bytes whos length is encoded in the …\nDecode a sequence of bytes whos length is encoded in the …\nDecode a sequence of bytes whos length is encoded in the …\nDecode a character.\nDecode a character.\nDecode a character.\nDecode a unit.\nDecode a unit.\nDecode a unit.\nDecode the next key. This returns <code>Ok(None)</code> where there are …\nTry to return the decoder for the first value in the pair.\nDecode the value in the map.\nDecode a 32-bit floating point value.\nDecode a 32-bit floating point value.\nDecode a 32-bit floating point value.\nDecode a 64-bit floating point value.\nDecode a 64-bit floating point value.\nDecode a 64-bit floating point value.\nDecode a 128-bit signed integer.\nDecode a 128-bit signed integer.\nDecode a 128-bit signed integer.\nDecode a 16-bit signed integer.\nDecode a 16-bit signed integer.\nDecode a 16-bit signed integer.\nDecode a 32-bit signed integer.\nDecode a 32-bit signed integer.\nDecode a 32-bit signed integer.\nDecode a 64-bit signed integer.\nDecode a 64-bit signed integer.\nDecode a 64-bit signed integer.\nDecode a 8-bit signed integer.\nDecode a 8-bit signed integer.\nDecode a 8-bit signed integer.\nDecode a <code>isize</code>.\nDecode a <code>isize</code>.\nDecode a <code>isize</code>.\nReturn the decoder for the first value in the pair.\nDecode a map who’s size is not known at compile time.\nDecode a map who’s size is not known at compile time.\nDecode a map who’s size is not known at compile time.\nSimplified decoding a map of unknown length.\nSimplified decoding a map of unknown length.\nSimplified decoding a map of unknown length.\nDecode a map using a simplified function.\nDecode a map using a simplified function.\nDecode a map using a simplified function.\nReturn decoder to decode the next element.\nDecode an unknown number using a visitor.\nDecode an unknown number using a visitor.\nDecode an unknown number using a visitor.\nDecode an optional value.\nDecode an optional value.\nDecode an optional value.\nConstruct an unpack that can decode more than one element …\nConstruct an unpack that can decode more than one element …\nConstruct an unpack that can decode more than one element …\nDecode the given input as bytes.\nReturn simplified decoder for remaining entries.\nDecode a sequence.\nDecode a sequence.\nDecode a sequence.\nDecode a sequence with a <code>hint</code> indicating its expected …\nDecode a sequence with a <code>hint</code> indicating its expected …\nDecode a sequence with a <code>hint</code> indicating its expected …\nDecode a string slice from the current decoder.\nDecode a string slice from the current decoder.\nDecode a string slice from the current decoder.\nReturn the decoder for the first value in the pair.\nDecode a 128-bit unsigned integer.\nDecode a 128-bit unsigned integer.\nDecode a 128-bit unsigned integer.\nDecode a 16-bit unsigned integer.\nDecode a 16-bit unsigned integer.\nDecode a 16-bit unsigned integer.\nDecode a 32-bit unsigned integer.\nDecode a 32-bit unsigned integer.\nDecode a 32-bit unsigned integer.\nDecode a 64-bit unsigned integer.\nDecode a 64-bit unsigned integer.\nDecode a 64-bit unsigned integer.\nDecode a 8-bit unsigned integer (a.k.a. a byte).\nDecode a 8-bit unsigned integer (a.k.a. a byte).\nDecode a 8-bit unsigned integer (a.k.a. a byte).\nDecode the given input using a closure as visitor.\nDecode an unsized value by reference through the specified …\nDecode the given input using a closure as visitor.\nDecode an unsized value as bytes by reference through the …\nDecode a <code>usize</code>.\nDecode a <code>usize</code>.\nDecode a <code>usize</code>.\nDecode the second value in the pair..\nDecode the second value in the pair..\nDecode a variant using a closure.\nDecode a variant using a closure.\nDecode a variant using a closure.\nEnd entries decoding.\nDecode the next map entry as a tuple.\nDecode the next map entry as a tuple.\nConstruct an exactly sized hint.\nFormat the human-readable message that should occur if the …\nFormat an error indicating what was expected by this …\nFormat the human-readable message that should occur if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCoerce into an <code>Option</code>.\nIndicates if a skip was performed.\nIndicates if a skip was not supported.\nDecode the next element of the given type, erroring in …\nDecode the next element of the given type, erroring in …\nGet a size hint or a default value.\nGet a size hint for the size of the map being decoded.\nGet a size hint for the size of the map being decoded.\nGet a size hint for the size of the map being decoded.\nGet a size hint for the size of the map being decoded.\nGet a size hint of known remaining elements.\nGet a size hint of known remaining elements.\nGet a size hint of known remaining elements.\nGet a size hint of known remaining elements.\nSkip over the current next value.\nSkip over the current next value.\nSkip over the current next value.\nDecode the given input.\nTry to decode the next element.\nDecode the next element of the given type.\nDecode the next element of the given type.\nThis is a variant of <code>Decoder::skip</code>, but instead of …\nThis is a variant of <code>Decoder::skip</code>, but instead of …\nThis is a variant of <code>Decoder::skip</code>, but instead of …\nIndicates that the visited type is a <code>bool</code>.\nIndicates that the visited type is a <code>bool</code>.\nVisit a string that is borrowed directly from the source …\nVisit a string that is borrowed directly from the source …\nIndicates that the visited type is <code>bytes</code>.\nIndicates that the visited type is <code>bytes</code>.\nIndicates that the visited type is a <code>char</code>.\nIndicates that the visited type is a <code>char</code>.\nIndicates that the visited type is empty.\nIndicates that the visited type is empty.\nIndicates that the visited type is a <code>f32</code>.\nIndicates that the visited type is a <code>f32</code>.\nIndicates that the visited type is a <code>f64</code>.\nIndicates that the visited type is a <code>f64</code>.\nIndicates that the visited type is a <code>i128</code>.\nIndicates that the visited type is a <code>i128</code>.\nIndicates that the visited type is a <code>i16</code>.\nIndicates that the visited type is a <code>i16</code>.\nIndicates that the visited type is a <code>i32</code>.\nIndicates that the visited type is a <code>i32</code>.\nIndicates that the visited type is a <code>i64</code>.\nIndicates that the visited type is a <code>i64</code>.\nIndicates that the visited type is a <code>i8</code>.\nIndicates that the visited type is a <code>i8</code>.\nIndicates that the visited type is a <code>isize</code>.\nIndicates that the visited type is a <code>isize</code>.\nIndicates that the visited type is a map.\nIndicates that the visited type is a map.\nIndicates that the visited type is an optional type.\nIndicates that the visited type is an optional type.\nVisit an owned value.\nVisit an owned value.\nVisit a value reference that is provided from the decoder …\nVisit a value reference that is provided from the decoder …\nIndicates that the visited type is a sequence.\nIndicates that the visited type is a sequence.\nIndicates that the visited type is <code>string</code>.\nIndicates that the visited type is <code>string</code>.\nIndicates that the visited type is a <code>u128</code>.\nIndicates that the visited type is a <code>u128</code>.\nIndicates that the visited type is a <code>u16</code>.\nIndicates that the visited type is a <code>u16</code>.\nIndicates that the visited type is a <code>u32</code>.\nIndicates that the visited type is a <code>u32</code>.\nIndicates that the visited type is a <code>u64</code>.\nIndicates that the visited type is a <code>u64</code>.\nIndicates that the visited type is a <code>u8</code>.\nIndicates that the visited type is a <code>u8</code>.\nIndicates that the encoding does not support dynamic types.\nIndicates that the encoding does not support dynamic types.\nIndicates that the visited type is a <code>usize</code>.\nIndicates that the visited type is a <code>usize</code>.\nIndicates that the visited type is a variant.\nIndicates that the visited type is a variant.\nConstruct an decoder with a different context.\nConstruct an decoder with a different context.\nConstruct an decoder with a different context.\nContext associated with the encoder.\nContext associated with the encoder.\nContext associated with the encoder.\nContext associated with the encoder.\nContext associated with the encoder.\nContext associated with the encoder.\nTrait governing how types are encoded.\nDerive which automatically implements the <code>Encode</code> trait.\nTrait governing how a type is encoded as bytes.\nThe encoder returned when advancing the map encoder to …\nEncode the next pair.\nThe encoder returned when advancing the map encoder to …\nThe encoder returned when advancing the map encoder to …\nThe encoder returned when advancing the map encoder to …\nThe type of a map encoder.\nStreaming encoder for map pairs.\nSpecialized encoder for a struct variant.\nThe encoder returned when advancing the sequence encoder.\nA simple pack that packs a sequence of elements.\nTrait governing how a type is encoded as a packed value.\nThe type of a sequence encoder.\nSpecialized encoder for a tuple variant.\nEncoder returned when encoding an optional value which is …\nThe encoder returned when advancing the map encoder to …\nTrait governing how types are encoded specifically for …\nThe encoder returned when advancing the map encoder to …\nEncoder for a struct variant.\nTrait governing how the encoder works.\nTrait governing how to encode a map entry.\nTrait governing how to encode a map entry.\nError associated with encoding.\nEncoder for a map.\nMode associated with encoding.\nThe type returned by the encoder. For Encode …\nResult type of the encoder.\nResult type of the encoder.\nResult type of the encoder.\nResult type of the encoder.\nResult type of the encoder.\nTrait governing how to encode a sequence.\nTrait governing how to encode a variant.\nConstructed <code>Encoder</code> with a different context.\nEncode a value that implements <code>Display</code> as a string.\nEncode a value that implements <code>Display</code> as a string.\nEncode a value that implements <code>Display</code> as a string.\nAccess the context associated with the encoder.\nEncode the given output.\nEncode the value <code>T</code> into the current encoder.\nEncode fixed-length array.\nEncode fixed-length array.\nEncode fixed-length array.\nEncode a boolean value.\nEncode a boolean value.\nEncode a boolean value.\nEncode the given output as bytes.\nEncode a sequence of bytes.\nEncode a sequence of bytes.\nEncode a sequence of bytes.\nEncode the given slices of bytes in sequence, with one …\nEncode the given slices of bytes in sequence, with one …\nEncode the given slices of bytes in sequence, with one …\nEncode a character.\nEncode a character.\nEncode a character.\nReturn encoder for the second element in the variant.\nEncode a unit or something that is completely empty.\nEncode a unit or something that is completely empty.\nEncode a unit or something that is completely empty.\nEncode the next pair.\nSimplified encoder for a map entry, which ensures that …\nSimplified encoder for a map entry, which ensures that …\nReturn the encoder for the key in the entry.\nReturn encoder for value in the entry.\nEncode a 32-bit floating point value.\nEncode a 32-bit floating point value.\nEncode a 32-bit floating point value.\nEncode a 64-bit floating point value.\nEncode a 64-bit floating point value.\nEncode a 64-bit floating point value.\nEncode a 128-bit signed integer.\nEncode a 128-bit signed integer.\nEncode a 128-bit signed integer.\nEncode a 16-bit signed integer.\nEncode a 16-bit signed integer.\nEncode a 16-bit signed integer.\nEncode a 32-bit signed integer.\nEncode a 32-bit signed integer.\nEncode a 32-bit signed integer.\nEncode a 64-bit signed integer.\nEncode a 64-bit signed integer.\nEncode a 64-bit signed integer.\nEncode a 8-bit signed integer.\nEncode a 8-bit signed integer.\nEncode a 8-bit signed integer.\nEncode a <code>isize</code>.\nEncode a <code>isize</code>.\nEncode a <code>isize</code>.\nReturn the encoder for the key in the entry.\nEncode a map with a known length <code>len</code>.\nEncode a map with a known length <code>len</code>.\nEncode a map with a known length <code>len</code>.\nEncode a map through pairs with a known length <code>len</code>.\nEncode a map through pairs with a known length <code>len</code>.\nEncode a map through pairs with a known length <code>len</code>.\nEncode a map using a closure.\nEncode a map using a closure.\nEncode a map using a closure.\nSimplified encoding for a struct variant.\nSimplified encoding for a struct variant.\nSimplified encoding for a struct variant.\nReturn encoder for the next element.\nEncode an optional value that is absent.\nEncode an optional value that is absent.\nEncode an optional value that is absent.\nConstruct a pack that can encode more than one element at …\nConstruct a pack that can encode more than one element at …\nConstruct a pack that can encode more than one element at …\nEncodes a pack using a closure.\nEncodes a pack using a closure.\nEncodes a pack using a closure.\nEncode the given output as bytes.\nEncode a sequence with a known length <code>len</code>.\nEncode a sequence with a known length <code>len</code>.\nEncode a sequence with a known length <code>len</code>.\nEncode a sequence using a closure.\nEncode a sequence using a closure.\nEncode a sequence using a closure.\nSimplified encoding for a tuple variant.\nSimplified encoding for a tuple variant.\nSimplified encoding for a tuple variant.\nEncode an optional value that is present.\nEncode an optional value that is present.\nEncode an optional value that is present.\nEncode a string.\nEncode a string.\nEncode a string.\nReturn the encoder for the first element in the variant.\nEncode a 128-bit unsigned integer.\nEncode a 128-bit unsigned integer.\nEncode a 128-bit unsigned integer.\nEncode a 16-bit unsigned integer.\nEncode a 16-bit unsigned integer.\nEncode a 16-bit unsigned integer.\nEncode a 32-bit unsigned integer.\nEncode a 32-bit unsigned integer.\nEncode a 32-bit unsigned integer.\nEncode a 64-bit unsigned integer.\nEncode a 64-bit unsigned integer.\nEncode a 64-bit unsigned integer.\nEncode a 8-bit unsigned integer.\nEncode a 8-bit unsigned integer.\nEncode a 8-bit unsigned integer.\nSimplified encoding for a unit variant.\nSimplified encoding for a unit variant.\nSimplified encoding for a unit variant.\nEncode a <code>usize</code>.\nEncode a <code>usize</code>.\nEncode a <code>usize</code>.\nReturn encoder for value in the entry.\nEncode a variant.\nEncode a variant.\nEncode a variant.\nEncode a variant using a closure.\nEncode a variant using a closure.\nEncode a variant using a closure.\nAn expectation error. Every other implementation defers to …\nComplete encoding map entries.\nStop encoding this pair.\nFinish encoding pairs.\nFinish encoding the sequence.\nEnd the variant encoder.\nInsert the pair immediately.\nInsert the pair immediately.\nInsert the pair immediately.\nInsert the pair immediately.\nInsert a pair immediately.\nInsert a pair immediately.\nInsert the variant immediately.\nInsert the variant immediately.\nPush an element into the sequence.\nPush an element into the sequence.\nEncode the given output.\nConstruct an encoder with a different context.\nConstruct an encoder with a different context.\nConstruct an encoder with a different context.\nA hint passed in when encoding a map.\nA hint passed in when encoding a sequence.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe size for the map being encoded.\nThe size for the sequence being encoded.\nReturn the size hint that corresponds to this overall hint.\nReturn the size hint that corresponds to this overall hint.\nCreate a new struct hint with the specified size.\nCreate a new sequence hint with the specified size.\nThe binary encoding mode.\nThe text encoding mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>Error</code> is a trait representing the basic expectations for …\nThe resulting type after obtaining ownership.\nA generalization of <code>Clone</code> to borrowed data.\nUses borrowed data to replace owned data, usually by …\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns some mutable reference to the inner value if it is …\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns some reference to the inner value if it is of type …\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns <code>true</code> if the inner type is the same as <code>T</code>.\nProvides type-based access to context intended for error …\nReturns the lower-level source of this error, if any.\nReturns an iterator starting with the current error and …\nCreates owned data from borrowed data, usually by cloning.")