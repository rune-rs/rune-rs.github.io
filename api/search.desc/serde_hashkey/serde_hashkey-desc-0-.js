searchState.loadedDescShard("serde_hashkey", 0, "   \nA boolean value.\nA byte array.\nA custom error.\nContains the error value\nErrors that can occur during serialization and …\nVariant representing a <code>f32</code> float.\nThe type encapsulating a 32-bit float, or <code>f32</code>.\nVariant representing a <code>f64</code> float.\nThe type encapsulating a 64-bit float, or <code>f64</code>.\nAn opaque float derived from a given policy.\nA 32-bit floating-point number.\nA policy for handling floating point types in a Key.\nTrait implemented by floating point types which can be …\nVariant representing a <code>i128</code> integer.\nVariant representing a <code>i16</code> integer.\nVariant representing a <code>i32</code> integer.\nVariant representing a <code>i64</code> integer.\nVariant representing a <code>i8</code> integer.\nAn opaque integer.\nAn integer.\nArray has invalid length.\nThe central key type, which is an in-memory representation …\nA map.\nValue is missing during deserialization.\nAn uninhabitable type for float policies that cannot …\nContains the success value\nA float serialization policy which rejects any attempt to …\nHelper alias for a Result which already represents our …\nA vector.\nA string.\nVariant representing a <code>u128</code> integer.\nVariant representing a <code>u16</code> integer.\nVariant representing a <code>u32</code> integer.\nVariant representing a <code>u64</code> integer.\nVariant representing a <code>u8</code> integer.\nUnexpected type encountered.\nUnsupported deserialization variant.\nA unit value.\nType is not supported for serialization.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize the given type from a Key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNormalize the key, making sure that all contained maps are …\nSerialize impl for a floating point value.\nSerialize the given value to a Key.\nVisit the current value.")