searchState.loadedDescShard("rune_core", 0, "Core components for the Rune Language, an embeddable …\nThe function to implement for the addition operation.\nThe function to implement for the addition assign …\nThe function to implement for the bitwise and operation.\nThe function to implement for the bitwise and assign …\nThe function to implement for the bitwise or operation.\nThe function to implement for the bitwise xor assign …\nThe function to implement for the bitwise xor operation.\nThe function to implement for the bitwise xor assign …\nProtocol used when cloning a value.\nPerform an total comparison between two values.\nThe component of an item.\nA reference to a component of an item.\nA crate component.\nA crate string component.\nThe function to implement for the division operation.\nThe function to implement for the division assign …\nThe empty hash.\nCheck two types for total equality.\nFull type information.\nThe function to access a field.\nProtocol used when calculating a hash.\nThe primitive hash that among other things is used to …\nThe function to access an index.\nThe function to set an index.\nFunction used to convert an argument into a future.\nFunction used to convert an argument into an iterator.\nCoerce a value into a type name. This is stored as a …\nFunction used to test if a value is a specific variant.\nA nested anonymous part with an identifier.\nA nested anonymous part with an identifier.\nTrait for encoding the current type into a Component.\nTrait for types which can be converted into a Hash.\nThe reference to an ItemBuf.\nThe name of an item in the Rune Language.\nThe function to implement for the multiply operation.\nThe function to implement for the multiply assign …\nThe function to call to continue iteration.\nProtocol used when cloning a value.\nPerform an partial comparison between two values.\nCheck two types for partial equality.\nHelper to register a parameterized function.\nA built in instance function.\nThe function to implement for the remainder operation.\nThe function to implement for the remainder assign …\nA raw static string.\nThe function to set a field.\nThe function to implement for the bitwise shift left …\nThe function to implement for the bitwise shift left …\nThe function to implement for the bitwise shift right …\nThe function to implement for the bitwise shift right …\nProtocol used when cloning a value.\nProtocol function used by custom debug impls.\nProtocol function used by template strings.\nThe function to implement for the subtraction operation.\nThe function to implement for the subtraction assign …\nA regular string component.\nA regular string component.\nFunction used for the question mark operation.\nHelper trait used to convert a type into a type hash.\nGet the ancestry of one module to another.\nReturn the underlying byte representation of the Item.\nConvert into a component directly.\nConvert into component reference.\nGet the crate corresponding to the item.\nIf the item only contains one element, return that element.\nConstruct a new vector from the current item.\nConstruct a hash to an instance function, where the …\nClear the current item.\nExtend the current item with an iterator.\nReturn an owned and extended variant of this item.\nConstruct a hash corresponding to a field function.\nAccess the first component of this item.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLook up protocol for the given hash.\nConstruct from a static string.\nThe hash of the builtin function.\nGet the identifier of the component.\nGet the identifier of the component if it is an identifier …\nGet the hash corresponding to a string identifier like …\nConstruct a hash from an index.\nConstruct an index function.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into component.\nConvert into component.\nConvert current type into a hash.\nCheck if the item is empty.\nTest if current is immediate super of <code>other</code>.\nAn iterator over the Components that constitute this item.\nReturn an owned and joined variant of this item.\nAccess the last component in the path.\nThe name of the builtin function.\nConstruct a new empty item.\nConstruct an Item corresponding to the root item.\nConstruct a new parameters wrapper.\nHash the given iterator of object keys.\nHash type parameters.\nGet the parent item for the current item.\nPush the given component to the current item.\nPush the given component to the current item.\nTest if current item starts with another.\nGet the hash corresponding to a static byte array.\nCoerce this ComponentRef into an owned Component.\nGet the hash of a type.\nConstruct item for a crate.\nCreate a crated item with the given name.\nMix the current hash with function parameters.\nMix in generics hash.\nConstruct a new item with the given path.\nMix the current hash with type parameters.")