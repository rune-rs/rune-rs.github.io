searchState.loadedDescShard("syntree", 0, "  \nError raised by Builder::build if the tree isn’t …\nA builder for a Tree.\nThe identifier of a node as returned by functions such as …\nError raised by Builder::close_at if we’re not trying to …\nError raised by Builder::close if there currently is no …\nThe empty Index implementation.\nErrors raised while building a tree.\nThe node of the given id is missing.\nA node in the tree.\nNumerical overflow.\nA span in the source code, akin to <code>start..end</code> so the end …\nA syntax tree.\nGet the ancestors of this node.\nBuild a Tree from the current state of the builder.\nGet the capacity of the tree.\nGet a checkpoint corresponding to the current position in …\nGet an iterator over the children of this node.\nGet all root nodes in the tree.\nEnd a node being built.\nInsert a node that wraps from the given checkpointed …\nTest if span contains the given index.\nGet a reference to the current cursor position of the …\nTypes associated with performing immutable editing of a …\nThe end of the span.\nFind a preceeding node which matches the given predicate.\nGet the first child node.\nGet the first child node in the tree.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if the current node has children or not.\nGet the identifier of the current node.\nTypes that can be used to refer to indexes in a Span.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the current node is empty. In that it doesn’t …\nCheck if the current tree is empty. In that it doesn’t …\nTest if the span is empty.\nJoin the current span with another.\nGet the last child node.\nGet the last child node in the tree.\nThe total number of elements in the tree.\nThe length of the span.\nConstruct a new tree with a default <code>Span</code> based on <code>u32</code>.\nConstruct a new span.\nConstruct a new tree with a custom span.\nGet the next sibling.\nTypes associated to nodes and in particular node walking.\nQuery for the node that matches the given range.\nQuery the tree for the first node which encapsulates the …\nStart a node with the given <code>data</code>.\nGet immediate parent to this node.\nConstruct a span corresponding to the given point.\nPointer-related types and traits.\nGet the previous sibling.\nHelper utilities for pretty-printing trees.\nAccess the Span of the node as a Range.\nAccess the Span of the node as a Range.\nCoerce into a <code>ops::Range</code> which is useful for slicing.\nReplace the value of the node with a new one, returning …\nGet an iterator over the siblings of this node, including …\nGet the span of the current node. The span of a node is …\nGet the span of the current node. The span of a node is …\nThe start of the span.\nDeclare a token with the specified <code>value</code> and a …\nDeclare a token with the specified <code>value</code> and an empty …\nHelper macro for building a tree in place.\nHelper macro for building a tree in place with a custom …\nAccess the data associated with the node.\nWalk the subtree forward starting with the first child of …\nWalk the tree forwards in a depth-first fashion visiting …\nWalk the node forwards in a depth-first fashion emitting …\nWalk the tree forwards in a depth-first fashion emitting …\nWalk from the current node forwards and upwards through …\nA recorded set of tree modifications.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct a modified tree where the recorded modifications …\nConstruct a new empty <code>ChangeSet</code>.\nRegister a node removal in the changeset. Only one kind of …\nA type that can be used when referring to an index in a …\nAn iterator that iterates over the <code>Node::parent</code> elements …\nAn iterator that iterates over the <code>Node::next</code> elements of …\nWalk down the first child of a sub tree.\nAn event indicating how a tree is being walked with …\nWalk the next sibling node. This is also the initial event …\nAn iterator that iterates over the <code>Node::next</code> elements of …\nWrapped around an iterator that excludes nodes without …\nWalk up a single step from a sub tree.\nAn iterator that walks over the entire tree, visiting …\nA low-level iterator which walks the tree while emitting …\nAn iterator that walks over the entire tree, visiting …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the next node from the iterator. This advances past …\nGet the next node from the iterator. This advances past …\nGet the next node from the iterator. This advances past …\nGet the next node with a corresponding depth.\nConstruct a <code>SkipTokens</code> iterator from the remainder of this …\nConstruct a <code>SkipTokens</code> iterator from the remainder of this …\nConstruct a <code>SkipTokens</code> iterator from the remainder of this …\nConstruct a <code>SkipTokens</code> iterator from the remainder of this …\nConvert this iterator into one which includes depths.\nA pointer type that is derived from the pointer Width.\nThe pointer type associated with a specific width.\n<code>Pointer</code> implementation for <code>u128</code>.\n<code>Pointer</code> implementation for <code>u16</code>.\n<code>Pointer</code> implementation for <code>u32</code>.\n<code>Pointer</code> implementation for <code>u64</code>.\n<code>Pointer</code> implementation for <code>u8</code>.\n<code>Pointer</code> implementation for <code>usize</code>.\nA pointer width that can be used to reference other nodes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the index of a pointer.\nGet the index of a pointer.\nGet the index of a pointer.\nGet the index of a pointer.\nGet the index of a pointer.\nGet the index of a pointer.\nGet the index of a pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafe constructor for the pointer.\nSafe constructor for the pointer.\nSafe constructor for the pointer.\nSafe constructor for the pointer.\nSafe constructor for the pointer.\nSafe constructor for the pointer.\nSafe constructor for the pointer.\nPretty-print a tree without a source.\nPretty-print a tree with the source spans printed.")