searchState.loadedDescShard("musli_storage", 0, "  \nA writer which buffers the writes before it outputs it …\nModule that defines Encoding whith allows for …\nGeneric error types that can be used for most Reader / …\nA container which can store up to a fixed number of …\nTraits and utilities for dealing with integers.\nTrait for governing how a particular source of bytes is …\nHelpers for integrating musli with I/O types like std::io …\nTrait for governing how a particular sink of bytes is …\nA writer which buffers <code>N</code> bytes inline.\nFinish writing.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct a new buffered writer.\nThe default configuration.\nSetting up encoding with parameters.\nDecode the given type <code>T</code> from the given Reader using the …\nDecode the given type <code>T</code> from the given Reader using the …\nEncode the given value to the given <code>Writer</code> using the …\nEncode the given value to the given <code>Writer</code> using the …\nReturns the argument unchanged.\nDecode the given type <code>T</code> from the given slice using the …\nDecode the given type <code>T</code> from the given slice using the …\nCalls <code>U::from(self)</code>.\nConstruct a new Encoding instance which uses Variable …\nEncode the given value to a Buffer using the DEFAULT …\nEncode the given value to a Buffer using the current …\nEncode the given value to a fixed-size bytes using the …\nEncode the given value to a fixed-size bytes using the …\nEncode the given value to a Vec using the DEFAULT …\nEncode the given value to a Vec using the current …\nEncode the given value to the given Write using the DEFAULT\nEncode the given value to the given Write using the current\nConfigure the encoding to use fixed integer encoding.\nConfigure the encoding to use fixed integer big-endian …\nConfigure the encoding to use fixed integer little-endian …\nConfigure the encoding to use fixed integer network-endian …\nConfigure the encoding to use fixed length 32-bit encoding …\nConfigure the encoding to use fixed length 64-bit encoding …\nChange the mode of the encoding.\nConfigure the encoding to use variable integer encoding.\nConfigure the encoding to use variable length encoding.\nAn error raised while working with a buffer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA fixed-size bytes storage which keeps track of how much …\nCoerce into the mutable slice of initialized memory which …\nCoerce into the slice of initialized memory which is …\nClear the FixedBytes container.\nTry and extend from the given slice.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCoerce into the underlying bytes if all of them have been …\nTest if the current container is empty.\nGet the length of the collection.\nConstruct a new fixed bytes array storage.\nTry and push a single byte.\nGet the remaining capacity of the FixedBytes.\nThe number of bits in this signed number.\nNumber of bytes.\nDefines big-endian serialization.\nTrait governing byte orders.\nHelper trait for performing I/O over Unsigned types.\nA fixed-length integer encoding which encodes something to …\nA fixed-length encoding which encodes numbers to the width …\nTrait which governs how integers are encoded in a binary …\nDefines little-endian serialization.\nDefines system native-endian byte order.\nDefines the network byte order, which is the same as …\nThe number <code>1</code> as represented by the current unsigned number.\nTrait that encodes common behaviors of signed numbers.\nThe signed representation of this unsigned number.\nTrait that encodes common behaviors of unsigned numbers.\nThe unsigned representation of this number.\nEncoding formats which ensure that variably sized types …\nType that indicates that the given numerical type should …\nCoerce into the lowest 8-bits as a byte.\nPerform a checked addition.\nPerform a shift-left operation.\nPerform a shift-right operation.\nA variable-length 7-bit encoder where each bit indicates …\nGoverns how signed integers are decoded from a Reader.\nGoverns how unsigned integers are decoded from a Reader.\nGoverns how usize lengths are decoded from a Reader.\nGoverns how signed integers are encoded into a Writer.\nGoverns how unsigned integers are encoded into a Writer.\nGoverns how usize lengths are encoded into a Writer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct from the first byte.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest if this value is smaller than the specified byte.\nTest if value is zero.\nRead the current value from the reader in little-endian …\nRead a 128-bit signed integer.\nRead a 16-bit signed integer.\nRead a 32-bit signed integer.\nRead a 64-bit signed integer.\nRead a 128-bit unsigned integer.\nRead a 16-bit unsigned integer.\nRead a 32-bit unsigned integer.\nRead a 64-bit unsigned integer.\nRead a single byte.\nCoerce this number bitwise into its signed representation.\nCoerce this number bitwise into its unsigned …\nWrite the current byte array to the given writer in …\nWrite a 128-bit signed integer.\nWrite a 16-bit signed integer.\nWrite a 32-bit signed integer.\nWrite a 64-bit signed integer.\nWrite a 128-bit unsigned integer.\nWrite a 16-bit unsigned integer.\nWrite a 32-bit unsigned integer.\nWrite a 64-bit unsigned integer.\nWrite a single byte.\nGeneric zigzag encoding for integers.\nDecode the given length using variable int encoding.\nEncode the given length using variable length encoding.\nDecode an integer into zig-zag encoding.\nEncode an integer into zig-zag encoding.\nError type raised by the current reader.\nLimit the number of bytes that can be read out of a reader …\nReborrowed type.\nReborrowed type.\nA reader where the current position is exactly known.\nTrait governing how a source of bytes is read.\nAn efficient Reader wrapper around a slice.\nKeep a record of the current position.\nReborrow the current reader.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeep an accurate record of the position within the reader.\nConstruct a new instance around the specified slice.\nPeek the next value.\nThe exact position of a reader.\nReborrow the current reader.\nRead a slice into the given buffer.\nRead an array out of the current reader.\nRead a single byte.\nRead a slice out of the current reader.\nSkip over the given number of bytes.\nKeep an accurate record of the position within the reader.\nWrapper constructed with wrap.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrap a type so that it implements Reader or Writer as …\nA buffer that roughly corresponds to a vector. For no-std …\nThe error type raised by the writer.\nMaximum size used by a fixed length Buffer.\nReborrowed type.\nThe trait governing how a writer works.\nGet the buffer as a slice.\nReborrow the current type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCoerce into the backing vector in a std environment.\nConstruct a new empty buffer.\nConstructs a new, empty <code>Buffer</code> with the specified capacity.\nWrite an array to the current writer.\nWrite a single byte.\nWrite bytes to the current writer.")