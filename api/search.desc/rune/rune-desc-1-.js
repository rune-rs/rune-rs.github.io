searchState.loadedDescShard("rune", 1, "A pre-defined protocol function.\nThe protocol for the remainder operation.\nThe protocol for the remainder assign operation.\nType for a range expression <code>start..end</code>.\nType for a from range expression <code>start..</code>.\nType for a full range expression <code>..</code>.\nType for an inclusive range expression <code>start..=end</code>.\nType for an inclusive range expression <code>..end</code>.\nType for an inclusive range expression <code>..=end</code>.\nA raw guard for a <code>Ref</code> or a <code>Mut</code> that has been converted …\nThe guard returned by <code>Value::into_any_mut_ptr</code>.\nA strong owned reference to the given type that can be …\nRuntime information on variant.\nStatic run context visible to the virtual machine.\nAn opaque simple runtime error.\nThe function to set a field.\nThe protocol for the bitwise shift left operation.\nThe protocol for the bitwise shift left assign operation.\nThe protocol for the bitwise shift right operation.\nThe protocol for the bitwise shift right assign operation.\nProtocol used when getting the size hint of an iterator.\nAccess diagnostical type information for the current type.\nThe protocol for the subtraction operation.\nThe protocol for the subtraction assign operation.\nA typed wrapper for a reference.\nA number.\nAn error raised when accessing a slice on the stack.\nThe stack of the virtual machine, where all values are …\nAn error raised when accessing an address on the stack.\nStruct representing a static string.\nAn error produced by a call to <code>Memory::store</code>.\nA stream produced by an async generator function.\nFunction produces a stream, also known as an async …\nAn object with a well-defined type.\nA callable sync function. This currently only supports a …\nFunction used for the question mark operation.\nThe type of a tuple slice.\nA tuple with a well-defined type.\nA value representing a type in the virtual machine.\nA type hash. Describes a type in the virtual machine.\nStatic type hash for a given type.\nDiagnostical type information for a given type.\nTrait used for Rust types for which we can determine the …\nThe unit value.\nUnsafe to mut coercion.\nUnsafe to ref coercion.\nTrait for converting types into values.\nAn unsigned number.\nAn entry on the stack.\nDefined guard for a reference value.\nDefined guard for a reference value.\nStruct representing a dynamic vector.\nA helper type to deserialize arrays with different …\nA stack which references variables indirectly from a slab.\nA trait for runtime diagnostics in the virtual machine.\nA virtual machine error which includes tracing information.\nThe execution environment for a virtual machine.\nThe outcome of completing an execution through a <code>VmResume</code> …\nA result produced by the virtual machine.\nAn execution that has been resumed.\nA wrapper that makes <code>VmExecution</code> <code>Send</code>.\nA value has been yielded by the execution.\nThe generator yielded.\nThe first possible address.\nConstruct type info from an statically known <code>Any</code> type.\nGet the slice at the given address with the given static …\nGet the slice at the given address with the given static …\nCoerce into <code>bool</code>.\nCoerce into <code>bool</code>.\nCoerce into <code>char</code>.\nCoerce into <code>char</code>.\nCoerce into <code>f64</code> float.\nCoerce into <code>f64</code> float.\nTry to coerce the current value as the specified integer <code>T</code>.\nCoerce into <code>Ordering</code>.\nCoerce into <code>Ordering</code>.\nCoerce into <code>i64</code> signed integer.\nCoerce into <code>i64</code> signed integer.\nAccess bytes as a slice.\nCoerce into <code>Type</code>.\nCoerce into <code>Type</code>.\nCoerce into <code>u64</code> unsigned integer.\nCoerce into <code>u64</code> unsigned integer.\nAsynchronously complete the current execution.\nAlias for <code>VmSendExecution::complete</code>.\nAlias for <code>VmSendExecution::complete_with_diagnostics</code>.\nPerform an asynchronous call over the function which also …\nPerform an asynchronous call over the function which also …\nAccess the value at the given frame offset.\nGet a value mutable at the given index from the stack …\nGet a value mutable at the given index from the stack …\nBad argument count.\nReturns some mutable reference to the boxed value if it is …\nBorrow an exclusive reference to the value.\nGet a reference to the interior value while checking for …\nBorrow a shared reference to the value while checking for …\nBudgeting module for Runestick.\nConstruct a constant value that is bytes.\nThis is a common index get implementation that is helpfull …\nPerform a call over the function represented by this …\nPerform a call over the function represented by this …\nCall the function handler through the raw type-erased API.\nGet the capacity of the bytes collection.\nReturns the number of elements in the dynamic vector, also …\nGet the bytes collection.\nClears the object, removing all key-value pairs. Keeps the …\nClears the vector, removing all values.\nTest the range for total ordering.\nTest the full range for total ordering.\nTest the range for total ordering.\nTest the range for total ordering.\nTest the range for total ordering.\nTest the range for total ordering.\nSynchronously complete the current execution.\nComplete the current execution with support for async …\nTry to synchronously complete the run, returning the …\nComplete the current execution with support for async …\nRead a constant value.\nReturns <code>true</code> if the map contains a value for the specified …\nThe number of arguments.\nThe number of arguments.\nAccess underlying data.\nAccess truct data.\nDebug information for units.\nConstruct type info for the empty type.\nThe end value of the range.\nThe end value of the range.\nThe end value of the range.\nThe to value of the range.\nTest the range for total equality.\nTest the full range for total equality.\nTest the range for total equality.\nTest the range for total equality.\nTest the range for total equality.\nTest the range for total equality.\nConstruct an expected error.\nExtend these bytes with another collection of bytes.\nExtend this vector with something that implements the …\nConstruct a hash.\nGet the first byte.\nConstruct a constant value for a struct.\nTypes for dealing with formatting specifications.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert something into a <code>ConstValue</code>.\nConvert from a constant value.\nLook up protocol for the given hash.\nConvert a slice into bytes.\nConvert something into the dynamic <code>Value</code>.\nTry to convert to the given type, from the given value.\nConvert a byte array into bytes.\nLookup the given native function handler in the context.\nMark that a function has been used.\nGet a value from the dynamic struct.\nGet the value at the given index in the tuple.\nGet a field through the accessor.\nReturns a reference to the value corresponding to the key.\nGet the value at the given index.\nReturns a mutable reference to the value corresponding to …\nGet the mutable value at the given index.\nGet the given value at the given index.\nGet the given value at the given index.\nGet the given value at the given index.\nEncode arguments onto a stack.\nEncode arguments into a vector.\nGet the hash of the string.\nThe hash of the builtin function.\nInserts a byte at position index within the vector, …\nInserts a key-value pair into the map.\nInserts an element at position index within the vector, …\nInserts a key-value pair into the dynamic object, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncode arguments as array.\nCoerce this owned tuple into a boxed tuple.\nConvert the outcome into a completed value.\nCoerce the current execution into a generator if …\nConvert the outcome into a <code>GeneratorState</code>.\nCoerce into inner type hash.\nConvert into inner std boxed slice.\nConvert into inner rune alloc vector.\nCreates a consuming iterator, that is, one that moves each …\nBuild an iterator over the range.\nIterate over the range.\nIterate over the range.\nDowncast into an owned value of type <code>Mut&lt;T&gt;</code>.\nConvert the current execution into one which owns its …\nDowncast into an owned value of type <code>Ref&lt;T&gt;</code>.\nConvert something into a return value.\nEncode arguments onto a stack.\nCoerce the current execution into a stream if appropriate.\nTry to convert into a SyncFunction. This might not be …\nCoerce into tuple.\nConvert the byte array into a vector of bytes.\nThe stored instruction pointer.\nTest if the state is complete.\nCheck if future is completed.\nTest if the collection is empty.\nReturns <code>true</code> if the object is empty.\nReturns <code>true</code> if the vector contains no elements.\nTest if the value is sharable.\nTest if a value is writable.\nTest if the state is yielded.\nIndicates that the call frame is isolated and should force …\nAccess the item of the RTTI.\nAn iterator visiting all key-value pairs in arbitrary …\nIterate over the range.\nIterate over the range.\nIterate over the range.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nGet the last byte.\nGet the length of the bytes collection.\nReturns the number of elements in the object.\nReturns the number of elements in the dynamic vector, also …\nMap the mutable reference.\nMap the reference.\nType information for the given type.\nIf this protocol defines an associated method, this is the …\nThe name of the builtin function.\nConstruct type info from an statically known <code>Named</code> type.\nConstruct an Any that wraps an owned object.\nConstruct a new typed shared value.\nConstruct a new tuple slice from a reference.\nConstruct a new byte array.\nConstruct a new wrapper for the underlying trait.\nConstruct a Function from a Rust closure.\nConstruct a new object.\nConstruct a new range.\nConstruct a new full range.\nConstruct a new range.\nConstruct a new range.\nConstruct a new range.\nConstruct a new range.\nConstruct a new static string.\nConstruct a new empty tuple.\nConstructs a new, empty dynamic <code>Vec</code>.\nConstruct a new vector tuple for serializing values.\nConstruct a new tuple slice from a mutable reference.\nGet the next value produced by this stream.\nGet the next value produced by this stream.\nKeep the value produced from the call frame.\nConstruct an error containing a panic.\nTest the range for partial ordering.\nTest the full range for partial ordering.\nTest the range for partial ordering.\nTest the range for partial ordering.\nTest the range for partial ordering.\nTest the range for partial ordering.\nTest the range for partial equality.\nTest the full range for partial equality.\nTest the range for partial equality.\nTest the range for partial equality.\nTest the range for partial equality.\nTest the range for partial equality.\nPop the last byte.\nRemoves the last element from a dynamic vector and returns …\nAppend a byte to the back.\nAppends an element to the back of a dynamic vector.\nAppends an element to the back of a dynamic vector, …\nRemoves the byte at the specified index.\nRemoves a key from the map, returning the value at the key …\nRemoves the element at the specified index from a dynamic …\nReserve additional space.\nResever additional space to the exact amount specified.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nResume the current execution.\nResume the generator with a value and get the next …\nResume the stream with a value and return the next …\nAccess runtime type information.\nAccess runtime type information.\nAccess struct rtti.\nConvert into iterator\nAn iterator visiting all keys and values in arbitrary …\nIterate over the vector.\nAn iterator visiting all keys in arbitrary order.\nAn iterator visiting all values in arbitrary order.\nSet by index\nSet by index\nShrink to fit the amount of bytes in the container.\nTypes for working with slices.\nGet the slice at the given address with the given length.\nGet the slice at the given address with the given length.\nAccess the given slice mutably.\nGet the mutable slice at the given address with the given …\nSort the vector with the given comparison function.\nThe start value of the range.\nThe start value of the range.\nThe start value of the range.\nWrite output using the provided <code>IntoOutput</code> implementation …\nWrite output using the provided <code>IntoOutput</code> implementation …\nConstruct a constant value that is a string.\nTake the interior value and return a handle to the taken …\nTake the owned value of type <code>T</code>.\nConvert something into a <code>ConstValue</code>.\nConvert something into the dynamic <code>Value</code>.\nThe top of the stack at the time of the call to ensure …\nTry to borrow a reference to the interior value while …\nTry to borrow a reference to the interior value while …\nConvert arguments into a vector.\nTry to map the mutable reference to a projection.\nTry to map the reference to a projection.\nConstruct a new tuple constant value.\nAccess the underlying type hash for the data.\nAccess the underlying type id for the data.\nType Hash of the underlying function.\nType Hash of the underlying function.\nAccess the type hash of the RTTI.\nGet human readable type information for the dynamic tuple.\nGet human readable type information for the dynamic tuple.\nGet human readable type information for the dynamic struct.\nAccess full type info for the underlying type.\nAccess full type info for the underlying type.\nGet type info associated with the current type.\nGet type info associated with the current type.\nGet type info for the typed tuple.\nGet type info for the typed tuple.\nAccess the type information for the RTTI.\nA single execution unit in the rune virtual machine.\nSafety\nSafety\nConvert into a value.\nAn iterator visiting all values in arbitrary order. The …\nGet a reference to the current virtual machine.\nGet a mutable reference the current virtual machine.\nAssociated a budget with the resumed execution.\nConstruct a byte array with the given preallocated …\nConstruct a new object with the given capacity.\nConstruct a new dynamic vector guaranteed to have at least …\nAssociate diagnostics with the execution.\nAssociate a value with the resumed execution.\nWrapper for something being budgeted.\nA locally acquired budget.\nAcquire the current budget.\nCall the budgeted function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReplace the current budget returning a guard that will …\nTake a ticker from the budget.\nWrap the given value with a budget.\nDebug information on function arguments.\nDebug information about a unit.\nDebug information for every instruction.\nA description of a function signature.\nAn empty, with not arguments.\nA collection of named arguments.\nA tuple, with the given number of arguments.\nThe number of arguments expected in the function.\nThe comment for the line.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the function corresponding to the given instruction …\nFunction signatures.\nReverse lookup of a function.\nHash to identifier.\nAccess an identifier for the given hash - if it exists.\nGet debug instruction at the given instruction pointer.\nDebug information on each instruction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLabel associated with the location.\nConstruct a new debug instruction.\nConstruct a new function signature.\nThe path of the function.\nThe file by id the instruction belongs to.\nThe span of the instruction.\nThe alignment requested.\nError raised when trying to parse an alignment string and …\nAlternate specifier <code>#</code>.\nBinary formatting type.\nCenter alignment.\nDebug type.\nDisplay type (default).\nA single flag for format spec.\nFormat specification flags.\nA format specification, wrapping an inner value.\nA format specification.\nLeft alignment.\nUpper hex type.\nPointer formatting type.\nRight alignment.\nSign-aware zero pad <code>0</code>.\nMinus sign <code>-</code>.\nPlus sign <code>+</code>.\nThe type of formatting requested.\nError raised when trying to parse a type string and it …\nUpper hex type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the flags as a number. This representation is not …\nCheck if the set of flags is empty.\nConstruct a new format specification.\nSet the given flag.\nTest the given flag.\nUnit stored as array of instructions.\nUnit stored as byte code, which is a more compact …\nDefault storage implementation to use.\nInstructions from a single source file.\nInstructions and debug info from a single compilation.\nBuilder trait for unit storage.\nInstruction storage used by a <code>Unit</code>.\nAccess debug information for the given location if it is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new unit from a pair of data and debug info.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccess unit data.\nError raised when constructing a source.\nA single source file.\nAn extracted source line.\nThe column number in the source.\nConvert the given position to a utf-8 line position in …\nConvert the given position to a utf-16 code units line and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead and load a source from the given filesystem path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe line number in the source.\nConstruct a new anonymously named <code>&lt;memory&gt;</code> source.\nGet the name of the source.\nConstruct a new source with the given name.\nGet the path associated with the source.\nFetch <code>SourceLine</code> information for the given span.\nThe text of the span.\nConstruct a new source with the given content and path.\nA thread-safe reference-counting pointer. ‘Arc’ stands …\n<code>Weak</code> is a version of <code>Arc</code> that holds a non-owning reference …\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nMakes a clone of the <code>Arc</code> pointer.\nMakes a clone of the <code>Weak</code> pointer that points to the same …\nComparison for two <code>Arc</code>s.\nCreates a new <code>Weak</code> pointer to this allocation.\nDrops the <code>Arc</code>.\nDrops the <code>Weak</code> pointer.\nEquality for two <code>Arc</code>s.\nReturns the argument unchanged.\nConverts an atomically reference-counted string slice into …\nReturns the argument unchanged.\nConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.\n‘Greater than or equal to’ comparison for two <code>Arc</code>s.\nReturns a mutable reference into the given <code>Arc</code>, if there …\nReturns a mutable reference into the given <code>Arc</code>, without …\nGreater-than comparison for two <code>Arc</code>s.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Arc</code>, returning the wrapped pointer and …\nDetermine whether this is the unique reference to the …\n‘Less than or equal to’ comparison for two <code>Arc</code>s.\nLess-than comparison for two <code>Arc</code>s.\nInequality for two <code>Arc</code>s.\nConstructs a new <code>Arc&lt;T&gt;</code>.\nPartial comparison for two <code>Arc</code>s.\nReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation …\nGets the number of strong (<code>Arc</code>) pointers pointing to this …\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nAllocates a reference-counted slice and moves <code>v</code>’s items …\nAllocates a reference-counted slice and fills it by …\nConstructs a new <code>Arc&lt;T&gt;</code>.\nConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.\nAttempts to upgrade the <code>Weak</code> pointer to an <code>Arc</code>, delaying …\nGets an approximation of the number of <code>Weak</code> pointers …\nTry very hard to emit colors. This includes emitting ANSI …\nAlwaysAnsi is like Always, except it never tries to use …\nSatisfies <code>WriteColor</code> using standard ANSI escape sequences.\nTry to use colors, but don’t force the issue. If the …\nWrite colored text to memory.\nWrites colored buffers to stdout or stderr.\nLike <code>StandardStream</code>, but does buffered writing.\nThe set of available colors for the terminal …\nColorChoice represents the color preferences of an end …\nAn error that occurs when parsing a <code>ColorChoice</code> fails.\nA color specification.\nA hyperlink specification.\nNever emit colors.\nSatisfies <code>WriteColor</code> but ignores all color options.\nAn error from parsing an invalid color specification.\nSatisfies <code>io::Write</code> and <code>WriteColor</code>, and supports optional …\n<code>StandardStreamLock</code> is a locked reference to a …\nThis trait describes the behavior of writers that support …\nCreate a buffer that uses ANSI escape sequences.\nReturn the underlying data of the buffer as a mutable …\nReturn the underlying data of the buffer.\nGet the background color.\nGet whether this is bold or not.\nCreates a new <code>Buffer</code> with the current color preferences.\nClears this buffer.\nClears this color specification so that it has no …\nCreates a hyperlink specification representing no …\nGet whether this is dimmed or not.\nGet the foreground color.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a mutable reference to the inner writer.\nReturn a mutable reference to the inner writer.\nReturn a reference to the inner writer.\nReturn a reference to the inner writer.\nGet whether this is intense or not.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume this buffer and return the underlying raw data.\nConsume this <code>NoColor</code> value and return the inner writer.\nConsume this <code>Ansi</code> value and return the inner writer.\nReturn the string that couldn’t be parsed as a valid …\nReturns true if and only if this buffer is empty.\nReturns true if this color specification has no colors or …\nReturns true if and only if the underlying writer must …\nGet whether this is italic or not.\nReturns the length of this buffer in bytes.\nLock the underlying writer.\nCreate a new writer that satisfies <code>WriteColor</code> but drops …\nCreate a new writer that satisfies <code>WriteColor</code> using …\nCreate a new color specification that has no colors or …\nCreate a buffer that drops all color information.\nCreates a new hyperlink specification.\nPrints the contents of the given buffer.\nReset the current color settings to their original …\nGet whether reset is enabled or not.\nIf set, the separator given is printed between buffers. By …\nSet the background color.\nSet whether the text is bolded or not.\nSet the color settings of the writer.\nSet whether the text is dimmed or not.\nSet the foreground color.\nSet the current hyperlink of the writer.\nSet whether the text is intense or not.\nSet whether the text is italicized or not.\nSet whether to reset the terminal whenever color settings …\nSet whether the text is strikethrough or not.\nSet whether the text is underlined or not.\nCreate a new <code>StandardStream</code> with the given color …\nCreate a new <code>BufferedStandardStream</code> with the given color …\nCreate a new <code>BufferWriter</code> that writes to stderr with the …\nCreate a new <code>StandardStream</code> with the given color …\nCreate a new <code>BufferedStandardStream</code> with the given color …\nCreate a new <code>BufferWriter</code> that writes to stdout with the …\nGet whether this is strikethrough or not.\nReturns true if and only if the underlying writer supports …\nReturns true if and only if the underlying writer supports …\nGet whether this is underline or not.\nReturns the URI of the hyperlink if one is attached to …\nLook for all things.\nAllocation Error.\nThe found entry is a benchmark.\nThe found entry is a binary.\nA prepared build.\nFailed to build workspace.\nCodespan reporting error.\nA single workspace diagnostic.\nDiagnostics emitted about a workspace.\nErrors that can be raised when formatting diagnostics.\nThe found entry is an example.\nAn error in a workspace.\nA fatal diagnostic in a workspace.\nA filesystem-based source loader.\nA found item in the workspace.\nThe kind of a found entry.\nA found item in the workspace associated with a package.\nSource Error.\nThe name of the toplevel manifest <code>Rune.toml</code>.\nThe manifest of a workspace.\nLook for one specific named thing.\nA single package.\nA source loader.\nThe found entry is a test.\nAn error raised when interacting with workspaces.\nA workspace filter which in combination with functions …\nAutomatically detect benches.\nAutomatically detect binaries.\nAutomatically detect examples.\nAutomatically detect tests.\nPerform the build.\nAccess underlying diagnostics.\nGenerate formatted diagnostics capable of referencing …\nAccess the underlying workspace error.\nFind every single entrypoint available.\nFind every single entrypoint available.\nFind all benches matching the given name in the workspace.\nFind all benches matching the given name in the workspace.\nFind all binaries matching the given name in the workspace.\nFind all binaries matching the given name in the workspace.\nFind all examples matching the given name in the workspace.\nFind all examples matching the given name in the workspace.\nFind all tests associated with the given base name.\nFind all tests associated with the given base name.\nA found path that can be built.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTest if diagnostics has errors.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest if diagnostics is empty.\nThe kind found.\nLoad the given path.\nConstruct a custom message as an error.\nName of the found thing.\nThe name of the package.\nConstruct an empty diagnostics container.\nConstruct a new filesystem-based source loader.\nIndex of the package build belongs to.\nList of packages found.\nA found path that can be built.\nPrepare a workspace build.\nThe root of the package.\nGet source id of the diagnostic.\nThe version of the package..\nAssociate a specific diagnostic with the build.\nAssociate a specific source loader with the build.")