searchState.loadedDescShard("rune", 0, "The Rune Language, an embeddable dynamic programming …\nDerive for types which can be used inside of Rune.\nMacro to mark a value as external, which will implement …\nA builder for a Unit.\nError raised when we failed to load sources.\nContext used for the Rune language.\nAn error raised when building the context.\nStructure to collect compilation diagnostics.\nThe empty hash.\nThe empty source identifier.\nTrait for converting types from the dynamic Value …\nDerive macro for the <code>FromValue</code> trait for converting types …\nThe complete type hash of the type including type …\nThe primitive hash that among other things is used to …\nThe compile-time type information know for the type.\nThe compile-time type information know for the type.\nThe reference to an ItemBuf.\nThe name of an item in the Rune Language.\nHelper macro to reference a specific token kind, or short …\nA Module that is a collection of native functions and …\nOptions that can be provided to the compiler.\nHelper to register a parameterized function.\nA single source file.\nThe opaque identifier of a source file, as returned by …\nA collection of source files.\nHelper macro to reference a specific token.\nHelper trait used to convert a type into a type hash.\nTrait for converting types into the dynamic <code>Value</code> …\nDerive macro for the <code>ToValue</code> trait for converting types …\nStatic type hash for a given type.\nInstructions and debug info from a single compilation.\nAn entry on the stack.\nA stack which references variables indirectly from a slab.\nThe Rune core allocation and collections library\nGet the ancestry of one module to another.\nReturn the underlying byte representation of the Item.\nGet the crate corresponding to the item.\nIf the item only contains one element, return that element.\nReturn the current hash if it is non-empty.\nConstruct a new vector from the current item.\nConstruct a hash to an instance function, where the …\nAbstract syntax trees for the Rune language.\nBuild a <code>Unit</code> with the current configuration.\nClear the current item.\nHelper to build customized commandline interfaces using …\nThe Rune compiler.\nDiagnostics module for Rune.\nConvenience macro for extracting a documentation string …\nGenerate formatted diagnostics capable of referencing …\nGenerate formatted diagnostics capable of referencing …\nDump instructions in a human readable manner.\nDefine an empty source identifier that cannot reference a …\nExtend the current item with an iterator.\nReturn an owned and extended variant of this item.\nConstruct a hash corresponding to a field function.\nAccess the first component of this item.\nHelper to format Rune code.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct an Item from an ItemBuf.\nConvert something into the dynamic <code>Value</code>.\nTry to convert to the given type, from the given value.\nMacro used to annotate native functions which can be …\nGet the source matching the given source id.\nUtilities for working with hashes.\nCalculate a type hash at compile time.\nGet the hash corresponding to a string identifier like …\nConstruct a hash from an index.\nConstruct an index function.\nInsert a source and return its <code>SourceId</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccess the source identifier as an index.\nCheck if the item is empty.\nTest if current is immediate super of <code>other</code>.\nTypes related to items.\nCalculate an item reference at compile time.\nAn iterator over the Components that constitute this item.\nReturn an owned and joined variant of this item.\nUtility for building a language server.\nAccess the last component in the path.\nThe macro system of Rune.\nTypes used for defining native modules.\nMacro used to annotate a module with metadata.\nPublic packages that can be used to provide extract …\nConstruct a new empty item.\nConstruct an Item corresponding to the root item.\nConstruct a new parameters wrapper.\nConstruct a new collection of sources.\nConstruct a source identifier from an index.\nHelper prelude for <code>#[no_std]</code> support. Public types related …\nHash the given iterator of object keys.\nHash type parameters.\nGet the parent item for the current item.\nParsing utilities for Rune.\nPop a the tail component, returning <code>true</code> if there was …\nEntry point to building a collection <code>Sources</code> of Rune into …\nPush the given component to the current item.\nLazy query system, used to compile and build items on …\nRuntime module for Rune.\nModule for dealing with sources.\nPrint formatted diagnostics about a source conveniently.\nHelper macro to define a collection of sources populatedc …\nTest if current item starts with another.\nGet the hash corresponding to a static byte array.\nDefines a static budget and environment implementation …\nConvert something into the dynamic <code>Value</code>.\nConvert into a value.\nGet the hash of a type.\nDisplay an unqalified variant of the item which does not …\nHelper to cause a panic.\nHelper to perform the try operation over <code>VmResult</code>.\nHelper macro to perform a <code>write!</code> in a context which errors …\nModify the current Build to use the given Context while …\nConstruct item for a crate.\nCreate a crated item with the given name.\nModify the current Build to use the given Diagnostics …\nMix the current hash with function parameters.\nMix in generics hash.\nConstruct a new item with the given path.\nModify the current Build to use the given Options.\nModify the current Build to configure the given …\nMix the current hash with type parameters.\nModify the current Build to configure the given …\nTypes for dealing with workspaces of rune code.\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nA pointer type that uniquely owns a heap allocation of …\nContains the error value\nThe error type for methods which allocate or reserve.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nContains the success value\nA <code>Result</code> aliased specialized towards an allocation <code>Error</code>.\nA UTF-8–encoded, growable string.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nA double-ended queue implemented with a growable ring …\nTerminates the process in an abnormal fashion.\nAllocated types.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a byte slice of this <code>String</code>’s contents.\nReturns an unsafe mutable pointer to the vector’s …\nExtracts a mutable slice of the entire vector.\nReturns a pair of slices which contain, in order, the …\nConverts a <code>String</code> into a mutable string slice.\nReturns a mutable reference to the contents of this <code>String</code>.\nReturns a raw pointer to the vector’s buffer, or a …\nExtracts a slice containing the entire vector.\nReturns a pair of slices which contain, in order, the …\nExtracts a string slice containing the entire <code>String</code>.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nConverts to <code>Box&lt;T, A&gt;</code>.\nProvides a reference to the back element, or <code>None</code> if the …\nProvides a mutable reference to the back element, or <code>None</code> …\nBinary searches this <code>VecDeque</code> for a given element. If the …\nBinary searches this <code>VecDeque</code> with a comparator function.\nBinary searches this <code>VecDeque</code> with a key extraction …\nA module for working with borrowed data.\nThe <code>Box&lt;T&gt;</code> type for heap allocation.\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nA trait used for types which can be called.\nReturns the number of elements the map can hold without …\nReturns the number of elements the set can hold without …\nReturns the total number of elements the vector can hold …\nReturns the number of elements the deque can hold without …\nReturns this <code>String</code>’s capacity, in bytes.\nClears the map, removing all elements.\nClears the set, removing all elements.\nClears the map, removing all key-value pairs. Keeps the …\nClears the set, removing all values.\nClears the vector, removing all values.\nClears the deque, removing all values.\nTruncates this <code>String</code>, removing all contents.\nThe <code>TryClone</code> trait for types that cannot be ‘implicitly …\nReturns <code>true</code> if the set contains an element equal to the …\nReturns <code>true</code> if the set contains a value.\nReturns <code>true</code> if the deque contains an element equal to the …\nReturns <code>true</code> if the map contains a value for the specified …\nReturns <code>true</code> if the map contains a value for the specified …\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates an empty <code>BTreeMap</code>.\nCreates an empty <code>BTreeSet</code>.\nCreates an empty <code>HashMap&lt;K, V, S, A&gt;</code>, with the <code>Default</code> …\nCreates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …\nCreates an empty <code>Vec&lt;T&gt;</code>.\nCreates an empty deque.\nConstruct a default string.\nVisits the elements representing the difference, i.e., the …\nVisits the values representing the difference, i.e., the …\nClears the map, returning all key-value pairs as an …\nClears the set, returning all elements in an iterator.\nRemoves the specified range from the vector in bulk, …\nRemoves the specified range from the deque in bulk, …\nRemoves the specified range from the string in bulk, …\nGets the given key’s corresponding entry in the map for …\nGets the given key’s corresponding entry in the map for …\nGets the given value’s corresponding entry in the set …\nGets the given key’s corresponding entry by reference in …\nError types used by rune alloc.\nCreates an iterator that visits all elements (key-value …\nCreates an iterator that visits all elements in ascending …\nDrains elements which are true under the given predicate, …\nDrains elements which are true under the given predicate, …\nReturns a reference to the first element in the set, if …\nReturns the first entry in the map for in-place …\nReturns the first key-value pair in the map. The key in …\nBuilt-in formatting utilities.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nConvert a boxed slice into a vector by transferring …\nReturns the argument unchanged.\nConverts the given <code>String</code> to a vector <code>Vec</code> that holds …\nTurn a <code>Vec&lt;T&gt;</code> into a <code>VecDeque&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the given boxed <code>str</code> slice to a <code>String</code>. It is …\nReturns the argument unchanged.\nConstructs a box from a raw pointer in the given allocator.\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a capacity, a …\nCreates a new <code>String</code> from a length, capacity, and pointer.\nConvert from a std <code>Box</code>.\nConverts a vector of bytes to a <code>String</code>.\nConverts a vector of bytes to a <code>String</code> without checking …\nProvides a reference to the front element, or <code>None</code> if the …\nProvides a mutable reference to the front element, or <code>None</code> …\nReturns a reference to the value corresponding to the key.\nReturns a reference to the element in the set, if any, …\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value in the set, if any, that …\nProvides a reference to the element at the given index.\nReturns the key-value pair corresponding to the supplied …\nReturns the key-value pair corresponding to the supplied …\nReturns the key-value pair corresponding to the supplied …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns a mutable reference to the value corresponding to …\nReturns a mutable reference to the value corresponding to …\nProvides a mutable reference to the element at the given …\nLike <code>BTreeMap::get_mut</code> but allows for custom value …\nInserts the given <code>value</code> into the set if it is not present, …\nInserts an owned copy of the given <code>value</code> into the set if …\nInserts a value computed from <code>f</code> into the set if the given …\nThis is a fork of the <code>hashbrown</code> crate.\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the set’s <code>BuildHasher</code>.\nReturns a reference to the value corresponding to the …\nReturns a reference to the value corresponding to the …\nVisits the elements representing the intersection, i.e., …\nVisits the values representing the intersection, i.e., the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a <code>String</code> into a byte vector.\nTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.\nConsumes the <code>Box</code>, returning the wrapped value.\nGets an iterator for moving out the <code>BTreeSet</code>’s contents.\nCreates a consuming iterator, that is, one that moves each …\nCreates an iterator over the entries of a <code>HashMap</code> in …\nCreates an iterator over the entries of a <code>HashMap</code> in …\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator, that is, one that moves each …\nConsumes the deque into a front-to-back iterator yielding …\nCreates a consuming iterator visiting all the keys, in …\nCreates a consuming iterator visiting all the keys in …\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components.\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nConvert a <code>Vec&lt;T&gt;</code> into a std <code>Vec&lt;T&gt;</code>.\nConvert a <code>String</code> into a std <code>String</code>.\nCreates a consuming iterator visiting all the values, in …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the vector contains no elements.\nReturns <code>true</code> if the deque is empty.\nReturns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nReturns <code>true</code> if the set is a superset of another, i.e., …\nComposable external iteration.\nGets an iterator over the entries of the map, sorted by …\nGets an iterator that visits the elements in the <code>BTreeSet</code> …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order. The …\nReturns a front-to-back iterator.\nGets a mutable iterator over the entries of the map, …\nAn iterator visiting all key-value pairs in arbitrary …\nReturns a front-to-back iterator that returns mutable …\nPerform a raw iteration over the btree.\nGets an iterator over the keys of the map, in sorted order.\nAn iterator visiting all keys in arbitrary order. The …\nReturns a reference to the last element in the set, if any.\nReturns the last entry in the map for in-place …\nReturns the last key-value pair in the map. The key in …\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nConsumes and leaks the <code>Vec</code>, returning a mutable reference …\nConsumes and leaks the <code>String</code>, returning a mutable …\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nReturns the number of elements in the vector, also …\nReturns the number of elements in the deque.\nReturns the length of this <code>String</code>, in bytes, not <code>char</code>s or …\nMemory limits for Rune.\nReturns a <code>Cursor</code> pointing at the first element that is …\nReturns a <code>CursorMut</code> pointing at the first element that is …\nRearranges the internal storage of this deque so it is one …\nMakes a new, empty <code>BTreeMap</code>.\nMakes a new, empty <code>BTreeSet</code>.\nCreates an empty <code>HashMap</code>.\nCreates an empty <code>HashSet</code>.\nConstructs a new, empty <code>Vec&lt;T&gt;</code>.\nCreates an empty deque.\nCreates a new empty <code>String</code>.\nMakes a new empty BTreeMap with a reasonable choice for B.\nMakes a new <code>BTreeSet</code> with a reasonable choice of B.\nCreates an empty <code>HashMap</code> using the given allocator.\nCreates an empty <code>HashSet</code>.\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.\nCreates an empty deque.\nCreates a new empty <code>String</code>.\nReturns the index of the partition point according to the …\nCross-platform path manipulation.\nRemoves the last element from a vector and returns it, or …\nRemoves the last character from the string buffer and …\nRemoves the last element from the deque and returns it, or …\nRemoves and returns the first element in the map. The key …\nRemoves the first element from the set and returns it, if …\nRemoves the first element and returns it, or <code>None</code> if the …\nRemoves and returns the last element in the map. The key …\nRemoves the last element from the set and returns it, if …\nPrelude for common traits used in combination with this …\nAppends an element if there is sufficient spare capacity, …\nConstructs a double-ended iterator over a sub-range of …\nConstructs a double-ended iterator over a sub-range of …\nCreates an iterator that covers the specified range in the …\nConstructs a mutable double-ended iterator over a …\nCreates an iterator that covers the specified mutable …\nCreates a raw immutable entry builder for the HashMap.\nCreates a raw entry builder for the HashMap.\nConstruct a raw iterator over the current vector\nReturns a raw front-to-back iterator.\nConstruct a raw mutable iterator over the current vector\nReturns a reference to the <code>RawTable</code> used underneath <code>HashMap</code>…\nReturns a reference to the <code>RawTable</code> used underneath <code>HashSet</code>…\nReturns a mutable reference to the <code>RawTable</code> used …\nReturns a mutable reference to the <code>RawTable</code> used underneath\nRemoves a key from the map, returning the value at the key …\nIf the set contains an element equal to the value, removes …\nRemoves a key from the map, returning the value at the key …\nRemoves a value from the set. Returns whether the value was\nRemoves and returns the element at position <code>index</code> within …\nRemoves and returns the element at <code>index</code> from the deque. …\nRemoves a <code>char</code> from this <code>String</code> at a byte position and …\nRemoves a key from the map, returning the stored key and …\nRemoves a key from the map, returning the stored key and …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate. …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the characters specified by the predicate.\nRetains only the elements specified by the predicate, …\nRetains only the elements specified by the predicate.\nRotates the double-ended queue <code>mid</code> places to the left.\nRotates the double-ended queue <code>k</code> places to the right.\nForces the length of the vector to <code>new_len</code>.\nReturns the remaining spare capacity of the vector as a …\nReturns vector content as a slice of <code>T</code>, along with the …\nUtilities for the <code>str</code> primitive type.\nA UTF-8–encoded, growable string.\nSwaps elements at indices <code>i</code> and <code>j</code>.\nRemoves an element from the vector and returns it.\nRemoves an element from anywhere in the deque and returns …\nRemoves an element from anywhere in the deque and returns …\nVisits the elements representing the symmetric difference, …\nVisits the values representing the symmetric difference, …\nRemoves and returns the element in the set, if any, that …\nRemoves and returns the value in the set, if any, that is …\nShortens the vector, keeping the first <code>len</code> elements and …\nShortens the deque, keeping the first <code>len</code> elements and …\nShortens this <code>String</code> to the specified length.\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nInserts all new key-values from the iterator to existing …\nInserts all new key-values from the iterator to existing …\nInserts all new key-values from the iterator to existing …\nExtend a string using a character iterator.\nExtend a string using a character iterator.\nClones and appends all elements in a slice to the <code>Vec</code>.\nCopies elements from <code>src</code> range to the end of the vector.\nCreates a <code>String</code> using interpolation of runtime …\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>.\nConverts a <code>&amp;[u8]</code> into a <code>Box&lt;[u8]&gt;</code>.\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConverts a std <code>String</code> into a <code>Box&lt;str&gt;</code>.\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConverts a <code>&amp;[u8]</code> into a <code>Box&lt;[u8]&gt;</code>.\nExamples\nExamples\nConverts a <code>[T; N]</code> into a <code>Vec&lt;T&gt;</code>.\nConverts a <code>&amp;[T]</code> into a <code>Vec&lt;T&gt;</code>.\nConverts a std <code>Vec&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nConverts a <code>[T; N]</code> into a <code>VecDeque&lt;T&gt;</code>.\nConverts a <code>Cow&lt;str&gt;</code> into a <code>String</code>.\nTry to convert a std <code>String</code> into a <code>String</code>.\nConverts a <code>&amp;str</code> into a <code>String</code>.\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nTry to convert a std <code>Box&lt;str&gt;</code> into a <code>String</code>.\nConstruct a string from an iterator of characters.\nConstruct a string from an iterator of characters.\nInserts a key-value pair into the map.\nAdds a value to the set.\nInserts a key-value pair into the map.\nAdds a value to the set.\nInserts an element at position <code>index</code> within the vector, …\nInserts an element at <code>index</code> within the deque, shifting all …\nInserts a character into this <code>String</code> at a byte position.\nTries to insert a key-value pair into the map, and returns …\nTries to insert a key-value pair into the map, and returns …\nInserts a string slice into this <code>String</code> at a byte position.\nInsert a key-value pair into the map without checking if …\nInsert a value the set without checking if the value …\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nConverts this <code>String</code> into a Box&lt;str&gt;.\nAllocates memory on the heap and then places <code>x</code> into it.\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nAppends an element to the back of a collection.\nAppends the given <code>char</code> to the end of this <code>String</code>.\nAppends an element to the back of the deque.\nPrepends an element to the deque.\nAppends a given string slice onto the end of this <code>String</code>.\nAdds a value to the set, replacing the existing element, …\nAdds a value to the set, replacing the existing value, if …\nRemoves the specified range in the string, and replaces it …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> bytes …\nTries to reserve the minimum capacity for at least …\nTries to reserve the minimum capacity for at least …\nTries to reserve the minimum capacity for at least …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nModifies the deque in-place so that <code>len()</code> is equal to …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nModifies the deque in-place so that <code>len()</code> is equal to …\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the set with a lower limit. It …\nShrinks the capacity of the vector with a lower bound.\nShrinks the capacity of the deque with a lower bound.\nShrinks the capacity of this <code>String</code> with a lower bound.\nShrinks the capacity of the map as much as possible. It …\nShrinks the capacity of the set as much as possible. It …\nShrinks the capacity of the vector as much as possible.\nShrinks the capacity of the deque as much as possible.\nShrinks the capacity of this <code>String</code> to match its length.\nSplits the collection into two at the given key. Returns …\nSplits the collection into two at the value. Returns a new …\nSplits the collection into two at the given index.\nSplits the deque into two at the given index.\nSplits the string into two at the given byte index.\nCreates an empty <code>HashMap</code> with the specified capacity.\nCreates an empty <code>HashSet</code> with the specified capacity.\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nCreates an empty deque with space for at least <code>capacity</code> …\nCreates a new empty <code>String</code> with at least the specified …\nCreates an empty <code>HashMap</code> with the specified capacity, …\nCreates an empty <code>HashSet</code> with the specified capacity, using\nCreates an empty <code>HashMap</code> with the specified capacity, …\nCreates an empty <code>HashSet</code> with the specified capacity, using\nCreates an empty <code>HashMap</code> with the specified capacity using …\nCreates an empty <code>HashSet</code> with the specified capacity.\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nCreates an empty deque with space for at least <code>capacity</code> …\nCreates a new empty <code>String</code> with at least the specified …\nVisits the elements representing the union, i.e., all the …\nVisits the values representing the union, i.e., all the …\nReturns a <code>Cursor</code> pointing at the last element that is …\nReturns a <code>CursorMut</code> pointing at the last element that is …\nGets an iterator over the values of the map, in order by …\nAn iterator visiting all values in arbitrary order. The …\nGets a mutable iterator over the values of the map, in …\nAn iterator visiting all values mutably in arbitrary order.\nA contiguous growable array type with heap-allocated …\nA double-ended queue (deque) implemented with a growable …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nError raised while allocating.\nAn implementation of <code>Allocator</code> can allocate, grow, shrink, …\nThe default global allocator for Rune.\nAttempts to allocate a block of memory.\nBehaves like <code>allocate</code>, but also ensures that the returned …\nDeallocates the memory referenced by <code>ptr</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to extend the memory block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBehaves like <code>grow</code>, but also ensures that the new contents …\nBorrowed data.\nA clone-on-write smart pointer.\nOwned data.\nThe resulting type after obtaining ownership.\nA generalization of <code>TryClone</code> to borrowed data.\nReturns the argument unchanged.\nConstruct a <code>Cow</code> from a reference.\nCalls <code>U::from(self)</code>.\nReturns true if the data is borrowed, i.e. if <code>to_mut</code> would …\nReturns true if the data is owned, i.e. if <code>to_mut</code> would be …\nExtracts the owned data.\nAcquires a mutable reference to the owned form of the data.\nCreates owned data from borrowed data, usually by cloning.\nA pointer type that uniquely owns a heap allocation of …\nAn ordered map based on a B-Tree.\nA cursor over a <code>BTreeMap</code>.\nA cursor over a <code>BTreeMap</code> with editing operations.\nA view into a single entry in a map, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeMap.\nAn owning iterator over the entries of a <code>BTreeMap</code>.\nAn owning iterator over the keys of a <code>BTreeMap</code>.\nAn owning iterator over the values of a <code>BTreeMap</code>.\nAn iterator over the entries of a <code>BTreeMap</code>.\nA mutable iterator over the entries of a <code>BTreeMap</code>.\nA raw iterator over a map where the caller is responsible …\nAn iterator over the keys of a <code>BTreeMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nAn iterator over a sub-range of entries in a <code>BTreeMap</code>.\nA mutable iterator over a sub-range of entries in a …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeMap</code>. It is part of …\nAn iterator over the values of a <code>BTreeMap</code>.\nA mutable iterator over the values of a <code>BTreeMap</code>.\nProvides in-place mutable access to an occupied entry …\nCreates an empty <code>btree_map::Iter</code>.\nCreates an empty <code>btree_map::IterMut</code>.\nCreates an empty <code>btree_map::IntoIter</code>.\nCreates an empty <code>btree_map::Keys</code>.\nCreates an empty <code>btree_map::Values</code>.\nCreates an empty <code>btree_map::IntoKeys</code>.\nCreates an empty <code>btree_map::IntoValues</code>.\nCreates an empty <code>Range</code>.\nThe entry in the map that was already occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry with the <code>OccupiedEntry</code>’s key,\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the key.\nConverts the entry into a mutable reference to its value.\nReturns a reference to this entry’s key.\nGets a reference to the key that would be used when …\nGets a reference to the key in the entry.\nReturns a reference to the key of the element that the …\nReturns a reference to the key of the element that the …\nReturns a reference to the key and value of the element …\nReturns a reference to the key and value of the element …\nReturns a reference to the key and mutable reference to …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nTakes the value of the entry out of the map, and returns …\nTake ownership of the key and value from the map.\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nReturns a reference to the value of the element that the …\nReturns a reference to the value of the element that the …\nThe value which was not inserted, because the entry was …\nReturns a mutable reference to the value of the element …\nAn ordered set based on a B-Tree.\nA lazy iterator producing elements in the difference of …\nAn iterator produced by calling <code>extract_if</code> on BTreeSet.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>BTreeSet</code>.\nAn iterator over the items of a <code>BTreeSet</code>.\nAn iterator over a sub-range of items in a <code>BTreeSet</code>.\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>BTreeSet</code>…\nCreates an empty <code>btree_set::Iter</code>.\nCreates an empty <code>btree_set::IntoIter</code>.\nCreates an empty <code>btree_set::Range</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA trait used for types which can be called.\nOutput of the callable.\nCall and consume the callable.\nFallible <code>TryClone</code> trait.\nMarker trait for types which are <code>Copy</code>.\nTry to clone the current value, raising an allocation …\nPerforms copy-assignment from <code>source</code>.\nCustom error being returned.\nAn error type returned when a custom error is available …\nThe error type for methods which allocate or reserve.\nTry reserve error being returned.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFallible write formatting implementation.\nThe <code>format</code> function takes an <code>Arguments</code> struct and returns …\nWrites a <code>char</code> into this writer, returning whether the …\nWrites a string slice into this writer, returning whether …\nTrait used to implement custom equality implementations …\nKey equivalence trait.\nAn error was returned.\nError raised by <code>RawTable::find_or_find_insert_slot</code>.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nTrait used to implement custom hash implementations which …\nA return slot was inserted.\nAdapter for <code>HasherFn</code> for hashing tuples.\nChecks if this value is equivalent to the given key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA reference to a hash table bucket containing a <code>T</code>.\nA reference to an empty bucket into which an can be …\nIterator which consumes elements without freeing the table …\nIterator which consumes a table and returns elements.\nIterator which returns a raw pointer to every full bucket …\nIterator over occupied buckets that could match a given …\nA raw hash table with an unsafe API.\nReturn the information about memory allocated by the table.\nReturns a reference to the underlying allocator.\nReturns a unique mutable reference to the <code>value</code>.\nAcquires the underlying raw pointer <code>*mut T</code> to <code>data</code>.\nReturns a shared immutable reference to the <code>value</code>.\nReturns a pointer to an element in the table.\nReturns the index of a bucket from a <code>Bucket</code>.\nReturns the number of buckets in the table.\nReturns the number of elements the map can hold without …\nRemoves all elements from the table without freeing the …\nMarks all table buckets as empty without dropping their …\nVariant of <code>clone_from</code> to use when a hasher is available.\nCopies <code>size_of&lt;T&gt;</code> bytes from <code>other</code> to <code>self</code>. The source and …\nReturns pointer to one past last element of data table.\nReturns an iterator which removes all elements from the …\nReturns an iterator which removes all elements from the …\nErases an element from the table, dropping it in place.\nFinds and erases an element from the table, dropping it in …\nSearches for an element in the table.\nSearches for an element in the table. If the element is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to an element in the table.\nAttempts to get mutable references to <code>N</code> entries in the …\nGets a mutable reference to an element in the table.\nInserts a new element into the table, and returns its raw …\nInserts a new element into the table, and returns a …\nInserts a new element into the table in the given slot, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator which consumes all elements from the …\nChecks whether the bucket at <code>index</code> is full.\nReturns <code>true</code> if the table contains no elements.\nReturns an iterator over every element in the table. It is …\nReturns an iterator over occupied buckets that could match …\nReturns the number of elements in the table.\nCreates a new empty hash table without allocating any …\nCreates a new empty hash table without allocating any …\nRefresh the iterator so that it reflects an insertion into …\nRefresh the iterator so that it reflects a removal from …\nRemoves an element from the table, returning it.\nFinds and removes an element from the table, returning it.\nTemporary removes a bucket, applying the given function to …\nEnsures that at least <code>additional</code> items can be inserted …\nShrinks the table to fit <code>max(self.len(), min_size)</code> …\nAttempts to insert a new element without growing the table …\nTries to ensure that at least <code>additional</code> items can be …\nAttempts to allocate a new hash table with at least enough …\nAllocates a new hash table using the given allocator, with …\nIterator extension trait.\nAn iterator that clones the elements of an underlying …\nExtend a collection with the contents of an iterator.\nConversion from an <code>Iterator</code> within the <code>Global</code> allocator.\nConversion from an <code>Iterator</code> within a custom allocator <code>A</code>.\nHelper trait for joining iterators.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an iterator which <code>try_clone</code>s all of its elements.\nTransforms an iterator into a collection using fallible …\nTransforms an iterator into a collection using fallible …\nExtends a collection with the contents of an iterator.\nCreates a value from an iterator within an allocator.\nCreates a value from an iterator within an allocator.\nTry to join the given value.\nTry to join the given value in the given allocator.\nTry to join the given value.\nSomething being budgeted.\nCall the wrapped function, replacing the current budget …\nReturns the argument unchanged.\nGet remaining memory that may be allocated.\nCalls <code>U::from(self)</code>.\nWrap the given value with a memory limit. Using a value of …\nAn iterator over <code>Path</code> and its ancestors.\nA single component of a path.\nAn iterator over the <code>Component</code>s of a <code>Path</code>.\nA reference to the current directory, i.e., <code>.</code>.\nDevice namespace prefix, e.g., <code>\\\\.\\COM42</code>.\nPrefix <code>C:</code> for the given disk drive.\nHelper struct for safely printing paths with <code>format!</code> and <code>{}</code>…\nAn iterator over the <code>Component</code>s of a <code>Path</code>, as <code>OsStr</code> slices.\nThe primary separator of path components for the current …\nThe primary separator of path components for the current …\nA normal component, e.g., <code>a</code> and <code>b</code> in <code>a/b</code>.\nA reference to the parent directory, i.e., <code>..</code>.\nA slice of a path (akin to <code>str</code>).\nAn owned, mutable path (akin to <code>String</code>).\nWindows path prefixes, e.g., <code>C:</code> or <code>\\\\server\\share</code>.\nA Windows path prefix, e.g., <code>C:</code> or <code>\\\\server\\share</code>.\nA structure wrapping a Windows path prefix as well as its …\nThe root directory component, appears after any prefix and …\nAn error returned from <code>Path::strip_prefix</code> if the prefix …\nPrefix using Windows’ <em><strong>U</strong>niform <strong>N</strong>aming <strong>C</strong>onvention</em>, e.g. …\nVerbatim prefix, e.g., <code>\\\\?\\cat_pics</code>.\nVerbatim disk prefix, e.g., <code>\\\\?\\C:</code>.\nVerbatim prefix using Windows’ <em><strong>U</strong>niform <strong>N</strong>aming <strong>C</strong>onvention</em>,\nMakes the path absolute without accessing the filesystem.\nAppend <code>self.extension</code> with <code>extension</code>.\nProduces an iterator over <code>Path</code> and its ancestors.\nYields a mutable reference to the underlying <code>OsStr</code> slice.\nYields a mutable reference to the underlying <code>OsString</code> …\nYields the underlying <code>OsStr</code> slice.\nReturns the raw <code>OsStr</code> slice for this prefix.\nExtracts the underlying <code>OsStr</code> slice.\nCoerces to a <code>Path</code> slice.\nExtracts a slice corresponding to the portion of the path …\nExtracts a slice corresponding to the portion of the path …\nReturns the canonical, absolute form of the path with all …\nInvokes <code>capacity</code> on the underlying instance of <code>OsString</code>.\nInvokes <code>clear</code> on the underlying instance of <code>OsString</code>.\nClones the contents of <code>source</code> into <code>self</code>.\nProduces an iterator over the <code>Component</code>s of the path.\nReturns an object that implements <code>Display</code> for safely …\nDetermines whether <code>child</code> is a suffix of <code>self</code>.\nReturns <code>true</code> if the path points at an existing entity.\nExtracts the extension (without the leading dot) of …\nReturns the final component of the <code>Path</code>, if there is one.\nExtracts the prefix of <code>self.file_name</code>.\nExtracts the stem (non-extension) portion of <code>self.file_name</code>…\nConverts a <code>String</code> into a <code>PathBuf</code>\nConverts an <code>OsString</code> into a <code>PathBuf</code>.\nReturns the argument unchanged.\nConverts a clone-on-write pointer to an owned path.\nConverts a Box&lt;Path&gt; into a <code>PathBuf</code>.\nConverts a borrowed <code>OsStr</code> to a <code>PathBuf</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if the <code>Path</code> has a root.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>PathBuf</code> into a boxed <code>Path</code>.\nConsumes the <code>PathBuf</code>, yielding its internal <code>OsString</code> …\nConverts a <code>Box&lt;Path&gt;</code> into a <code>PathBuf</code> without copying or …\nReturns <code>true</code> if the <code>Path</code> is absolute, i.e., if it is …\nReturns <code>true</code> if the path exists on disk and is pointing at …\nReturns <code>true</code> if the path exists on disk and is pointing at …\nReturns <code>true</code> if the <code>Path</code> is relative, i.e., not absolute.\nDetermines whether the character is one of the permitted …\nReturns <code>true</code> if the path exists on disk and is pointing at …\nDetermines if the prefix is verbatim, i.e., begins with …\nProduces an iterator over the path’s components viewed …\nCreates an owned <code>PathBuf</code> with <code>path</code> adjoined to <code>self</code>.\nReturns the parsed prefix data.\nConsumes and leaks the <code>PathBuf</code>, returning a mutable …\nQueries the file system to get information about a file, …\nAllocates an empty <code>PathBuf</code>.\nDirectly wraps a string slice as a <code>Path</code> slice.\nReturns the <code>Path</code> without its final component, if there is …\nTruncates <code>self</code> to <code>self.parent</code>.\nExtends <code>self</code> with <code>path</code>.\nReturns an iterator over the entries within a directory.\nReads a symbolic link, returning the file that the link …\nInvokes <code>reserve</code> on the underlying instance of <code>OsString</code>.\nInvokes <code>reserve_exact</code> on the underlying instance of …\nUpdates <code>self.extension</code> to <code>Some(extension)</code> or to <code>None</code> if …\nUpdates <code>self.file_name</code> to <code>file_name</code>.\nInvokes <code>shrink_to</code> on the underlying instance of <code>OsString</code>.\nInvokes <code>shrink_to_fit</code> on the underlying instance of …\nDetermines whether <code>base</code> is a prefix of <code>self</code>.\nReturns a path that, when joined onto <code>base</code>, yields <code>self</code>.\nQueries the metadata about a file without following …\nConverts a <code>Path</code> to an owned <code>PathBuf</code>.\nYields a <code>&amp;str</code> slice if the <code>Path</code> is valid unicode.\nConverts a <code>Path</code> to a <code>Cow&lt;str&gt;</code>.\nReturns <code>Ok(true)</code> if the path points at an existing entity.\nInvokes <code>try_reserve</code> on the underlying instance of <code>OsString</code>.\nInvokes <code>try_reserve_exact</code> on the underlying instance of …\nCreates an owned <code>PathBuf</code> like <code>self</code> but with the extension …\nCreates a new <code>PathBuf</code> with a given capacity used to create …\nCreates an owned <code>PathBuf</code> like <code>self</code> but with the given …\nCreates an owned <code>PathBuf</code> like <code>self</code> but with the given file …\nA pointer type that uniquely owns a heap allocation of …\nIterator extension trait.\nExtensions to <code>Option&lt;T&gt;</code>.\nThe resulting type after obtaining ownership.\nA UTF-8–encoded, growable string.\nFallible <code>TryClone</code> trait.\nMarker trait for types which are <code>Copy</code>.\nExtend a collection with the contents of an iterator.\nConversion from an <code>Iterator</code> within the <code>Global</code> allocator.\nConversion from an <code>Iterator</code> within a custom allocator <code>A</code>.\nA generalization of <code>TryClone</code> to borrowed data.\nA trait for converting a value to a <code>String</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nTry to clone the current value, raising an allocation …\nPerforms copy-assignment from <code>source</code>.\nMaps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the contents …\nCreates an iterator which <code>try_clone</code>s all of its elements.\nTransforms an iterator into a collection using fallible …\nTransforms an iterator into a collection using fallible …\nExtends a collection with the contents of an iterator.\nCreates a <code>String</code> using interpolation of runtime …\nCreates a value from an iterator within an allocator.\nCreates a value from an iterator within an allocator.\nTry to join the given value.\nTry to join the given value.\nCreates owned data from borrowed data, usually by cloning.\nConverts the given value to a <code>String</code>.\nConverts a boxed slice of bytes to a boxed string slice …\nConverts a <code>Box&lt;str&gt;</code> into a <code>String</code> without copying or …\nA draining iterator for <code>String</code>.\nA possible error value when converting a <code>String</code> from a …\nA UTF-8–encoded, growable string.\nA trait for converting a value to a <code>String</code>.\nReturns a slice of <code>u8</code>s bytes that were attempted to …\nReturns the remaining (sub)string of this iterator as a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the bytes that were attempted to convert to a …\nConverts the given value to a <code>String</code>.\nFetch a <code>Utf8Error</code> to get more details about the conversion …\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nAn iterator that moves out of a vector.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns the remaining items of this iterator as a mutable …\nReturns the remaining items of this iterator as a slice.\nReturns the remaining items of this iterator as a slice.\nCreates an empty <code>vec::IntoIter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeep unyielded elements in the source <code>Vec</code>.\nA draining iterator over the elements of a <code>VecDeque</code>.\nAn owning iterator over the elements of a <code>VecDeque</code>.\nAn iterator over the elements of a <code>VecDeque</code>.\nA mutable iterator over the elements of a <code>VecDeque</code>.\nAn iterator over the elements of a <code>VecDeque</code>.\nA double-ended queue implemented with a growable ring …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>abstract</code> keyword.\nThe <code>abstract</code> keyword.\nAddition <code>a + b</code>.\nAdd assign <code>a += b</code>.\nThe <code>alignof</code> keyword.\nThe <code>alignof</code> keyword.\n<code>&amp;</code>.\n<code>&amp;</code>.\n<code>&amp;&amp;</code>.\n<code>&amp;&amp;</code>.\n<code>&amp;=</code>.\n<code>&amp;=</code>.\nLazy and operator <code>&amp;&amp;</code>.\nParse something bracketed, that is separated by <code>&lt;(T, S?)*&gt;</code>.\nAn anonymous object.\nan <code>#{</code> anonymous object key\n<code>-&gt;</code>.\n<code>-&gt;</code>.\nThe <code>as</code> keyword.\nThe <code>as</code> keyword.\nType coercion <code>a as b</code>.\nAn assign expression.\nThe <code>async</code> keyword.\nThe <code>async</code> keyword.\nAn asynchronous block with an associated item.\n<code>@</code>.\n<code>@</code>.\nWhether or not the attribute is an outer <code>#!</code> or inner <code>#</code> …\nAttributes like:\nan attribute\nThe <code>await</code> keyword.\nThe <code>await</code> keyword.\nAn await expression.\n<code>!</code>.\n<code>!</code>.\n<code>!=</code>.\n<code>!=</code>.\nThe <code>become</code> keyword.\nThe <code>become</code> keyword.\nA binary operation.\nA binary expression.\nA binary literal, like <code>0b110011</code>.\nA binding <code>a: pattern</code> or <code>&quot;foo&quot;: pattern</code>.\nBitwise and operator <code>a &amp; b</code>.\nBitwise and assign <code>a &amp;= b</code>.\nBitwise or operator <code>a | b</code>.\nBitwise or assign <code>a |= b</code>.\nBitwise xor operator <code>a ^ b</code>.\nBitwise xor assign <code>a ^= b</code>.\nA block of statements.\na block\nA block as an expression.\nthe body of a block\nA boolean literal\nReference <code>&amp;&lt;thing&gt;</code>.\nA brace delimiter <code>{</code> and <code>}</code>.\nParse something braced, that is separated by <code>{(T, S?)*}</code>.\nA bracket delimiter <code>[</code> and <code>]</code>.\nParse something bracketed, that is separated by <code>[(T, S?)*]</code>.\nThe <code>break</code> keyword.\nThe <code>break</code> keyword.\nA break expression.\nA built-in identifiers that do not have a source.\n<code>builtin</code>.\nBuilt-in strings.\nA byte literal.\nA byte literal\nThe <code>u8</code> suffix.\nA single index in a Span, like the start or ending index.\nA byte string literal, including escape sequences. Like …\nA byte string literal\nA function call,\n<code>^</code>.\n<code>^</code>.\n<code>^=</code>.\n<code>^=</code>.\nA characer literal.\nA character literal\nA close delimiter: <code>)</code>, <code>}</code>, or <code>]</code>.\nclosing brace\nclosing bracket\nclosing marker\nclosing parenthesis\nClosed expression.\nAn indexed closure.\nA closure expression.\nclosure arguments\n<code>:</code>.\n<code>:</code>.\n<code>::</code>.\n<code>::</code>.\n<code>,</code>.\n<code>,</code>.\nA single-line comment.\nThe condition in an if statement.\nthe <code>let</code> condition of a loop\nThe <code>const</code> keyword.\nThe <code>const</code> keyword.\nA const declaration.\nA constant block with an associated item.\nThe <code>continue</code> keyword.\nThe <code>continue</code> keyword.\nA continue expression.\nThe source of an item that implements Copy.\nThe <code>crate</code> keyword.\nThe <code>crate</code> keyword.\nThe <code>crate</code> keyword used as a path segment.\nCrate visibility <code>pub(crate)</code>.\n<code>-</code>.\n<code>-</code>.\n<code>-=</code>.\n<code>-=</code>.\nA decimal number literal, like <code>3.14</code>.\nThe <code>default</code> keyword.\nThe <code>default</code> keyword.\nA default branch.\nA delimiter, <code>{</code>, <code>{</code>, or <code>[</code>.\nDereference <code>*&lt;thing&gt;</code>.\n<code>/</code>.\n<code>/</code>.\nDivision <code>a / b</code>.\nDiv assign <code>a /= b</code>.\nThe <code>do</code> keyword.\nThe <code>do</code> keyword.\n<code>doc</code>.\n<code>$</code>.\n<code>$</code>.\n<code>.</code>.\n<code>.</code>.\n<code>..</code>.\n<code>..</code>.\n<code>a .. b</code>.\n<code>..=</code>.\n<code>..=</code>.\n<code>a ..= b</code>.\nThe <code>else</code> keyword.\nThe <code>else</code> keyword.\nA grouped empty expression.\nClosure has no arguments.\nAn empty body.\nAn empty group delimiter.\nA block of statements.\nan empty type body\nAn empty body terminated by a semicolon.\nThe <code>enum</code> keyword.\nThe <code>enum</code> keyword.\nAn enum declaration.\nEn end-of-file marker.\n<code>=</code>.\n<code>=</code>.\nEquality check <code>a == b</code>.\n<code>==</code>.\n<code>==</code>.\nAn <code>= ...</code> e.g. inside an attribute <code>#[doc = ...]</code>.\nEn error marker.\nAn expanded macro.\nA rune expression.\nan expression\nA regular expression.\nAn expression.\nAn expression.\nan array expression\nAn assign expression.\nan assign expression\nAn await expression.\nan <code>.await</code> expression\nA binary expression.\na binary expression\nA block expression.\nA break expression.\na <code>break</code> expression\nA call expression.\na call expression\na chain of expressions\nA closure expression.\na closure expression\nRepresentation of closure arguments.\nA <code>continue</code> statement.\na <code>break</code> expression\nA single selection branch.\nAn else branch of an if expression.\nthe <code>else</code> part of an if-expression\nAn else branch of an if expression.\nthe <code>else if</code> part of an if-expression\nA prioritized expression group without delimiters <code>&lt;expr&gt;</code>.\nan empty group expression\nThe field being accessed.\na field expression\nA field access.\nA <code>for</code> loop over an iterator.\na <code>for</code> expression\nA prioritized expression group.\na group expression\nA conditional <code>if</code> expression.\nan <code>if</code> expression\nAn index get operation.\nan indexing expression\nA let expression.\nA pattern match.\nA literal expression. With the addition of being able to …\nA <code>loop</code> expression.\na <code>loop</code> expression\na macro call expression\nA match expression.\na match expression\na match arm\nA match branch.\nAn object expression.\nan anonymous object expression\nthe operator in an expression\nA range expression.\na <code>&lt;start&gt;..&lt;end&gt;</code> expression\na <code>&lt;start&gt;..</code> expression\na <code>..</code> expression\na <code>&lt;start&gt;..=&lt;end&gt;</code> expression\nThe limits of the specified range.\na <code>..&lt;end&gt;</code> expression\na <code>..=&lt;end&gt;</code> expression\nA return expression.\na <code>return</code> expression\nA <code>select</code> expression that selects over a collection of …\na select expression\na select arm\nA single selection branch.\nA single selection branch.\nA try expression.\na try expression\nAn expression to construct a literal tuple.\na tuple expression\nA unary expression.\na unary expression\nA literal vector.\nA <code>while</code> loop.\na <code>while</code> expression\nA <code>yield</code> expression to return a value from a generator.\na <code>yield</code> expression\nThe <code>extern</code> keyword.\nThe <code>extern</code> keyword.\nThe <code>false</code> keyword.\nThe <code>false</code> keyword.\nA field as part of a struct or a tuple body.\na field declaration\nA field access on an expression.\nA single field assignment in an object expression.\nAn item body declaration.\nA rune file.\nThe <code>final</code> keyword.\nThe <code>final</code> keyword.\nA float literal number.\nThe <code>f64</code> suffix.\nThe <code>fn</code> keyword.\nThe <code>fn</code> keyword.\nA function declaration.\nA single argument in a closure.\na collection of function arguments\nThe <code>for</code> keyword.\nThe <code>for</code> keyword.\nAn for loop.\n<code>formatspec</code>.\nA path segment that is a generic argument.\nParses <code>[{( ... )}]</code> ensuring that the delimiter is balanced.\nA grouped expression.\nA grouped import.\n<code>&gt;</code>.\n<code>&gt;</code>.\nGreater-than check <code>a &gt; b</code>.\n<code>&gt;=</code>.\n<code>&gt;=</code>.\n<code>&gt;&gt;</code>.\n<code>&gt;&gt;</code>.\n<code>&gt;&gt;=</code>.\n<code>&gt;&gt;=</code>.\nGreater-than or equal check <code>a &gt;= b</code>.\nHalf-open range expression.\nA hex literal, like <code>0xffff</code>.\nAn identifier, like <code>foo</code> or <code>Hello</code>.\nAn identifier.\nA path that is the identifier.\nA path segment that is an identifier.\nThe <code>if</code> keyword.\nThe <code>if</code> keyword.\nAn if expression.\nAn ignored binding <code>_</code>.\nThe <code>impl</code> keyword.\nThe <code>impl</code> keyword.\nAn impl declaration.\nThe <code>in</code> keyword.\nThe <code>in</code> keyword.\nIn visibility <code>pub(in path)</code>.\nAn index set operation.\nA path with an associated item.\nAn inherited visibility level, this usually means private.\nThe char is inlined in the ast.\nAn inline body.\n<code>#</code>\nan inner attribute\nThe <code>i64</code> suffix.\nAn integer literal number.\nThe <code>is</code> keyword.\nThe <code>is</code> keyword.\nInstance of test <code>a is b</code>.\nThe composite <code>is not</code> operation.\nNegated instance of test <code>a is not b</code>.\nA declaration.\nan item declaration\nA declaration.\nAn item.\nItems.\nA const declaration.\na constant item\nAn enum item.\nan enum declaration\na file module declaration\nA function item.\na function declaration\nAn impl item.\nan impl\nA module declaration.\nA module item.\na module declaration\nAn item body.\nParsing an item or an expression.\nA struct item.\na struct declaration\nA <code>use</code> item.\na use declaration\na nested use group\nA single use declaration path.\na nested use path\nA use component.\nAn enum variant.\nHelper macro to reference a specific token kind, or short …\nThe kind of the token.\nA label, like <code>&#39;foo</code>.\nA label, like <code>&#39;loop</code>.\nThe <code>let</code> keyword.\nThe <code>let</code> keyword.\nA let expression.\nClosure has a list of arguments.\nA literal value,\na literal value\nA literal expression.\nA literal pattern. This is represented as an expression.\nThe boolean literal.\nA byte literal.\nA string literal.\nA character literal.\nA number literal.\nA literal number.\nThe kind of the identifier.\nA string literal.\nA literal string (with escapes).\n<code>literal</code>.\nA local variable declaration.\na variable declaration\nA local declaration.\nThe <code>loop</code> keyword.\nThe <code>loop</code> keyword.\nAn unconditional loop.\n<code>&lt;</code>.\n<code>&lt;</code>.\nLess-than check <code>a &lt; b</code>.\n<code>&lt;=</code>.\n<code>&lt;=</code>.\n<code>&lt;&lt;</code>.\n<code>&lt;&lt;</code>.\n<code>&lt;&lt;=</code>.\n<code>&lt;&lt;=</code>.\nLess-than or equal check <code>a &lt;= b</code>.\nThe <code>macro</code> keyword.\nThe <code>macro</code> keyword.\nA macro call.\nA macro call,\nA macro call expanding into an item.\nThe <code>match</code> keyword.\nThe <code>match</code> keyword.\nAn match expression.\nThe <code>mod</code> keyword.\nThe <code>mod</code> keyword.\nA module declaration.\nthe <code>(crate)</code> modifier\nthe <code>(in &lt;path&gt;)</code> modifier\nthe <code>(self)</code> modifier\nthe <code>(super)</code> modifier\nmodifiers\nThe <code>move</code> keyword.\nThe <code>move</code> keyword.\nMultiplication <code>a * b</code>.\nMultiply assign operation <code>a *= b</code>.\nA multiline comment where the boolean indicates if it’s …\nThe <code>mut</code> keyword.\nThe <code>mut</code> keyword.\nA named object.\nA regular body.\nNegation <code>-&lt;thing&gt;</code>.\nInequality check <code>a != b</code>.\nThe <code>not</code> keyword.\nThe <code>not</code> keyword.\nNot <code>!&lt;thing&gt;</code>.\nA resolved number literal.\nA number literal, like <code>42</code> or <code>3.14</code> or <code>0xff</code>.\nA number literal\nThe kind of a number literal.\nThe source of a number.\nThe suffix of a number.\nConfiguration of a text number.\nThe value of a number literal.\nAn object literal\nAn object pattern.\nA literal object identifier.\nPossible literal object keys.\nAn octal literal, like <code>0o7711</code>.\nThe <code>offsetof</code> keyword.\nThe <code>offsetof</code> keyword.\nAn open delimiter: <code>(</code>, <code>{</code>, or <code>[</code>.\nopening brace\nopening bracket\nopening marker\nopening parenthesis\nTypes for which we can optionally get a span.\nLazy or operator <code>||</code>.\nOther things, that should be processed last.\n<code>#!</code>\nThe <code>override</code> keyword.\nThe <code>override</code> keyword.\nA parenthesis delimiter <code>(</code> and <code>)</code>.\nParse something parenthesis, that is separated by …\nA pattern match.\na pattern\nA patterned branch.\nFunction argument is a pattern binding.\nan array pattern\nAn object item.\nAn ignore pattern.\nan ignore pattern\nA literal pattern.\nAn object pattern.\nan object pattern\nA path pattern.\nThe rest pattern <code>..</code> and associated attributes.\nA tuple pattern.\na tuple pattern\nAn array pattern.\nA path, where each element is separated by a <code>::</code>.\na path\nAn path expression.\nAn identifier.\nA path, usually an identifier.\nA variable binding <code>n</code>.\nthe generics of a path\nAn identified path kind.\nPart of a <code>::</code> separated path.\nA path segment.\nUsed to parse an expression without supporting an …\n<code>%</code>.\n<code>%</code>.\n<code>%=</code>.\n<code>%=</code>.\n<code>|</code>.\n<code>|</code>.\n|=`.\n|=`.\n<code>||</code>.\n<code>||</code>.\n<code>+</code>.\n<code>+</code>.\n<code>+=</code>.\n<code>+=</code>.\n<code>#</code>.\n<code>#</code>.\nThe <code>priv</code> keyword.\nThe <code>priv</code> keyword.\nThe <code>proc</code> keyword.\nThe <code>proc</code> keyword.\nThe <code>pub</code> keyword.\nThe <code>pub</code> keyword.\nAn unrestricted public visibility level: <code>pub</code>.\nThe <code>pure</code> keyword.\nThe <code>pure</code> keyword.\n<code>?</code>.\n<code>?</code>.\nA range expression.\nThe <code>ref</code> keyword.\nThe <code>ref</code> keyword.\nRemainder operator <code>a % b</code>.\nRemainder assign <code>a %= b</code>.\nThe rest pattern <code>..</code>.\nThe <code>return</code> keyword.\nThe <code>return</code> keyword.\nA return statement.\n<code>=&gt;</code>.\n<code>=&gt;</code>.\na syntax root\nThe <code>select</code> keyword.\nThe <code>select</code> keyword.\nA select expression.\nThe <code>Self</code> keyword.\nThe <code>Self</code> keyword.\nA path segment that contains <code>Self</code>.\nThe <code>self</code> keyword.\nThe <code>self</code> keyword.\nThe <code>self</code> parameter.\nA path that is the <code>self</code> value.\nA path segment that contains <code>self</code>.\nSelf visibility <code>pub(self)</code>.\nAn with a trailing semi-colon.\n<code>;</code>.\n<code>;</code>.\nThe shebang of a file.\nThe special initial line of a file shebang.\nBitwise left shift operator <code>a &lt;&lt; b</code>.\nLeft shift assign <code>a &lt;&lt;= b</code>.\nBitwise right shift operator <code>a &gt;&gt; b</code>.\nRight shift assign <code>a &gt;&gt;= b</code>.\nThe <code>sizeof</code> keyword.\nThe <code>sizeof</code> keyword.\n<code>/=</code>.\n<code>/=</code>.\nA span corresponding to a range in the source file being …\nTypes for which we can get a span.\n<code>*</code>.\n<code>*</code>.\n<code>*=</code>.\n<code>*=</code>.\nThe <code>static</code> keyword.\nThe <code>static</code> keyword.\nA statement within a block.\nA semi-terminated expression.\nKey used to stort a statement into its processing order.\nA string literal, including escape sequences. Like …\nA string literal\nThe source of the literal string. This need to be treated …\nConfiguration for a literal string.\nThe <code>struct</code> keyword.\nThe <code>struct</code> keyword.\nA struct declaration.\na struct body\nSubtraction <code>a - b</code>.\nSub assign <code>a -= b</code>.\nThe <code>super</code> keyword.\nThe <code>super</code> keyword.\nThe <code>super</code> keyword use as a path segment.\nSuper visibility <code>pub(super)</code>.\nThe identifier is synthetic (generated in a macro).\nThe string source is synthetic (generated in a macro).\nThe number is synthetic, and stored in the specified slot.\nHelper macro to reference a specific token.\n<code>template</code>.\na raw token stream\nThe identifier is from the source text.\nThe literal string source is from the source text.\nThe number is from the source text (and need to be parsed …\nThe item is from the source text (and need to be parsed …\n<code>~</code>.\n<code>~</code>.\nA single token encountered during parsing.\na raw token stream\nThe <code>true</code> keyword.\nThe <code>true</code> keyword.\nTry expression.\nA tuple literal\nA tuple pattern.\na tuple body\nThe <code>typeof</code> keyword.\nThe <code>typeof</code> keyword.\nA unary operation.\nA unary expression.\n<code>_</code>.\n<code>_</code>.\nA tuple body.\nThe <code>unsafe</code> keyword.\nThe <code>unsafe</code> keyword.\nThe <code>use</code> keyword.\nThe <code>use</code> keyword.\nA use declaration.\nUSe statements, that should be processed first.\na variant\nA vec literal\nA vector pattern.\nThe <code>virtual</code> keyword.\nThe <code>virtual</code> keyword.\nVisibility level restricted to some path.\nThe <code>while</code> keyword.\nThe <code>while</code> keyword.\nA while loop.\nwhitespace.\nA wildcard import.\nThe <code>yield</code> keyword.\nThe <code>yield</code> keyword.\nA yield expression.\nThe alias of the import.\nValues in the type.\nThe arguments of the function call.\nArguments to the closure.\nThe arguments of the function.\nGet the group values as a mutable slice.\nGet the group values as a mutable slice.\nGet the group values as a mutable slice.\nGet the group values as a mutable slice.\nGet the group values as a slice.\nGet the group values as a slice.\nGet the group values as a slice.\nGet the group values as a slice.\nThe assigned expression of the field.\nAssignments in the object.\nThe optional async token.\nIf the closure is async or not.\nThe optional <code>async</code> keyword.\nAttributes associated with the assign expression.\nAttributes associated with expression.\nAttributes associated with the binary expression.\nThe attributes for the block.\nThe attributes of the <code>break</code> expression\nAttributes associated with expression.\nThe attributes for the async closure\nThe attributes of the <code>break</code> expression\nAttributes associated with expression.\nAttributes associated with expression.\nThe attributes of the <code>for</code> loop\nAttributes associated with expression.\nThe <code>attributes</code> of the if statement\nAttributes associated with expression.\nThe attributes for the let expression\nAttributes associated with the literal expression.\nThe attributes for the <code>loop</code>\nThe attributes for the match expression\nAttributes associated with object.\nAttributes associated with the assign expression.\nThe attributes of the <code>return</code> statement.\nThe attributes of the <code>select</code>\nAttributes associated with expression.\nAttributes associated with tuple.\nAttributes associated with expression.\nAttributes associated with vector.\nThe attributes for the <code>while</code> loop\nThe attributes of the <code>yield</code>\nTop level “Outer” <code>#![...]</code> attributes for the file\nThe <em>inner</em> attributes that are applied to the const …\nThe attributes for the enum block\nThe attributes associated with the variant.\nThe attributes for the fn\nThe attributes of the <code>impl</code> block\nThe <em>inner</em> attributes are applied to the module  …\nThe attributes for the struct\nAttributes associated with field.\nThe attributes on use item\nThe attributes for the let expression\nAttributes associated with macro call.\nAttributes associated with the pattern.\nAttribute associated with the rest pattern.\nAttributes associated with the vector pattern.\nAttributes associated with the object pattern.\nAttributes associated with the object pattern.\nAttributes associate with the binding.\nAttributes associate with the path.\nAttributes associate with the pattern.\nThe await token.\nBang operator <code>!</code>.\nThe number literal kind.\nThe pattern binding to use. Non-trivial pattern bindings …\nThe close brace.\nThe body of the if statement.\nThe body of the else statement.\nThe body of the else statement.\nThe body of the closure.\nThe body of the loop.\nThe body of the loop.\nThe body of the match.\nThe body of the expression.\nThe body of the expression.\nThe body of the while loop.\nThe body of the variant.\nThe body of the function.\nThe optional body of the module declaration.\nThe body of the struct.\nValues in the type.\nValues in the type.\nBranches.\nThe branches of the select.\nThe return token.\nThe <code>]</code> character\nThe close brace.\nThe close parenthesis.\nThe close parenthesis.\nThe closening bracket.\nThe close brace of the match.\nThe close brace.\nThe close parenthesis.\nThe close parenthesis.\nThe close parenthesis.\nThe close parenthesis.\nThe close brace.\nThe close brace.\nClosing token.\nThe closing delimiter.\nThe colon separator for the binding.\nThe condition to the if statement.\nThe condition for the branch.\nThe branch condition.\nThe name of the binding.\nThe optional const token.\nThe <code>const</code> keyword.\nThe optional <code>const</code> keyword.\nThe content between the delimiters.\nThe return token.\nThe <code>default</code> keyword.\nThe dot separating the expression.\nThe parsed dot separator.\nThe rest token <code>..</code>.\nThe <code>else</code> token.\nThe <code>else</code> token.\nConstant function to build an empty span.\nEnd of range.\nThe end of the span in bytes.\nThe <code>enum</code> token.\nThe equals sign <code>=</code>.\nThe equality token.\n<code>=</code>.\nThe equals token.\nThe equality keyword.\nThe <code>=</code> token.\nIndicates if the string is escaped or not.\nThe expression being awaited.\nAn expression to break with.\nThe name of the function being called.\nThe grouped expression.\nThe expr where the field is being accessed.\nThe grouped expression.\nThe expression the binding is assigned to.\nThe expression who’s result we match over.\nAn optional expression to return.\nThe expression that should evaluate to a future.\nThe expression being awaited.\nThe expression of the operation.\nAn optional expression to yield.\nThe optional body of the module declaration.\nThe expression the binding is assigned to.\nThe literal expression.\nThe expression that makes up the path segment.\nThe expression that is considered to be semi-terminated.\nThe else part of the if expression.\nElse if branches.\nThe field being accessed.\nA nested “file” declaration.\nGet the first element in the group.\nGet the first element in the group.\nGet the first element in the group.\nGet the first element in the group.\nThe first use component.\nThe first component in the path.\nThe <code>fn</code> token.\nThe <code>for</code> keyword.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe collection of functions.\nGlobal prefix.\nThe optional leading colon <code>::</code> indicating global scope.\nThe <code>#</code> character\nGet the head of the span.\nAn object identifier.\nThe identifier of the struct declaration.\nThe identifier of the object pattern.\nThe <code>if</code> token.\nThe <code>if</code> token.\nThe <code>impl</code> keyword.\nThe <code>in</code> keyword.\nThe indexing expression.\nThe input to the input of the attribute\nThe tokens provided to the macro.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a byte index into a usize.\nThe <code>is</code> token.\nTest if group is empty.\nTest if group is empty.\nTest if group is empty.\nTest if group is empty.\nIndicates if it’s a decimal number.\nReturn <code>true</code> if it is the <code>Inherited</code> variant\nReturn <code>true</code> if the module is public.\nGet the identifying span for this closure.\nItems in the tuple.\nItems in the vector.\nAll the declarations in a file.\nBracketed patterns.\nThe items in the tuple.\nThe fields matched against.\nIterate over elements in the group.\nIterate over elements in the group.\nIterate over elements in the group.\nIterate over elements in the group.\nExpression producing the iterator.\nIterate mutably over elements in the group.\nIterate mutably over elements in the group.\nIterate mutably over elements in the group.\nIterate mutably over elements in the group.\nJoin two spans creating the larger of the two spans.\nThe key of the field.\nThe key of an object.\nThe kind of the token.\nAn optional label for the block.\nA label to break to.\nAn optional label to continue to.\nThe label of the loop.\nA label followed by a colon.\nA label for the while loop.\nGet the last element in the group.\nGet the last element in the group.\nGet the last element in the group.\nGet the last element in the group.\nGet the length of elements in the group.\nGet the length of elements in the group.\nGet the length of elements in the group.\nGet the length of elements in the group.\nThe <code>let</code> token.\nThe <code>let</code> keyword.\nThe expression being assigned to.\nThe left-hand side of a binary operation.\nThe range limits.\nThe literal in the expression.\nThe <code>loop</code> keyword.\nThe <code>match</code> token.\nThe <code>mod</code> keyword.\nThe optional move token.\nIf the closure moves data into it.\nThe <code>mut</code> token.\nThe <code>mut</code> token.\nThe name of the constant.\nThe name of the enum.\nThe name of the variant.\nThe name of the function.\nThe name of the mod.\nName of the field.\nNarrow the span with the given amount.\nConstruct a new span.\nThe <code>not</code> token.\nThe number part of the parsed number.\nThe operator.\nThe operation to apply.\nThe <code>[</code> character\nThe close brace.\nThe open parenthesis.\nThe open parenthesis.\nThe opening bracket.\nThe open brace of the match.\nThe open brace.\nThe open parenthesis.\nThe open parenthesis.\nThe open parenthesis.\nThe open parenthesis.\nThe open brace.\nThe open brace.\nOpening token.\nThe opening delimiter.\nGet the optional span of the type.\nValues in the type.\nParse with the first element already specified.\nParse with the first element already specified.\nParse with the first element already specified.\nParse with the first element already specified.\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nParse #ident and attach the given meta\nThe name of the binding.\nThe pattern to match.\nThe identifier to bind the result to.\nThe name of the binding.\nWhat the binding is to.\nThe path of the attribute\nPath of the implementation.\nItem path.\nThe expression being called over.\nThe path, if the tuple is typed.\nThe path of the pattern.\nGet a span corresponding to a single point where both …\nGet the span as a range of usize.\nThe rest of the components in the path.\nThe return token.\nThe value.\nThe right-hand side of a binary operation.\nThe rocket token.\n<code>=&gt;</code>.\n<code>=&gt;</code>.\nOptional segments.\nThe <code>select</code> keyword.\nTrailing semicolon of the local.\nThe semi-token associated with the expression.\nTop-level shebang.\nThe source of the shebang.\nThe kind of the identifier.\nThe source of the label.\nThe source of the byte.\nIf the string literal is escaped.\nThe source of the literal character.\nThe source of the number.\nThe source of the literal string.\nThe source of the text.\nThe source of the text.\nGet the span of the type.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nAssociated span.\nThe span of the shebang.\nThe span of the identifier.\nThe token of the label.\nThe span corresponding to the literal.\nThe span corresponding to the literal.\nThe span corresponding to the literal.\nThe span corresponding to the literal.\nThe span corresponding to the literal.\nThe span corresponding to the literal.\nThe span of the token.\nAssociated token.\nAssociated token.\nAssociated token.\nAssociated token.\nAssociated token.\nAssociated token.\nAssociated token.\nAssociated token.\nStart of range.\nThe start of the span in bytes.\nStatements in the block.\nStatements in the block.\nThe <code>struct</code> keyword.\nSpecify if the attribute is outer <code>#!</code> or inner <code>#</code>\nThe parsed number suffix.\nThe suffix.\nGet the tail of the span.\nThe target of the index set.\nTrailing scope.\nThe try operator <code>?</code>.\nThe ignore token<code>_</code>.\nThe use token.\nThe value of the literal.\nThe parsed number value.\nThe remainder.\nVariants in the enum.\nThe visibility of the const.\nThe visibility of the <code>enum</code> item\nThe visibility of the <code>fn</code> item\nThe visibility of the <code>mod</code> item\nThe visibility of the <code>struct</code> item\nThe visibility of the field\nThe visibility of the <code>use</code> item\nThe <code>while</code> keyword.\nIndicated if the buffer is wrapped or not.\nThe return token.\nThe arguments of the function.\nThe closening pipe for the argument group.\nThe opening pipe for the argument group.\nThe <code>||</code> token.\nType used to build a context.\nOptions for building context.\nA rune-based entrypoint used for custom applications.\nSet about string used in cli output.\nIf we need to capture I/O this is set to the capture …\nConfigure context to use using a builder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEntry point.\nRun the configured application.\nRun the configured application without starting a new …\nIf we’re running in a test context.\nThe generic name of the named thing.\nA visitor that will be called for every language item …\nContext used for the Rune language.\nAn error raised when building the context.\nContains the error value\nAn error raised by the compiler.\nA filesystem-based source loader.\nA single step in an import.\nThe identifier of an item.\nErrors that can be raised when linking units.\nTrait for things that have a Location.\nA fully descriptive location which is a combination of a …\nA meta error.\nProvides an owned human-readable description of a meta …\nThe trait used for something that can be statically named.\nA source loader which does not support loading anything …\nContains the success value\nOptions that can be provided to the compiler.\nError raised when trying to parse an invalid option.\nHelper alias for compile results.\nA source loader.\nGet located item as spanned.\nGet a list and documentation for all available compiler …\nSet if bytecode caching is enabled or not. Defaults to …\nSet if debug info is enabled or not. Defaults to <code>true</code>.\nError when we got mismatched meta.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct lossy rune options from the <code>RUNEFLAGS</code> …\nThe exact type name\nThe exact type name\nInstall the specified module.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe item being imported.\nSet if link checks are enabled or not. Defaults to <code>true</code>. …\nLoad the given URL.\nGet the assocaited location.\nThe location of the import.\nLookup deprecation by function hash.\nSet if macros are enabled or not. Defaults to <code>false</code>.\nMemoize the instance function in a loop. Defaults to <code>false</code>.\nCompiler metadata for Rune.\nConstruct an error which is made of a single message.\nConstruct a new empty Context.\nConstruct a new filesystem-based source loader.\nParse a compiler option. This is the function which parses …\nCalled when a meta item is registered.\nCalled when a meta item is registered.\nConstruct a runtime context used when executing the …\nThe source id of the file of the location.\nThe span of the location.\nEnable the test configuration flag.\nVisit anterior <code>///</code>-style comments, and interior <code>//!</code>-style …\nVisit anterior <code>///</code>-style comments, and interior <code>//!</code>-style …\nVisit anterior <code>///</code>-style comments, and interior <code>//!</code>-style …\nVisit anterior <code>///</code>-style comments, and interior <code>//!</code>-style …\nMark that we’ve resolved a specific compile meta at the …\nMark that we’ve resolved a specific compile meta at the …\nVisit something that is a module.\nVisit something that is a module.\nVisit a variable use.\nVisit a variable use.\nConstruct a Context containing the default set of modules …\nConstruct a new collection of functions with default …\nA context alias.\nA re-export.\nThe kind of an associated function.\nAn async block.\nAn attribute macro item.\nA closure.\nThe constant expression.\nA constant function.\nA description of a type.\nEmpty.\nAn enum item.\nA field function with the given protocol.\nMetadata for a single named field.\nThe kind of a variant.\nMetadata about named fields.\nA function declaration.\nAn imported entry.\nPurely an import.\nAn index function with the given protocol.\nThe instance function refers to the given named instance …\nCompile-time metadata kind about a unit.\nA macro item.\nA meta reference to an item being compiled.\nA module.\nNamed fields.\nA protocol function implemented on the type itself.\nA description of a function signature.\nInformation on a compile sourc.\nMetadata about a struct.\nA trait.\nThe type is completely opaque. We have no idea about what …\nUnnamed fields.\nMetadata about an empty variant.\nIf the meta comes from the context or not.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe hash of a meta item.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe item being described.\nThe kind of the item.\nThe location of the compile source.\nThe optional path where the meta is declared.\nThe source of the meta.\nConstruct type documentation.\nThe associated kind of the function, if it is an associated\nRuntime calling convention.\nRuntime calling convention.\nNative constructor for this struct.\nNative constructor for this variant.\nThe container of the associated function.\nIf the closure moves its environment.\nIf the async block moves its environment.\nType hash of the enum this unit variant belongs to.\nFields information.\nFields information.\nThe index of the variant.\nWhether this function has a <code>#[bench]</code> annotation.\nWhether this function has a <code>#[test]</code> annotation\nParameter types.\nHash of generic parameters.\nHash of generic parameters.\nHash of generic parameters.\nHash of generic parameters.\nNative signature for this function.\nThe hash of the trait this function is associated with.\nAllocation error.\nCodespan reporting error.\nA single diagnostic.\nStructure to collect compilation diagnostics.\nErrors that can be raised when formatting diagnostics.\nA fatal diagnostic.\nFatal diagnostic emitted during compilation. Fatal …\nThe kind of a FatalDiagnostic.\nAn internal error.\nSource Error.\nA runtime warning diagnostic.\nRuntime Warning diagnostic emitted during the execution of …\nA warning diagnostic.\nWarning diagnostic emitted during compilation. Warning …\nAccess underlying diagnostics.\nGenerate formatted diagnostics capable of referencing …\nGenerate formatted diagnostics capable of referencing …\nGenerate formatted diagnostics capable of referencing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if diagnostics has any errors reported.\nCheck if diagnostics has any warnings reported.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into underlying diagnostics.\nThe instruction pointer of the vm where the warning …\nIndicate if there is any diagnostics.\nThe kind of the load error.\nConstruct a new, empty collection of compilation warnings.\nThe source id where the error originates from.\nThe source id where the warning originates from.\nGet the span of the warning.\nConstruct a new, empty collection of compilation warnings …\nError during formatting.\nA prepared formatting operation.\nFormat the given sources.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFormat the given source.\nAssociate diagnostics with the build.\nAssociate options with the build.\nThe primitive hash that among other things is used to …\nTrait for types which can be converted into a Hash.\nHelper to build a parameters hash.\nHelper trait used to convert a type into a type hash.\nAdd a hash to the collection of parameters.\nFinish building the parameters hash.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert current type into a hash.\nConstruct a new collection of parameters.\nThe component of an item.\nA reference to a component of an item.\nA crate component.\nA crate string component.\nA nested anonymous part with an identifier.\nA nested anonymous part with an identifier.\nTrait for encoding the current type into a Component.\nThe reference to an ItemBuf.\nThe name of an item in the Rune Language.\nA regular string component.\nA regular string component.\nConvert into a component directly.\nConvert into component reference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the identifier of the component.\nGet the identifier of the component if it is an identifier …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into component.\nCoerce this ComponentRef into an owned Component.\nTypes to deserialize.\nRun a language server with the given options.\nA synthetic byte string.\nA format specification: A format string followed by …\nA synthetic identifier,\nHelper trait used for things that can be converted into …\nA synthetic label.\nContext for a running macro.\nA synthetic number.\nToTokens implementation generated by quote_fn.\nA synthetic string.\nA synthetic identifier which can be used to reference …\nThe kind of a synthetic token.\nTrait for things that can be turned into tokens.\nA token stream.\nA token stream iterator.\nEvaluate the given target as a constant expression.\nExpand the format specification.\nExtend the token stream with another iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new identifier from the given string from …\nThe span of the macro stream (the argument).\nInsert the given source so that it has a SourceId that can …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the current thing into a token.\nConvert into token stream.\nReturn something that once formatted will produce a stream …\nConstruct a new label from the given string. The string …\nConstruct a new literal from within a macro context.\nThe span of the macro call including the name of the macro.\nConstruct an empty token stream for testing.\nParse format arguments inside of a macro.\nParse the given input as the given type that implements …\nPush the current token to the stream.\nMacro helper function for quoting the token stream as …\nConstruct a token stream from a function.\nResolve the value of a token.\nStringify the token stream.\nConstruct an empty macro context which can be used for …\nTurn the current item into tokens.\nAccess enum metadata mutably.\nTrait to handle the installation of auxilliary functions …\nAccess internal enum metadata mutably.\nHandle to a an item inserted into a module which allows …\nHandle to a an item inserted into a module which allows …\nA Module that is a collection of native functions and …\nRaw function builder as returned by <code>Module::raw_function</code>.\nFunction builder as returned by <code>Module::function</code>.\nType used to collect and store module metadata through the …\nRaw function builder as returned by <code>Module::raw_function</code>.\nHandle to a a trait inserted into a module which allows …\nHandle to a a type inserted into a module which allows for …\nHandle to a a variant inserted into a module which allows …\nIndicate the number of arguments this function accepts.\nSet argument types.\nRegister an instance function.\nSee <code>Module::function</code>.\nSee <code>Module::associated_function</code>.\nRegister a native attribute macro handler.\nConstruct a regular function.\nConstruct a regular function.\nAdd the free constant directly to the module.\nConstruct a function that is associated with <code>T</code>.\nConstruct a function that is associated with <code>T</code>.\nBuild a constant that is associated with the static type <code>T</code>.\nConstruct a function that is associated with a custom …\nConstruct a function that is associated with a custom …\nRegister a constant value, at a crate, module or …\nRegister a constructor method for the current variant.\nRegister a constructor method for the current type.\nDefine a new trait.\nMark the given item as deprecated.\nMark the given trait as deprecated.\nMark the given item as deprecated.\nMark the given type as deprecated.\nMark the given type as deprecated.\nSet documentation for an inserted item.\nSet documentation for an inserted trait.\nSet documentation for an inserted item.\nSet documentation for an inserted type.\nSet documentation for an inserted type.\nSet documentation for an inserted internal enum.\nSet documentation for an inserted type.\nSee <code>Module::field_function</code>.\nInstall a protocol function that interacts with the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new module from the given module meta.\nDefine a function on the trait.\nRegister a function.\nSee <code>Module::function</code>.\nRegister a function handler through its meta.\nConstruct the type information for the <code>GeneratorState</code> type.\nDefine a trait handler.\nImplement the trait <code>trait_item</code> for the type <code>T</code>.\nSee <code>Module::index_function</code>.\nInstall a protocol function that interacts with the given …\nSee <code>Module::associated_function</code>.\nHook to install more things into the module.\nHook to install more things into the module.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMark the given item as an async function.\nMutate item-level properties for this module.\nRegister a native macro handler.\nRegister a native macro handler through its meta.\nMark the given variant as empty.\nMark the current type as an empty struct.\nMark the current type as an enum.\nMark the given variant with named fields.\nMark the current type as a struct with named fields.\nMark the given variant with unnamed fields.\nMark the current type as a struct with unnamed fields.\nCreate an empty module for the root path.\nConstruct type information for the <code>Option</code> type.\nSee <code>Module::raw_function</code>.\nRegister a raw function which interacts directly with the …\nDefine a re-export.\nConstruct type information for the internal <code>Result</code> type.\nSet the kind of return type.\nSet static documentation.\nSet static documentation.\nSet static documentation.\nSet static documentation.\nSet static documentation for an inserted internal enum.\nSet static documentation.\nRegister that the given type is a struct, and that it has …\nRegister a type. Registering a type is mandatory in order …\nAccessor to modify type metadata such as documentaiton, …\nRegister a variant constructor for type <code>T</code>.\nAccess variant metadata for the given type and the index …\nGet the given variant mutably.\nGet the given variant mutably.\nConstruct a new module for the given crate.\nConstruct a new module for the given crate.\nConstruct a new module for the given item.\nDynamic typing and type reflection.\nThe bytes module.\nI/O module capable of capturing what’s been written to a …\nThe character module for Rune.\nThe cloning trait for Rune.\nComparison and ordering.\nDynamic collections.\nCore types and methods in Rune.\nI/O methods which will cause any output to be ignored.\nFloating point numbers.\nFormatting text.\nAsynchronous computations.\nGenerators.\nHashing types.\nIntegers.\nI/O functions.\nIterators.\nMacro support.\nWorking with memory.\nWorking with numbers.\nThe dynamic <code>Object</code> container.\nOverloadable operators and associated types.\nThe <code>Option</code> type.\nThe <code>Result</code> type.\nTypes relates to working with slices.\nAsynchronous streams.\nStrings.\nTesting and benchmarking.\nThe <code>Tuple</code> fixed collection.\nThe <code>Vec</code> dynamic vector.\nDynamic typing and type reflection.\nThe bytes module.\nType which captures output from rune scripts.\nDrain all captured I/O that has been written to output …\nDrain all captured I/O that has been written to output …\nDrain all captured I/O that has been written to output …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nI/O module capable of capturing what’s been written to a …\nConstruct a new capture.\nThe character module for Rune.\nCloning for Rune.\nComparison and ordering.\nModule defining collections.\nCore types and methods in Rune.\nI/O methods which will cause any output to be ignored.\nFloating point numbers.\nFormatting text.\nAsynchronous computations.\nGenerators.\nHashing types.\nIntegers.\nI/O functions.\nRune support for iterators.\nBuilt-in macros.\nMacro support.\nBuilt-in macros.\nWorking with memory.\nWorking with numbers.\nThe dynamic <code>Object</code> container.\nOverloadable operators and associated types.\nOverloadable operators and associated types.\nTypes related to generators.\nThe <code>Option</code> type.\nThe <code>Result</code> type.\nTypes related to working with contiguous slices.\nAsynchronous streams.\nStrings.\nA helper type to capture benchmarks.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCoerce bencher into its underlying functions.\nTesting and benchmarking.\nThe <code>Tuple</code> fixed collection.\nThe <code>Vec</code> dynamic vector.\nEnvironment that needs to be stored somewhere.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInitialize an empty raw environment.\nDefines a static budget and environment implementation …\nA bolean.\nA comment.\nA delimiter.\nA static description.\nSomething that describes an expectation or actuality.\nAn expression.\nA keyword like <code>await</code>.\nA literal.\nAn open delimiter.\nThe parse trait, implemented by items that can be parsed.\nParser for the rune language.\nImplemented by tokens that can be peeked for.\nConstruct used to peek a parser.\nA punctuation which can be a sequence of characters, like …\nA shebang.\nExpected a specific kind of syntax node.\nAssert that the parser has reached its end-of-file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a parser from a token stream. The second …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest if the parser is at end-of-file, after which there is …\nConstruct a new parser around the given source.\nParse the current item from the parser.\nParse a specific item from the parser.\nParse the given input as the given type that implements …\nParse a specific item from the parser and then expect end …\nPeek the parser for the given token.\nPeek for the given token.\nTry to consume a single thing matching <code>T</code>, returns <code>true</code> if …\nTry to consume all things matching <code>T</code>, returns <code>true</code> if any …\nThe function to implement for the addition operation.\nThe function to implement for the addition assign …\nAn error raised when failing to access a value.\nThe add operation. <code>a + b</code>.\nThe add operation. <code>a + b</code>.\nTarget is an offset to the current call frame.\nMake sure that the memory region has <code>size</code> slots of memory …\nPop two values from the stack and test if they are both …\nA type-erased wrapper for a reference, whether it is …\nErrors caused when accessing or coercing an <code>AnyObj</code>.\nType information for the <code>Any</code> type.\nTrait for converting arguments onto the stack.\nCoerce a value into the given type.\nA built-in operation that assigns to the left-hand side …\nFunction is <code>async</code> and returns a future that must be …\nAwait the future that is on the stack and push the value …\nThe function to implement for the bitwise and operation.\nThe function to implement for the bitwise and assign …\nThe function to implement for the bitwise or operation.\nThe function to implement for the bitwise xor assign …\nThe function to implement for the bitwise xor operation.\nThe function to implement for the bitwise xor assign …\nThe bitwise and operation. <code>a &amp; b</code>.\nThe bitwise and operation. <code>a &amp; b</code>.\nThe bitwise or operation. <code>a | b</code>.\nThe bitwise or operation. <code>a | b</code>.\nThe bitwise xor operation. <code>a ^ b</code>.\nThe bitwise xor operation. <code>a ^ b</code>.\nA boolean constant value.\nA boolean.\nGuard for data exclusively borrowed from a slot in the …\nGuard for a data borrowed from a slot in the virtual …\nExit the operation without running subsequent phases.\nA byte.\nA byte.\nA vector of bytes.\nA byte string.\nLoad a literal byte string from a static byte string slot.\nProtocol used when cloning a value.\nPerform an total comparison between two values.\nThe calling convention of a function.\nCall a function by hash.\nCall an associated function.\nPerform a function call on a function pointer stored on …\nA call frame.\nPerform a function call within the same unit.\nA character.\nA character.\nConstruct a closure that takes the given number of …\nThe generator completed.\nA constant value.\nMove on to the next phase of the operation as normal.\nUsed to tell an operation whether it should exit early or …\nCopy a variable from a location <code>offset</code> relative to the …\nThe function to implement for the division operation.\nThe function to implement for the division assign …\nA label that can be jumped to.\nThe division operation. <code>a / b</code>.\nThe division operation. <code>a / b</code>.\nDrop the value in the given frame offset, cleaning out it…\nCheck two types for total equality.\nA unit variant.\nA empty with a well-defined type.\nConstruct a push an object of the given type onto the …\nTake the tuple that is on top of the stack and push its …\nCompare two values on the stack for equality and push the …\nTest if the top of the stack is a specific boolean.\nTest if the top of the stack is a specific byte.\nCompare the top of the stack against a static bytes slot.\nTest if the top of the stack is a specific character.\nTest if the top of the stack is a specific integer.\nCompare the top of the stack against a static string slot.\nMultiple errors with locations included.\n<code>Result::Err</code>, which uses one value.\nTarget the field of an object.\nTrait for converting arguments into an array.\nAn float constant.\nA float.\nPush a combined format specification and value onto the …\nA formatter for the rune virtual machine.\nTrait for converting types from the dynamic Value …\nDerive macro for the <code>FromValue</code> trait for converting types …\nThe type of a function in Rune.\nA type-erased future that can only be unsafely polled in …\nTried to poll a future that has already been completed.\nThe function to access a field.\nThe return value of a function producing a generator.\nFunction produces a generator.\nThe state of a generator.\nA generator state type, and the specified variant index.\nCompare two values on the stack for gt and push the result …\nCompare two values on the stack for gte and push the …\nThe raw guard returned.\nThe raw guard returned.\nThe raw guard returned.\nGuard that when dropped will invalidate any values encoded.\nThe type used to guard the unsafe value conversion.\nTrait for converting arguments onto the stack.\nProtocol used when calculating a hash.\nThe complete type hash of the type including type …\nThe default hasher used in Rune.\nThe function to access an index.\nThe function to set an index.\nFunction used to convert an argument into a future.\nFunction used to convert an argument into an iterator.\nCoerce a value into a type name. This is stored as a …\nAn invalid address.\nFunction used to test if a value is a specific variant.\nFunctions are immediately called and control handed over.\nPerform an index get operation. Pushing the result on the …\nPerform an index set operation.\nAn operation in the stack-based virtual machine.\nHow an instruction addresses a value.\nAn operation between two values on the machine.\nAn operation between two values on the machine.\nRange limits of a range expression.\nThe target of an operation.\nA literal value that can be pushed.\nA variant that can be constructed.\nAn integer constant.\nAn integer.\nTrait used to coerce values into outputs.\nTest if the top of the stack is an instance of the second …\nTest if the top of the stack is not an instance of the …\nTest if the top of the stack is a unit.\nIndicating the kind of isolation that is present for a …\nThe frame is isolated, once pop it will cause the …\nAdvance an iterator at the given position.\nAn owning iterator.\nUnconditionally jump to <code>offset</code> relative to the current …\nJump to <code>offset</code> relative to the current instruction pointer …\nJump to the given offset If the top of the stack is false.\nProtocol used when getting the exact length of an iterator.\nLoad the given function by hash and push onto the stack.\nLook up an instance function.\nCompare two values on the stack for lt and push the result …\nCompare two values on the stack for lte and push the …\nThe function to implement for the multiply operation.\nThe function to implement for the multiply assign …\nTest if the top of the stack is the given builtin type or …\nTest that the top of the stack is an object matching the …\nTest that the top of the stack is a tuple with the given …\nTest that the top of the stack has the given type.\nTest if the specified variant matches. This is distinct …\nA type that might or might not have a concrete type.\nMemory access.\nMove a variable from a location <code>offset</code> relative to the …\nThe multiply operation. <code>a * b</code>.\nThe multiply operation. <code>a * b</code>.\nA strong mutable reference to the given type.\nThe function to call to continue iteration.\nProtocol used when cloning a value.\nThe function to call to continue iteration at the nth …\nThe function to call to continue iteration at the nth …\nNegate the numerical value on the stack.\nCompare two values on the stack for inequality and push …\n<code>Option::None</code>, which uses no values.\nNo isolation is present, the vm will continue executing.\nNot operator. Takes a boolean from the top of the stack  …\nNot implemented.\nStruct representing a dynamic anonymous object.\nAn anonymous object.\nMatches an anonymous object.\nConstruct a push an object onto the stack. The number of …\nGet the given index out of an object from the given …\nSet the given index out of an object on the top of the …\nA produced value.\n<code>Result::Ok</code>, which uses one value.\nA built-in operation like <code>a + b</code> that takes its operands …\nAn option.\nAn option type, and the specified variant index.\nPop two values from the stack and test if either of them …\nWhat to do with the output of an instruction.\nThe output type from the unsafe coercion.\nStruct representing a dynamic anonymous object.\nType parameters for the type.\nType parameters for the type.\nPerform an partial comparison between two values.\nCheck two types for partial equality.\nCause the VM to panic and error out without a reason.\nPre-canned panic reasons.\nA built in instance function.\nThe function to implement for the remainder operation.\nThe function to implement for the remainder assign …\nType for a range expression <code>start..end</code>.\nConstruct a range.\n<code>start..end</code>.\nType for a from range expression <code>start..</code>.\n<code>start..</code>.\nType for a full range expression <code>..</code>.\n<code>..</code>.\nType for an inclusive range expression <code>start..=end</code>.\n<code>start..=end</code>.\nType for an inclusive range expression <code>..end</code>.\n<code>..end</code>.\nType for an inclusive range expression <code>..=end</code>.\n<code>..=end</code>.\nA raw guard for a <code>Ref</code> or a <code>Mut</code> that has been converted …\nA raw static string.\nThe guard returned by Value::into_any_mut_ptr.\nA strong reference to the given type.\nThe remainder operation. <code>a % b</code>.\nThe remainder operation. <code>a % b</code>.\nA result type, and the specified variant index.\nPop the current stack frame and restore the instruction …\nPop the current stack frame and restore the instruction …\nRuntime information on variant.\nStatic run context visible to the virtual machine.\nAn opaque simple runtime error.\nThe function to set a field.\nThe function to implement for the bitwise shift left …\nThe function to implement for the bitwise shift left …\nThe function to implement for the bitwise shift right …\nThe function to implement for the bitwise shift right …\nProtocol used when getting the size hint of an iterator.\nProtocol function used by custom debug impls.\nProtocol function used by template strings.\nThe function to implement for the subtraction operation.\nThe function to implement for the subtraction assign …\nSelect over <code>len</code> futures stored at address <code>addr</code>.\nThe shift left operation. <code>a &lt;&lt; b</code>.\nThe shift left operation. <code>a &lt;&lt; b</code>.\nThe shift right operation. <code>a &lt;&lt; b</code>.\nThe shift right operation. <code>a &lt;&lt; b</code>.\nAn error raised when accessing a slice on the stack.\n<code>Option::Some</code>, which uses one value.\nThe stack of the virtual machine, where all values are …\nAn error raised when accessing an address on the stack.\nStruct representing a static string.\nStatic type information.\nPush a value onto the stack.\nA stream with a stored virtual machine.\nFunction produces a stream, also known as an async …\nA string constant designated by its slot.\nLoad a literal string from a static string slot.\nPop the given number of values from the stack, and …\nAn object with a well-defined type.\nConstruct a struct of type <code>hash</code> at <code>out</code>, populating it with …\nA struct variant.\nConstruct a push an object variant of the given type onto …\nThe sub operation. <code>a - b</code>.\nThe sub operation. <code>a - b</code>.\nSwap two values on the stack using their offsets relative …\nA callable sync function. This currently only supports a …\nFunction used for the question mark operation.\nTrait for converting types into the dynamic <code>Value</code> …\nDerive macro for the <code>ToValue</code> trait for converting types …\nPerform the try operation which takes the value at the …\nThe type of a tuple slice.\nAn anonymous tuple.\nMatches an anonymous tuple.\nConstruct a tuple at <code>out</code>, populating it with <code>count</code> …\nA tuple variant.\nConstruct a one element tuple at <code>out</code>, populating it with …\nConstruct a two element tuple at <code>out</code>, populating it with …\nConstruct a three element tuple at <code>out</code>, populating it with …\nConstruct a four element tuple at <code>out</code>, populating it with …")