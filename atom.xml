<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>The Rune Programming Language</title>
	<subtitle>Party dynamically like it&#x27;s 1995</subtitle>
	<link href="https://rune-rs.github.io/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://rune-rs.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-10-19T00:00:00+00:00</updated>
	<id>https://rune-rs.github.io/atom.xml</id>
	<entry xml:lang="en">
		<title>Fixing a common miscompilation in Rune</title>
		<published>2020-10-19T00:00:00+00:00</published>
		<updated>2020-10-19T00:00:00+00:00</updated>
		<link href="https://rune-rs.github.io/posts/common-miscompilation/" type="text/html"/>
		<id>https://rune-rs.github.io/posts/common-miscompilation/</id>
		<content type="html">&lt;p&gt;Hopefully it should be no secret that Rune is a young project. And some
shortcuts have been taken when putting together the compiler. One such was how
items and their associated metadata was registered.&lt;&#x2F;p&gt;
&lt;p&gt;This particular shortcut happened to be subject to a common source of bugs which
desperately needed to be fixed. So in this post I&#x27;ll describe the issue in the
hopes that it will be useful to other prospective language authors, and describe
how it was fixed.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Relevant pull requests: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;118&quot;&gt;#118&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;127&quot;&gt;#127&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Feel free to &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;jdvc8r&#x2F;this_month_and_a_half_in_rune&#x2F;&quot;&gt;&lt;strong&gt;Discuss this on Reddit&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Each item in the language has a unique &lt;em&gt;name&lt;&#x2F;em&gt;. This is identified with a
scope-separated string, like &lt;code&gt;main::$0::bar&lt;&#x2F;code&gt;, which could be an inner function
&lt;code&gt;foo&lt;&#x2F;code&gt; inside of another function &lt;code&gt;bar&lt;&#x2F;code&gt;. The &lt;code&gt;$0&lt;&#x2F;code&gt; simply indicates that it
resides within the first anonymous scope inside of &lt;code&gt;main&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Because this item contains an anonymous component &lt;code&gt;$0&lt;&#x2F;code&gt; we say that it&#x27;s
&lt;em&gt;publicly unaddressable&lt;&#x2F;em&gt;. Unaddressable items is not usable outside of the
scope in which it&#x27;s defined. And we don&#x27;t provide any public mechanisms for
constructing the name easily. So they are used to &amp;quot;hide&amp;quot; things.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So the compiler broadly speaking is split up into two distinct steps.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Indexing&lt;&#x2F;strong&gt;, during which the entire AST is walked over and language items
are added to the query system.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Assembling&lt;&#x2F;strong&gt;, at which point we process the AST to spit out instructions for
the virtual machine. Things discovered during indexing are used to make
assembly decisions.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A good example of why indexing has to be a distinct step. Consider how we
compile a generator. A function is a generator if it contains the &lt;code&gt;yield&lt;&#x2F;code&gt;
keyword. But we can&#x27;t know if it does until we&#x27;ve walked through its content.
This is not something that can be determined in a single pass. We have to go
looking for a &lt;code&gt;yield&lt;&#x2F;code&gt; statement before we can decide how the function should be
assembled. From this requirement the indexing stage was born.&lt;&#x2F;p&gt;
&lt;div class=&quot;rune big&quot;
    rune-update-url=&quot;false&quot;
    rune-run-on-change=&quot;true&quot;&quot;
    rune-run-button=&quot;false&quot;&quot;
    rune-options=&quot;&quot;&quot;
    rune-experimental=&quot;false&quot;&quot;
    rune-instructions=&quot;&quot;&quot;
    rune-config=&quot;&quot;&quot;
    &gt;
    &lt;div class=&quot;rune-editor&quot;&gt;fn foo() {
    yield 42;
}

pub fn main() {
    foo()
}&lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-console&quot;&gt;
        &lt;div class=&quot;rune-control&quot;&gt;
            &lt;button class=&quot;rune-button rune-run&quot;&gt;Run&lt;&#x2F;button&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox instructions&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Instructions
            &lt;&#x2F;label&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox run-on-change&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Run on change
            &lt;&#x2F;label&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output primary&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output diagnostics&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output instructions&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-footnote&quot;&gt;The main function calling a generator&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;During indexing we store whether a function is a generator or not in its
&lt;em&gt;metadata&lt;&#x2F;em&gt;. And this metadata used to be keyed by its item. So simplified the
above program resulted in the following compiler meta:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;foo: { type: function, is_generator: true }
main: { type: function, is_generator: false }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So far so good. Let&#x27;s have a look at an example where we instead have a program
with two closures. Closures are compiled as special &lt;em&gt;unaddressable&lt;&#x2F;em&gt; functions:&lt;&#x2F;p&gt;
&lt;div class=&quot;rune big&quot;
    rune-update-url=&quot;false&quot;
    rune-run-on-change=&quot;true&quot;&quot;
    rune-run-button=&quot;false&quot;&quot;
    rune-options=&quot;&quot;&quot;
    rune-experimental=&quot;false&quot;&quot;
    rune-instructions=&quot;&quot;&quot;
    rune-config=&quot;&quot;&quot;
    &gt;
    &lt;div class=&quot;rune-editor&quot;&gt;pub fn main() {
    let a = || 1;
    let b = || 2;
    (a, b)
}&lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-console&quot;&gt;
        &lt;div class=&quot;rune-control&quot;&gt;
            &lt;button class=&quot;rune-button rune-run&quot;&gt;Run&lt;&#x2F;button&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox instructions&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Instructions
            &lt;&#x2F;label&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox run-on-change&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Run on change
            &lt;&#x2F;label&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output primary&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output diagnostics&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output instructions&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-footnote&quot;&gt;A tuple with two closures&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This program might contain the following items:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;main: the `main` function
main::$0::$0: first closure
main::$0::$1: second closure
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Any &lt;em&gt;metadata&lt;&#x2F;em&gt; produced during indexing has to be looked up during assembly. To
access this during assembly the item was reconstructed. And in order to do this
faithfully we have to traverse the AST in the same order as during indexing. We
started noticing problems when we encountered code like this:&lt;&#x2F;p&gt;
&lt;div class=&quot;rune big&quot;
    rune-update-url=&quot;false&quot;
    rune-run-on-change=&quot;true&quot;&quot;
    rune-run-button=&quot;false&quot;&quot;
    rune-options=&quot;&quot;&quot;
    rune-experimental=&quot;false&quot;&quot;
    rune-instructions=&quot;&quot;&quot;
    rune-config=&quot;&quot;&quot;
    &gt;
    &lt;div class=&quot;rune-editor&quot;&gt;pub fn main() {
    (|| 1, || 2)
}&lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-console&quot;&gt;
        &lt;div class=&quot;rune-control&quot;&gt;
            &lt;button class=&quot;rune-button rune-run&quot;&gt;Run&lt;&#x2F;button&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox instructions&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Instructions
            &lt;&#x2F;label&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox run-on-change&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Run on change
            &lt;&#x2F;label&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output primary&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output diagnostics&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output instructions&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-footnote&quot;&gt;A tuple with two anonymous functions&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We have two options here. Either we assign the anonymous component &lt;code&gt;$0&lt;&#x2F;code&gt; to the
&lt;em&gt;first&lt;&#x2F;em&gt; or the &lt;em&gt;second&lt;&#x2F;em&gt; closure. This might seem trivially solvable by having a
rule like &amp;quot;always assign anonymous components from left to right&amp;quot;, which is
essentially what we did. But not all operations are evaluated from left to
right. Take this for example:&lt;&#x2F;p&gt;
&lt;div class=&quot;rune big&quot;
    rune-update-url=&quot;false&quot;
    rune-run-on-change=&quot;true&quot;&quot;
    rune-run-button=&quot;false&quot;&quot;
    rune-options=&quot;&quot;&quot;
    rune-experimental=&quot;false&quot;&quot;
    rune-instructions=&quot;&quot;&quot;
    rune-config=&quot;&quot;&quot;
    &gt;
    &lt;div class=&quot;rune-editor&quot;&gt;pub fn main() {
    let object = #{};
    (|| object)()[(|| &quot;key&quot;)()] = (|| &quot;value&quot;)();
    object
}&lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-console&quot;&gt;
        &lt;div class=&quot;rune-control&quot;&gt;
            &lt;button class=&quot;rune-button rune-run&quot;&gt;Run&lt;&#x2F;button&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox instructions&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Instructions
            &lt;&#x2F;label&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox run-on-change&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Run on change
            &lt;&#x2F;label&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output primary&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output diagnostics&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output instructions&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-footnote&quot;&gt;A tuple with two anonymous functions&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have a hard time visualizing what this evaluates to, it should simply
result in &lt;code&gt;object[&amp;quot;key&amp;quot;] = &amp;quot;value&amp;quot;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The evaluation order is the following, &lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=a4544dd01d8a7840d68bca9515f9b4a9&quot;&gt;which can try it for yourself in Rust&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;second[third] = first;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As these sort of details were being fixed, the order in which the items were
constructed changed. It was too easy and sometimes complicated to fix the order
in which items were constructed during both phases. Miscompilations like this
could cause problems like the wrong closure being called if they happened to be
siblings in a complex expression.&lt;&#x2F;p&gt;
&lt;p&gt;Obviously this had to be fixed. So how did we do it?&lt;&#x2F;p&gt;
&lt;h4 id=&quot;opaque-identifiers-in-the-ast&quot;&gt;Opaque identifiers in the AST&lt;&#x2F;h4&gt;
&lt;p&gt;Instead of reconstructing the same item during assembly to lookup metadata
through, we assign the metadata once during indexing and construct an &lt;em&gt;opaque
identifier&lt;&#x2F;em&gt;. This is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;blob&#x2F;main&#x2F;crates&#x2F;rune&#x2F;src&#x2F;ast&#x2F;path.rs#L14&quot;&gt;assigned to the relevant AST&lt;&#x2F;a&gt; and is exclusively used to
lookup metadata. The query system &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;blob&#x2F;main&#x2F;crates&#x2F;runestick&#x2F;src&#x2F;id.rs#L38&quot;&gt;guarantees that each assigned identifier is
unique&lt;&#x2F;a&gt;, which helps to avoid any conflicts.&lt;&#x2F;p&gt;
&lt;p&gt;This way it doesn&#x27;t matter which order elements are being processed during
assembly. The identifier from the AST is simply used to safely look up the
correct compile time metadata. We don&#x27;t need to invent and enforce a soft rule
like &amp;quot;always assign anonymous components from left to right&amp;quot;. Something that
would otherwise require near-perfect test coverage to be effective.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>This month and a half in Rune</title>
		<published>2020-10-19T00:00:00+00:00</published>
		<updated>2020-10-19T00:00:00+00:00</updated>
		<link href="https://rune-rs.github.io/posts/tmir1/" type="text/html"/>
		<id>https://rune-rs.github.io/posts/tmir1/</id>
		<content type="html">&lt;p&gt;A bit more than one month ago &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;in67d3&#x2F;introducing_rune_a_new_stackbased_dynamic&#x2F;&quot;&gt;I announced Rune&lt;&#x2F;a&gt; 🥳. And the response so far has
been amazing.&lt;&#x2F;p&gt;
&lt;p&gt;A lot of &lt;em&gt;stuff&lt;&#x2F;em&gt; has happened since then, so in this post I&#x27;ll detail some of
the developments since the initial announcement.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;This is also an announcement for Rune &lt;code&gt;0.7&lt;&#x2F;code&gt;. But the exact number shouldn&#x27;t be
taken too seriously given the experimental state of the project right now. In
the future we&#x27;ll be trying to bake a release roughly once every month which
might or might not include breaking changes.&lt;&#x2F;p&gt;
&lt;p&gt;For those of you new to the project, Rune is an open source embeddable dynamic
programming language that compiles and runs on a virtual machine called
Runestick. It is designed to feel like Rust without types, and be about as fast
and convenient to use as Lua. You can read about it in &lt;a href=&quot;https:&#x2F;&#x2F;rune-rs.github.io&#x2F;book&#x2F;&quot;&gt;the foreword to the
book&lt;&#x2F;a&gt; which also explains why I started making a new programming language.&lt;&#x2F;p&gt;
&lt;p&gt;Feel free to &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;jdvc8r&#x2F;this_month_and_a_half_in_rune&#x2F;&quot;&gt;&lt;strong&gt;Discuss this on Reddit&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rune-rs.github.io&#x2F;posts&#x2F;tmir1&#x2F;#welcome-to-the-playground&quot;&gt;Welcome to the playground&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rune-rs.github.io&#x2F;posts&#x2F;tmir1&#x2F;#modules-and-visibility&quot;&gt;Modules and visibility&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rune-rs.github.io&#x2F;posts&#x2F;tmir1&#x2F;#macros&quot;&gt;Macros&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rune-rs.github.io&#x2F;posts&#x2F;tmir1&#x2F;#println-and-formatargs&quot;&gt;println! and FormatArgs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rune-rs.github.io&#x2F;posts&#x2F;tmir1&#x2F;#constant-evaluation&quot;&gt;constant evaluation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rune-rs.github.io&#x2F;posts&#x2F;tmir1&#x2F;#better-iterator-support&quot;&gt;Better iterator support&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rune-rs.github.io&#x2F;posts&#x2F;tmir1&#x2F;#ide-support&quot;&gt;IDE Support&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rune-rs.github.io&#x2F;posts&#x2F;tmir1&#x2F;#full-changelog&quot;&gt;Full Changelog&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;welcome-to-the-playground&quot;&gt;Welcome to the playground&lt;&#x2F;h2&gt;
&lt;p&gt;You might have noticed that this blog post contains runnable sections of code,
like this:&lt;&#x2F;p&gt;
&lt;div class=&quot;rune big&quot;
    rune-update-url=&quot;false&quot;
    rune-run-on-change=&quot;true&quot;&quot;
    rune-run-button=&quot;false&quot;&quot;
    rune-options=&quot;&quot;&quot;
    rune-experimental=&quot;false&quot;&quot;
    rune-instructions=&quot;&quot;&quot;
    rune-config=&quot;&quot;&quot;
    &gt;
    &lt;div class=&quot;rune-editor&quot;&gt;const NAME = &quot;Friend&quot;;

pub fn main() {
    println!(&quot;Hello, {}&quot;, NAME);
}&lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-console&quot;&gt;
        &lt;div class=&quot;rune-control&quot;&gt;
            &lt;button class=&quot;rune-button rune-run&quot;&gt;Run&lt;&#x2F;button&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox instructions&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Instructions
            &lt;&#x2F;label&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox run-on-change&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Run on change
            &lt;&#x2F;label&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output primary&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output diagnostics&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output instructions&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-footnote&quot;&gt;A code section you can edit&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This is used to power the &lt;a href=&quot;https:&#x2F;&#x2F;rune-rs.github.io&#x2F;play&#x2F;&quot;&gt;&lt;strong&gt;Rune playground&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. A place that allow you to fiddle
with Rune online and share code snippets with others.&lt;&#x2F;p&gt;
&lt;p&gt;In order to accomplish this, we made sure Rune could compile and run on
&lt;a href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot;&gt;WebAssembly&lt;&#x2F;a&gt;. And &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;tree&#x2F;main&#x2F;crates&#x2F;rune-wasm&quot;&gt;introduced a module&lt;&#x2F;a&gt; which provides an interface to the
compiler.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The content of these snippets are currently stored in the URL, so try to keep
them small for others&#x27; sake!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;modules-and-visibility&quot;&gt;Modules and visibility&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve taught rune to expand modules and respect visibility rules. This is a nice
feature that enabled better encapsulation and it brings the capabilities of Rune
more in line with Rust.&lt;&#x2F;p&gt;
&lt;p&gt;You can see basic modules in action with the following test case borrowed from
the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;visibility-and-privacy.html&quot;&gt;Rust reference book&lt;&#x2F;a&gt; (ignore the unused warnings 😉):&lt;&#x2F;p&gt;
&lt;div class=&quot;rune big&quot;
    rune-update-url=&quot;false&quot;
    rune-run-on-change=&quot;true&quot;&quot;
    rune-run-button=&quot;false&quot;&quot;
    rune-options=&quot;&quot;&quot;
    rune-experimental=&quot;false&quot;&quot;
    rune-instructions=&quot;&quot;&quot;
    rune-config=&quot;{&amp;quot;suppress_text_warnings&amp;quot;: true}&quot;&quot;
    &gt;
    &lt;div class=&quot;rune-editor&quot;&gt;mod crate_helper_module {
    pub fn crate_helper() {}

    fn implementation_detail() {}
}

pub fn public_api() {}

pub mod submodule {
    use crate::crate_helper_module;

    pub fn my_method() {
        crate_helper_module::crate_helper();
    }

    fn my_implementation() {}

    mod test {
        fn test_my_implementation() {
            super::my_implementation();
        }
    }
}

pub fn main() {
    submodule::my_method();
}&lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-console&quot;&gt;
        &lt;div class=&quot;rune-control&quot;&gt;
            &lt;button class=&quot;rune-button rune-run&quot;&gt;Run&lt;&#x2F;button&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox instructions&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Instructions
            &lt;&#x2F;label&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox run-on-change&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Run on change
            &lt;&#x2F;label&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output primary&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output diagnostics&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output instructions&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-footnote&quot;&gt;Basic modules and visibility smoke test&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This means that we&#x27;ve had to extend the existing bare bones system so that it
understands how to perform, and &lt;em&gt;cache&lt;&#x2F;em&gt; recursive imports and their visibility.
At this point it doesn&#x27;t behave exactly like Rust. One example of this is that
conflicting wildcard imports simply override each other instead of &lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=3c0100d683d19c23168fa23e57483d2a&quot;&gt;being marked
as ambiguous&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;rune big&quot;
    rune-update-url=&quot;false&quot;
    rune-run-on-change=&quot;true&quot;&quot;
    rune-run-button=&quot;false&quot;&quot;
    rune-options=&quot;&quot;&quot;
    rune-experimental=&quot;false&quot;&quot;
    rune-instructions=&quot;&quot;&quot;
    rune-config=&quot;&quot;&quot;
    &gt;
    &lt;div class=&quot;rune-editor&quot;&gt;mod a { pub struct Foo; }
mod b { pub struct Foo; }
use {a::*, b::*};
pub fn main() { Foo is b::Foo }&lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-console&quot;&gt;
        &lt;div class=&quot;rune-control&quot;&gt;
            &lt;button class=&quot;rune-button rune-run&quot;&gt;Run&lt;&#x2F;button&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox instructions&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Instructions
            &lt;&#x2F;label&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox run-on-change&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Run on change
            &lt;&#x2F;label&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output primary&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output diagnostics&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output instructions&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-footnote&quot;&gt;The last wildcard import wins&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;But we do have the basic rules down &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;visibility-and-privacy.html&quot;&gt;as outlined in the reference&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;If an item is public, then it can be accessed externally from some module m
if you can access all the item&#x27;s ancestor modules from m. You can also
potentially be able to name the item through re-exports. See below.&lt;&#x2F;li&gt;
&lt;li&gt;If an item is private, it may be accessed by the current module and its
descendants.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;What hasn&#x27;t been implemented yet is the separation between between the extern
prelude and crate root, as described &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;Koxiaet&#x2F;8c05ebd4e0e9347eb05f265dfb7252e1#2018-edition&quot;&gt;in this excellent post by Koxiaet&lt;&#x2F;a&gt;. This
would require refactoring some tricky parts of the module system, but it &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;issues&#x2F;160&quot;&gt;is on
the roadmap&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;macros&quot;&gt;Macros&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve taught Rune how to parse and execute macros. Macros are compile-time
procedures which consumes one token stream and transforms it to produce another
in its place.&lt;&#x2F;p&gt;
&lt;p&gt;This is of course &lt;em&gt;a bit complicated&lt;&#x2F;em&gt;. You have to take care that macro
expansion happens in a manner that is well integrated into the rest of the
compilation. Too early, and the items produces in the macro for example can&#x27;t
see imports. Too late, and it can&#x27;t produce them. There are &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;issues&#x2F;154&quot;&gt;still a few things&lt;&#x2F;a&gt;
that need to be figured out. But it&#x27;s shaping up pretty well.&lt;&#x2F;p&gt;
&lt;p&gt;Rune support for macros is currently &lt;em&gt;experimental&lt;&#x2F;em&gt;. Macros are restricted to
native modules. This makes matters easier, because native modules are written in
Rust and are therefore compiled &lt;em&gt;before&lt;&#x2F;em&gt; any Rune program using them. Neatly
getting around the issue that you have to compile the macro before it can be
run.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve tried to learn about macros from Rust. Parsing in Rune has been designed
in a way so that it can be re-used directly within macros, similarly to what you
get with the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;syn&#x2F;1&quot;&gt;&lt;code&gt;syn&lt;&#x2F;code&gt; crate&lt;&#x2F;a&gt;. We also provide our own version of the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;quote&#x2F;1&quot;&gt;&lt;code&gt;quote!&lt;&#x2F;code&gt;
macro&lt;&#x2F;a&gt; to ergonomically produce token streams.&lt;&#x2F;p&gt;
&lt;p&gt;The following is an example macro that comes with the &lt;code&gt;std::experiments&lt;&#x2F;code&gt; crate.
It translates &amp;quot;stringy math&amp;quot; into rune expressions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;rune&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ast&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;rune&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;macros&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;rune&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{quote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Parser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Spanned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; TokenStream}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;runestick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;SpannedError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F;&#x2F; Implementation for the `stringy_math!` macro.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;stringy_math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;TokenStream) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;runestick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;&amp;lt;TokenStream&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; parser &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Parser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;from_token_stream(stream)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;quote!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;while !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;parser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;is_eof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; op &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; parser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;&amp;lt;ast&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Ident&amp;gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; parser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;&amp;lt;ast&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Expr&amp;gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;

        output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;macros&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;resolve(op)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;add&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;quote!((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;output) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+ #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;arg)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;sub&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;quote!((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;output) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;- #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;arg)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;div&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;quote!((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;output) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F; #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;arg)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;mul&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;quote!((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;output) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;* #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;arg)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(SpannedError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;msg(
                    op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;unsupported operation&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;())
            }
        }
    }

    parser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;eof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;into_token_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can try it out below:&lt;&#x2F;p&gt;
&lt;div class=&quot;rune big&quot;
    rune-update-url=&quot;false&quot;
    rune-run-on-change=&quot;true&quot;&quot;
    rune-run-button=&quot;false&quot;&quot;
    rune-options=&quot;&quot;&quot;
    rune-experimental=&quot;true&quot;&quot;
    rune-instructions=&quot;&quot;&quot;
    rune-config=&quot;&quot;&quot;
    &gt;
    &lt;div class=&quot;rune-editor&quot;&gt;use std::experiments::stringy_math;

pub fn main() {
    let value = stringy_math!(add 10 sub 5);
    println!(&quot;result: {}&quot;, value);
}&lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-console&quot;&gt;
        &lt;div class=&quot;rune-control&quot;&gt;
            &lt;button class=&quot;rune-button rune-run&quot;&gt;Run&lt;&#x2F;button&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox instructions&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Instructions
            &lt;&#x2F;label&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox run-on-change&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Run on change
            &lt;&#x2F;label&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output primary&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output diagnostics&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output instructions&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-footnote&quot;&gt;Use of the stringy_math! macro&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Macros are intended to be a stable bedrock for language extension. To support
use-cases which can use a bit of custom syntax or behavior glued into a project.
A nice example of this in Rust is &lt;a href=&quot;https:&#x2F;&#x2F;rocket.rs&quot;&gt;Rocket&lt;&#x2F;a&gt;, which uses macros to great effect to
improve the ergonomics of writing web services. The hopes are that macros can be
used to provide similar experiences where appropriate in Rune.&lt;&#x2F;p&gt;
&lt;p&gt;The current macro system is also being dogfooded to provide a couple of utility
macros that Rust developers would expect like &lt;code&gt;println!&lt;&#x2F;code&gt;, which will be covered
in the next section.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;println-and-formatargs&quot;&gt;&lt;code&gt;println!&lt;&#x2F;code&gt; and &lt;code&gt;FormatArgs&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In Rust, when you want to print something to stdout you can reach for the
&lt;code&gt;println!&lt;&#x2F;code&gt; macro.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Hello {:&amp;gt;12}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;World&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first argument in this macro is called a format string. And combined it
provides a convenient way for performing common text formatting operations in
Rust. Now Rune can also use a limited form of &lt;code&gt;println!&lt;&#x2F;code&gt;, and format arguments
in general.&lt;&#x2F;p&gt;
&lt;div class=&quot;rune big&quot;
    rune-update-url=&quot;false&quot;
    rune-run-on-change=&quot;true&quot;&quot;
    rune-run-button=&quot;false&quot;&quot;
    rune-options=&quot;&quot;&quot;
    rune-experimental=&quot;false&quot;&quot;
    rune-instructions=&quot;&quot;&quot;
    rune-config=&quot;&quot;&quot;
    &gt;
    &lt;div class=&quot;rune-editor&quot;&gt;pub fn main() {
    println!(&quot;Hello {:&gt;12}&quot;, &quot;World&quot;);
}&lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-console&quot;&gt;
        &lt;div class=&quot;rune-control&quot;&gt;
            &lt;button class=&quot;rune-button rune-run&quot;&gt;Run&lt;&#x2F;button&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox instructions&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Instructions
            &lt;&#x2F;label&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox run-on-change&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Run on change
            &lt;&#x2F;label&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output primary&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output diagnostics&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output instructions&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-footnote&quot;&gt;Formatting with println!&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;To implement string formatting like this we&#x27;ve added &lt;code&gt;FormatArgs&lt;&#x2F;code&gt;. A type that
implements &lt;code&gt;Parse&lt;&#x2F;code&gt; that can be used to add message formatting to any macro. The
full implementation of the &lt;code&gt;println!&lt;&#x2F;code&gt; is simply using it to format a string
which is passed to &lt;code&gt;std::io::println&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;println_macro&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;TokenStream) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;&amp;lt;TokenStream&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Parser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;from_token_stream(stream)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; args &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;parse_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;&amp;lt;macros&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;FormatArgs&amp;gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; expanded &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;expand&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(quote!(std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;expanded))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;into_token_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To accomplish this, &lt;code&gt;FormatArgs&lt;&#x2F;code&gt; is actually expanded into two internal macros:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#[builtin] template!(..)&lt;&#x2F;code&gt; which is the same macro produced by template
strings.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;#[builtin] format!(..)&lt;&#x2F;code&gt; which produces a &lt;code&gt;Format&lt;&#x2F;code&gt; value that conveniently
implements &lt;a href=&quot;https:&#x2F;&#x2F;rune-rs.github.io&#x2F;book&#x2F;template_literals.html#the-string_display-protocol&quot;&gt;the &lt;code&gt;STRING_DISPLAY&lt;&#x2F;code&gt; protocol&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Strictly speaking, these expansions result in valid Rune. The &lt;code&gt;#[builtin]&lt;&#x2F;code&gt;
attribute modifies how the macros are looked up so that they are solely expanded
at compile time into the appropriate instructions. They are intended for
internal use only, so we&#x27;ll probably restrict their use in the future. But for
now you can simply type out the equivalent code that is being generated to get a
better understanding for how they work 🙃.&lt;&#x2F;p&gt;
&lt;div class=&quot;rune big&quot;
    rune-update-url=&quot;false&quot;
    rune-run-on-change=&quot;true&quot;&quot;
    rune-run-button=&quot;false&quot;&quot;
    rune-options=&quot;&quot;&quot;
    rune-experimental=&quot;false&quot;&quot;
    rune-instructions=&quot;&quot;&quot;
    rune-config=&quot;&quot;&quot;
    &gt;
    &lt;div class=&quot;rune-editor&quot;&gt;use std::io;

pub fn main() {
    io::println(#[builtin] template! {
        &quot;Hello &quot;,
        #[builtin] format! {
            &quot;World&quot;,
            width = 12,
            align = right
        }
    });
}&lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-console&quot;&gt;
        &lt;div class=&quot;rune-control&quot;&gt;
            &lt;button class=&quot;rune-button rune-run&quot;&gt;Run&lt;&#x2F;button&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox instructions&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Instructions
            &lt;&#x2F;label&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox run-on-change&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Run on change
            &lt;&#x2F;label&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output primary&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output diagnostics&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output instructions&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-footnote&quot;&gt;Using the built-in template! and format! macros directly&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This also means that the following macros now also support formatting:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;panic!&lt;&#x2F;code&gt; to customize the panic message.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;assert!&lt;&#x2F;code&gt; and &lt;code&gt;assert_eq!&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The newly introduced &lt;code&gt;format!&lt;&#x2F;code&gt;, which produces a string directly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;constant-evaluation&quot;&gt;constant evaluation&lt;&#x2F;h2&gt;
&lt;p&gt;Work has been started to support &lt;em&gt;constant evaluation&lt;&#x2F;em&gt;. Usually all code is
compiled to target the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;runestick&#x2F;0&quot;&gt;runestick virtual machine&lt;&#x2F;a&gt;, but constant evaluation
introduces a separate interpreted mode that the compiler can run directly.&lt;&#x2F;p&gt;
&lt;p&gt;A limited subset of the language is currently available in constant contexts,
this includes functions and &lt;code&gt;const&lt;&#x2F;code&gt; items. Which can do the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Numerical computations.&lt;&#x2F;li&gt;
&lt;li&gt;Simple control flow through &lt;code&gt;if&lt;&#x2F;code&gt;, &lt;code&gt;while&lt;&#x2F;code&gt;, and &lt;code&gt;loop&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;A number of binary operators.&lt;&#x2F;li&gt;
&lt;li&gt;String operations and templates.&lt;&#x2F;li&gt;
&lt;li&gt;... and a bit more&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Native functions are currently &lt;em&gt;not&lt;&#x2F;em&gt; visible during constant evaluation. This
could be enabled, but we still need to decide which scope to limit constant
evaluation to. I.e. do we want to be able to perform database requests during
constant evaluation? In practice this will probably be determined selectively.
Constant values are aggressively cached, so we should probably require a proof
obligation that they have no side effects and leave more complex uses with
potential side effects to macros.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an example of what you can do today with constant evaluation:&lt;&#x2F;p&gt;
&lt;div class=&quot;rune big&quot;
    rune-update-url=&quot;false&quot;
    rune-run-on-change=&quot;false&quot;&quot;
    rune-run-button=&quot;false&quot;&quot;
    rune-options=&quot;&quot;&quot;
    rune-experimental=&quot;false&quot;&quot;
    rune-instructions=&quot;&quot;&quot;
    rune-config=&quot;&quot;&quot;
    &gt;
    &lt;div class=&quot;rune-editor&quot;&gt;const fn greeting(name) {
    `Hello {name}`
}

&#x2F;&#x2F;&#x2F; Define a collection of predefined greetings.
const GREETINGS = [
    greeting(&quot;Stranger&quot;),
    greeting(&quot;Jane&quot;),
    greeting(&quot;John&quot;),
    greeting(&quot;Mio&quot;),
];

pub fn main() {
    let rng = rand::Pcg64::new();
    let greetings = GREETINGS;

	println(greetings[rng.int_range(0, greetings.len())]);
}&lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-console&quot;&gt;
        &lt;div class=&quot;rune-control&quot;&gt;
            &lt;button class=&quot;rune-button rune-run&quot;&gt;Run&lt;&#x2F;button&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox instructions&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Instructions
            &lt;&#x2F;label&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox run-on-change&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Run on change
            &lt;&#x2F;label&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output primary&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output diagnostics&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output instructions&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-footnote&quot;&gt;Asynchronous programming using select&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;As a bonus, here&#x27;s the &lt;a href=&quot;https:&#x2F;&#x2F;rune-rs.github.io&#x2F;play&#x2F;&quot;&gt;Fibonacci example used in the playground&lt;&#x2F;a&gt; as a constant
function. We only need to introduce &lt;code&gt;const&lt;&#x2F;code&gt; to the &lt;code&gt;fn&lt;&#x2F;code&gt; item for it to work.&lt;&#x2F;p&gt;
&lt;div class=&quot;rune big&quot;
    rune-update-url=&quot;false&quot;
    rune-run-on-change=&quot;false&quot;&quot;
    rune-run-button=&quot;false&quot;&quot;
    rune-options=&quot;&quot;&quot;
    rune-experimental=&quot;false&quot;&quot;
    rune-instructions=&quot;&quot;&quot;
    rune-config=&quot;&quot;&quot;
    &gt;
    &lt;div class=&quot;rune-editor&quot;&gt;const fn fib(n) {
    if n &lt;= 1 {
        n
    } else {
        fib(n - 1) + fib(n - 2)
    }
}

pub fn main() {
    fib(15)
}&lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-console&quot;&gt;
        &lt;div class=&quot;rune-control&quot;&gt;
            &lt;button class=&quot;rune-button rune-run&quot;&gt;Run&lt;&#x2F;button&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox instructions&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Instructions
            &lt;&#x2F;label&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox run-on-change&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Run on change
            &lt;&#x2F;label&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output primary&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output diagnostics&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output instructions&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-footnote&quot;&gt;Asynchronous programming using select&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;better-iterator-support&quot;&gt;Better iterator support&lt;&#x2F;h2&gt;
&lt;p&gt;Iterators have gotten a bit of love in that they are now represented as a single
consistent type called &lt;code&gt;Iterator&lt;&#x2F;code&gt;. This holds all the iterators transformation
methods like &lt;code&gt;map&lt;&#x2F;code&gt;, &lt;code&gt;filter&lt;&#x2F;code&gt;, and &lt;code&gt;rev&lt;&#x2F;code&gt;. Any function producing an iterator
should produce an instance of &lt;code&gt;Iterator&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;rune big&quot;
    rune-update-url=&quot;false&quot;
    rune-run-on-change=&quot;true&quot;&quot;
    rune-run-button=&quot;false&quot;&quot;
    rune-options=&quot;&quot;&quot;
    rune-experimental=&quot;false&quot;&quot;
    rune-instructions=&quot;&quot;&quot;
    rune-config=&quot;&quot;&quot;
    &gt;
    &lt;div class=&quot;rune-editor&quot;&gt;struct Foo {
    value,
}

pub fn main() {
    let values = [1, &quot;foo&quot;, Foo { value: 42 }];

    for v in values.iter().rev() {
        println!(&quot;{:?}&quot;, v);
    }
}&lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-console&quot;&gt;
        &lt;div class=&quot;rune-control&quot;&gt;
            &lt;button class=&quot;rune-button rune-run&quot;&gt;Run&lt;&#x2F;button&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox instructions&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Instructions
            &lt;&#x2F;label&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox run-on-change&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Run on change
            &lt;&#x2F;label&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output primary&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output diagnostics&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output instructions&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-footnote&quot;&gt;Reversing an iterator&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We&#x27;ve also added two collect functions, &lt;code&gt;collect_vec&lt;&#x2F;code&gt; and &lt;code&gt;collect_object&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;rune big&quot;
    rune-update-url=&quot;false&quot;
    rune-run-on-change=&quot;true&quot;&quot;
    rune-run-button=&quot;false&quot;&quot;
    rune-options=&quot;&quot;&quot;
    rune-experimental=&quot;false&quot;&quot;
    rune-instructions=&quot;&quot;&quot;
    rune-config=&quot;&quot;&quot;
    &gt;
    &lt;div class=&quot;rune-editor&quot;&gt;struct Foo {
    value,
}

pub fn main() {
    let values = [1, &quot;foo&quot;, Foo { value: 42 }];

    values.iter().filter(|v| v is Foo).collect_vec()
}&lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-console&quot;&gt;
        &lt;div class=&quot;rune-control&quot;&gt;
            &lt;button class=&quot;rune-button rune-run&quot;&gt;Run&lt;&#x2F;button&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox instructions&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Instructions
            &lt;&#x2F;label&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox run-on-change&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Run on change
            &lt;&#x2F;label&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output primary&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output diagnostics&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output instructions&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-footnote&quot;&gt;Apply filter to an iterator and collecting the result&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;Why two functions? Well, Rune doesn&#x27;t have &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;iter&#x2F;trait.Iterator.html#method.collect&quot;&gt;type annotations to select the
desired output type&lt;&#x2F;a&gt;. This solution should be considered preliminary, because
this might be a good case where &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Gradual_typing&quot;&gt;gradual typing&lt;&#x2F;a&gt; might be used in the future.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;ide-support&quot;&gt;IDE Support&lt;&#x2F;h2&gt;
&lt;p&gt;Work has been started to provide editor support through &lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=udoprog.rune-vscode&quot;&gt;rune-vscode&lt;&#x2F;a&gt;. A Visual
Studio Code extension that adds syntax highlighting and integration with the
Rune language server.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;111092&#x2F;93017349-32a28f00-f5c8-11ea-9301-5fcb586c89c8.gif&quot; alt=&quot;Showcasing go to definitions&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;While it works pretty well for now, don&#x27;t get too excited. There&#x27;s still a lot
of work to do. Next I&#x27;ll detail the most important tasks yet to be done.&lt;&#x2F;p&gt;
&lt;p&gt;We absolutely &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;issues&#x2F;73&quot;&gt;need to support external definition files&lt;&#x2F;a&gt; for this to work well.
Right now the language server simply includes all the native modules that
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;tree&#x2F;main&#x2F;crates&#x2F;rune-modules&quot;&gt;happen to be bundled with Rune&lt;&#x2F;a&gt;. We don&#x27;t see custom modules included
elsewhere. The solution is to have support for dynamically loading separate
declaration files which defines the content of native modules. Like with
&lt;a href=&quot;https:&#x2F;&#x2F;www.typescriptlang.org&#x2F;docs&#x2F;handbook&#x2F;declaration-files&#x2F;by-example.html&quot;&gt;&lt;code&gt;.d.ts&lt;&#x2F;code&gt; files in TypeScript&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The language server is using the same compiler as Rune. Our hope is to be able
to maintain the same internals and avoid as much duplication as possible. To
accomplish this, we&#x27;re looking closely at rust-analyzer. Specifically &lt;a href=&quot;https:&#x2F;&#x2F;rust-analyzer.github.io&#x2F;blog&#x2F;2020&#x2F;09&#x2F;16&#x2F;challeging-LR-parsing.html&quot;&gt;their
approach to parsing&lt;&#x2F;a&gt; which provides better error resilience in order to give the
user a better experience when challenged with incomplete code. Something we
hopefully can work incrementally towards.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fixing-a-common-miscompilation-in-rune&quot;&gt;Fixing a common miscompilation in Rune&lt;&#x2F;h2&gt;
&lt;p&gt;The compiler has been redesigned to avoid a common root cause of
miscompilations. This is such an extensive topic that &lt;a href=&quot;https:&#x2F;&#x2F;rune-rs.github.io&#x2F;posts&#x2F;common-miscompilation&#x2F;&quot;&gt;it deserves its own
post&lt;&#x2F;a&gt;. But the cliff note is that the compiler has been redesigned in a way to
make a class of bugs harder to introduce.&lt;&#x2F;p&gt;
&lt;p&gt;Relevant issues: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;118&quot;&gt;#118&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;127&quot;&gt;#127&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;contributors&quot;&gt;Contributors&lt;&#x2F;h2&gt;
&lt;p&gt;A number of people have provided code, time, and extensive feedback to Rune over
the last development period.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aspenluxxxy&quot;&gt;aspenluxxxy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dillonhicks&quot;&gt;dillonhicks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;genusistimelord&quot;&gt;genusistimelord&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;killercup&quot;&gt;killercup&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;macginitie&quot;&gt;macginitie&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MinusGix&quot;&gt;MinusGix&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;seanchen1991&quot;&gt;seanchen1991&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shekohex&quot;&gt;shekohex&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Sparkpin&quot;&gt;Sparkpin&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;stoically&quot;&gt;stoically&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Thank you all very much for helping make Rune better!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;Full Changelog&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;added&quot;&gt;Added&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;The Rune project now has a Code of Conduct (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;12&quot;&gt;#12&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Support for bitwise operations on numbers (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;13&quot;&gt;#13&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;20&quot;&gt;#20&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Book now has support for highlighting &lt;code&gt;rune&lt;&#x2F;code&gt; blocks (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;14&quot;&gt;#14&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Preliminary support for modules without visibility (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;16&quot;&gt;#16&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;17&quot;&gt;#17&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Debug information for function variable names now reflect source (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;24&quot;&gt;#24&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Initial support for macros (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;29&quot;&gt;#29&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;30&quot;&gt;#30&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;31&quot;&gt;#31&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;114&quot;&gt;#114&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;135&quot;&gt;#135&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;136&quot;&gt;#136&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;137&quot;&gt;#137&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;138&quot;&gt;#138&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;141&quot;&gt;#141&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;142&quot;&gt;#142&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;143&quot;&gt;#143&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;144&quot;&gt;#144&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Add cargo build cache (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;36&quot;&gt;#36&lt;&#x2F;a&gt;) (thanks &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shekohex&quot;&gt;shekohex&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Rust &lt;code&gt;quote!&lt;&#x2F;code&gt; macro for Rune macro authors (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;34&quot;&gt;#34&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Support for object- and tuple-like field assignments (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;38&quot;&gt;#38&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;39&quot;&gt;#39&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;40&quot;&gt;#40&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;66&quot;&gt;#66&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Support for lazy evaluation for and&#x2F;or (&lt;code&gt;&amp;amp;&amp;amp;&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;||&lt;&#x2F;code&gt;) (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;50&quot;&gt;#50&lt;&#x2F;a&gt;) (thanks
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;seanchen1991&quot;&gt;seanchen1991&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Add &lt;code&gt;AsTokens&lt;&#x2F;code&gt;, &lt;code&gt;FromValue&lt;&#x2F;code&gt;, &lt;code&gt;ToValue&lt;&#x2F;code&gt;, and &lt;code&gt;Spanned&lt;&#x2F;code&gt; derives (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;41&quot;&gt;#41&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;85&quot;&gt;#85&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;87&quot;&gt;#87&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;88&quot;&gt;#88&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;113&quot;&gt;#113&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Visual studio code extension with syntax highlighting and basic language
server (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;46&quot;&gt;#46&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;47&quot;&gt;#47&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;48&quot;&gt;#48&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;60&quot;&gt;#60&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;74&quot;&gt;#74&lt;&#x2F;a&gt;) (thanks &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;killercup&quot;&gt;killercup&lt;&#x2F;a&gt;!).
&lt;ul&gt;
&lt;li&gt;As-you-type building (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;49&quot;&gt;#49&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Jump to definitions (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;61&quot;&gt;#61&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Multifile project support (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;64&quot;&gt;#64&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Automatic downloading of language server binary (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;69&quot;&gt;#69&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Non-zero exit status on script errors (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;issues&#x2F;58&quot;&gt;#58&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;59&quot;&gt;#59&lt;&#x2F;a&gt;) (thanks &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;killercup&quot;&gt;killercup&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Improve CLI by parsing arguments using &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;structopt&quot;&gt;&lt;code&gt;structopt&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;51&quot;&gt;#51&lt;&#x2F;a&gt;) (thanks
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shekohex&quot;&gt;shekohex&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Executing functions in the virtual machine can use external references
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;52&quot;&gt;#52&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Remove unused instruction in &lt;code&gt;loop&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;53&quot;&gt;#53&lt;&#x2F;a&gt;) (thanks &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;genusistimelord&quot;&gt;genusistimelord&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Tweak module dependencies to use native Rust modules (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;54&quot;&gt;#54&lt;&#x2F;a&gt;) (thanks
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;killercup&quot;&gt;killercup&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Internal changes to support a future C FFI (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;55&quot;&gt;#55&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Improving module API (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;56&quot;&gt;#56&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Extending &lt;code&gt;http&lt;&#x2F;code&gt; module to deserialize JSON directly (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;57&quot;&gt;#57&lt;&#x2F;a&gt;) (thanks
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;killercup&quot;&gt;killercup&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Automatic build releases on tags (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;68&quot;&gt;#68&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Fixed locals bug with breaking control in the middle of an index get operation
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;71&quot;&gt;#71&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Community site at https:&#x2F;&#x2F;rune-rs.github.io (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;75&quot;&gt;#75&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Add WASM-based Playground to community site https:&#x2F;&#x2F;rune-rs.github.io (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;77&quot;&gt;#77&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Support for limiting execution of &lt;code&gt;rune-wasm&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;80&quot;&gt;#80&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Support for modules, imports, re-exports, visibility, and path resolution
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;83&quot;&gt;#83&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;92&quot;&gt;#92&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;98&quot;&gt;#98&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;124&quot;&gt;#124&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;125&quot;&gt;#125&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;128&quot;&gt;#128&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;129&quot;&gt;#129&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;130&quot;&gt;#130&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;131&quot;&gt;#131&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;133&quot;&gt;#133&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;134&quot;&gt;#134&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;148&quot;&gt;#148&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;155&quot;&gt;#155&lt;&#x2F;a&gt;) (thanks &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dillonhicks&quot;&gt;dillonhicks&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Add WASM support for a couple of showcased rune modules (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;89&quot;&gt;#89&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Added runtime type information (RTTI) for values in Runestick (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;90&quot;&gt;#90&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;112&quot;&gt;#112&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Add a &lt;code&gt;rand&lt;&#x2F;code&gt; module to &lt;code&gt;rune-modules&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;100&quot;&gt;#100&lt;&#x2F;a&gt;) (thanks &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aspenluxxxy&quot;&gt;aspenluxxxy&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Initial support for constant evaluation (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;93&quot;&gt;#93&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;94&quot;&gt;#94&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;99&quot;&gt;#99&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;104&quot;&gt;#104&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;105&quot;&gt;#105&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;106&quot;&gt;#106&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;107&quot;&gt;#107&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;117&quot;&gt;#117&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;122&quot;&gt;#122&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;123&quot;&gt;#123&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;153&quot;&gt;#153&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Add &lt;code&gt;Args&lt;&#x2F;code&gt; implementation for &lt;code&gt;Vec&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;147&quot;&gt;#147&lt;&#x2F;a&gt;) (thanks &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MinusGix&quot;&gt;MinusGix&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Export a &lt;code&gt;Function&lt;&#x2F;code&gt; variant called &lt;code&gt;SyncFunction&lt;&#x2F;code&gt; that is thread-safe (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;149&quot;&gt;#149&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;151&quot;&gt;#151&lt;&#x2F;a&gt;) (thanks &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MinusGix&quot;&gt;MinusGix&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Support &lt;code&gt;move&lt;&#x2F;code&gt; modifier to async blocks and closures to take ownership of
values being used (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;152&quot;&gt;#152&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Basic &lt;code&gt;Iterator&lt;&#x2F;code&gt; support (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;156&quot;&gt;#156&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;157&quot;&gt;#157&lt;&#x2F;a&gt;) (thanks &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MinusGix&quot;&gt;MinusGix&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Support for calling protocol functions from native code using &lt;code&gt;Interface&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;159&quot;&gt;#159&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;changed&quot;&gt;Changed&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Make units more efficient by separating runtime and compile-time metadata (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;24&quot;&gt;#24&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Change the internal representation of &lt;code&gt;Item&lt;&#x2F;code&gt; to be more memory efficient (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;63&quot;&gt;#63&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Make the implementation of &lt;code&gt;ParseError&lt;&#x2F;code&gt; and &lt;code&gt;CompileError&lt;&#x2F;code&gt; more consistent (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;65&quot;&gt;#65&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Remove the &lt;code&gt;rune-testing&lt;&#x2F;code&gt; module (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;67&quot;&gt;#67&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Made evaluation order of index set operations the same as Rust (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;70&quot;&gt;#70&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Make hashing less error prone (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;72&quot;&gt;#72&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Various parser changes and tests (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;110&quot;&gt;#110&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Various internal changes (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;103&quot;&gt;#103&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;108&quot;&gt;#108&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;109&quot;&gt;#109&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Parser simplifications (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;120&quot;&gt;#120&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;121&quot;&gt;#121&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Negative literals are handled as expressions (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;132&quot;&gt;#132&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Syntax for template strings now follows EcmaScript (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;145&quot;&gt;#145&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fixed&quot;&gt;Fixed&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Introduced custom highlight.js to fix issue with hidden lines in the book
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;issues&#x2F;10&quot;&gt;#10&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Semi-colons in blocks weren&#x27;t required, they now are (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;32&quot;&gt;#32&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Fixed field assignments (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;38&quot;&gt;#38&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;40&quot;&gt;#40&lt;&#x2F;a&gt;) (thanks &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MinusGix&quot;&gt;MinusGix&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Book typos (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;11&quot;&gt;#11&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;18&quot;&gt;#18&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;28&quot;&gt;#28&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;issues&#x2F;37&quot;&gt;#37&lt;&#x2F;a&gt;) (thanks &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Sparkpin&quot;&gt;Sparkpin&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;seanchen1991&quot;&gt;seanchen1991&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;stoically&quot;&gt;stoically&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;macginitie&quot;&gt;macginitie&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Fix broken book links (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;84&quot;&gt;#84&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;86&quot;&gt;#86&lt;&#x2F;a&gt;) (thanks &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dillonhicks&quot;&gt;dillonhicks&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Fix pattern miscompilation (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;62&quot;&gt;#62&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Fixed bug with Closure optimization where it&#x27;s being treated as a function
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;issues&#x2F;21&quot;&gt;#21&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;22&quot;&gt;#22&lt;&#x2F;a&gt;) (thanks &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MinusGix&quot;&gt;MinusGix&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Fixed a number of clippy lints (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;35&quot;&gt;#35&lt;&#x2F;a&gt;) (thanks &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shekohex&quot;&gt;shekohex&lt;&#x2F;a&gt;!).&lt;&#x2F;li&gt;
&lt;li&gt;Fix using closures in literals, like &lt;code&gt;(0, || 42)&lt;&#x2F;code&gt; or &lt;code&gt;#{a: || 42}&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;78&quot;&gt;#78&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Shared access guards didn&#x27;t implement Drop allowing them to leak their guarded
value (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;pull&#x2F;119&quot;&gt;#119&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Hello Internet</title>
		<published>2020-09-18T00:00:00+00:00</published>
		<updated>2020-09-18T00:00:00+00:00</updated>
		<link href="https://rune-rs.github.io/posts/hello-internet/" type="text/html"/>
		<id>https://rune-rs.github.io/posts/hello-internet/</id>
		<content type="html">&lt;p&gt;Less then one month ago &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;in67d3&#x2F;introducing_rune_a_new_stackbased_dynamic&#x2F;&quot;&gt;I announced Rune on
Reddit&lt;&#x2F;a&gt;.
And the response has been amazing.&lt;&#x2F;p&gt;
&lt;p&gt;One of the issues raised were &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;issues&#x2F;45&quot;&gt;issue
#45&lt;&#x2F;a&gt;, &lt;strong&gt;Community Site for Rune&lt;&#x2F;strong&gt;.
This site is an attempt to address that.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;So let&#x27;s talk for a second about the tech behind this site. It&#x27;s driven by
&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt; and is deployed automatically through &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;actions?query=workflow%3ASite&quot;&gt;GitHub
Actions&lt;&#x2F;a&gt; on every
push to main. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rune-rs&#x2F;rune&#x2F;tree&#x2F;main&#x2F;tools&#x2F;site&quot;&gt;There&#x27;s a little bit of glue
involved&lt;&#x2F;a&gt; to
download and run Zola, but apart from that the experience has been really
smooth. It&#x27;s a great project overall.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;&amp;lt;()&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;var(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;ZOLA_URL&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(url) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bail!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;missing ZOLA_URL&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;target&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; bin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;zola&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;is_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;() {
        println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Downloading: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; url)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; bytes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;reqwest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;blocking&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;url)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; decoder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;GzDecoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;new(io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Cursor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;new(bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; archive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Archive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;new(decoder)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;
        archive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;unpack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(target)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;}

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;is_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;() {
        bail!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Missing bin: {}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;}

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; it &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;args()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;
    it&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;new(bin)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(it)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;exit(status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Basically it&#x27;s perfect. It&#x27;s part of the repository and I don&#x27;t have to think
too much about it. Hopefully others feel the same and that the threshold for
contributing to the site is as minimal as possible.&lt;&#x2F;p&gt;
&lt;p&gt;So now that I&#x27;ve set up the skeleton for it. Let&#x27;s build something cool!&lt;&#x2F;p&gt;
&lt;p&gt;P.S. And as a final treat, here&#x27;s a code snippet that you can edit and run! 😊&lt;&#x2F;p&gt;
&lt;div class=&quot;rune big&quot;
    rune-update-url=&quot;false&quot;
    rune-run-on-change=&quot;true&quot;&quot;
    rune-run-button=&quot;false&quot;&quot;
    rune-options=&quot;&quot;&quot;
    rune-experimental=&quot;false&quot;&quot;
    rune-instructions=&quot;&quot;&quot;
    rune-config=&quot;&quot;&quot;
    &gt;
    &lt;div class=&quot;rune-editor&quot;&gt;pub fn main() {
    println!(&quot;Hello World!&quot;);
}&lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-console&quot;&gt;
        &lt;div class=&quot;rune-control&quot;&gt;
            &lt;button class=&quot;rune-button rune-run&quot;&gt;Run&lt;&#x2F;button&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox instructions&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Instructions
            &lt;&#x2F;label&gt;

            &lt;label class=&quot;rune-option&quot;&gt;
                &lt;input class=&quot;rune-checkbox run-on-change&quot; type=&quot;checkbox&quot; title=&quot;Show compiled instructions&quot;&gt;&lt;&#x2F;input&gt;
                Run on change
            &lt;&#x2F;label&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output primary&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output diagnostics&quot;&gt;&lt;&#x2F;div&gt;
        &lt;div class=&quot;rune-output instructions&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;rune-footnote&quot;&gt;Showcasing the integrated editor. Neat, huh?&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
</feed>
